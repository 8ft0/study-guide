{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to your go-to resource for technical interview preparation in Linux, Bash, and Python! Designed to help you succeed in your next job interview, our site offers valuable tools and practice materials.</p>"},{"location":"#ace-your-technical-interviews-with-confidence","title":"Ace Your Technical Interviews with Confidence","text":""},{"location":"#what-youll-find-here","title":"What You'll Find Here:","text":"<ul> <li>Sample Quizzes with Answers: Test your knowledge with our comprehensive quizzes, complete with detailed answers to enhance your understanding.</li> <li>Example Coding Challenges: Prepare for coding interviews with real-world challenges and reference solutions to guide your learning.</li> <li>Studysheets: Access concise, well-organized studysheets for quick reference, covering essential commands and concepts in Linux, Bash, and Python.</li> </ul> <p>Start preparing today and boost your confidence for your upcoming technical interviews!</p> Note on Content <p>This is a collection of curated samples, insipred by looking at many SRE job descriptions to see what sort of skills are required.</p> <ul> <li>All content generated by ChatGPT</li> <li>Code samples have not been verified to work</li> <li>Answers have not been verified to be 100% correct</li> </ul>"},{"location":"DevOps/scenarios/Design%20a%20CICD%20Pipeline/","title":"Design a CI/CD Pipeline","text":"<p>Task: Design a CI/CD pipeline for deploying a microservices application to a Kubernetes cluster.</p> <p>Approach:</p> <ol> <li>Source Code Management:<ul> <li>Use Git for version control.</li> <li>Each microservice has its own repository.</li> <li>Use feature branching strategy.</li> </ul> </li> <li>Build and Test:<ul> <li>Use Jenkins or GitHub Actions to trigger builds on pull requests.</li> <li>Containerize each microservice using Docker.</li> <li>Run unit tests and integration tests during the build process.</li> <li>Use tools like SonarQube for code quality checks.</li> </ul> </li> <li>Continuous Integration:<ul> <li>Merge changes to the main branch triggers a new build.</li> <li>Use Docker to build and tag images.</li> <li>Store Docker images in a registry like Docker Hub or AWS ECR.</li> </ul> </li> <li>Continuous Deployment:<ul> <li>Deploy to a staging environment first.</li> <li>Use Kubernetes manifests or Helm charts for deployment.</li> <li>Run end-to-end tests in the staging environment.</li> <li>If tests pass, promote the build to the production environment.</li> </ul> </li> <li>Monitoring and Feedback:<ul> <li>Implement monitoring using Prometheus and Grafana.</li> <li>Set up alerting for failed deployments or performance issues.</li> <li>Use logging tools like ELK stack (Elasticsearch, Logstash, Kibana) for troubleshooting.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Design%20a%20High%20Availability%20Architecture/","title":"Design a High Availability Architecture","text":"<p>Task: Design a high availability architecture for a database-backed web application.</p> <p>Approach:</p> <ol> <li>Load Balancing:<ul> <li>Use a load balancer (e.g., AWS ELB, Google Cloud Load Balancer) to distribute incoming traffic across multiple application servers.</li> </ul> </li> <li>Application Layer:<ul> <li>Deploy multiple instances of the application across different availability zones.</li> <li>Use auto-scaling groups to automatically adjust the number of instances based on traffic.</li> </ul> </li> <li>Database Layer:<ul> <li>Use a managed database service like AWS RDS or Google Cloud SQL.</li> <li>Enable multi-AZ deployment for the database to ensure high availability.</li> </ul> </li> <li>Data Replication:<ul> <li>Set up read replicas to distribute read traffic and ensure data redundancy.</li> <li>Implement automated backups and snapshots for disaster recovery.</li> </ul> </li> <li>Caching Layer:<ul> <li>Implement a caching layer using Redis or Memcached to reduce database load and improve performance.</li> </ul> </li> <li>Monitoring and Alerts:<ul> <li>Use monitoring tools like Prometheus, Grafana, and CloudWatch.</li> <li>Set up alerts for key metrics (e.g., CPU usage, memory usage, response time).</li> </ul> </li> <li>Disaster Recovery:<ul> <li>Plan for disaster recovery by setting up cross-region replication and backup.</li> <li>Regularly test failover procedures to ensure readiness.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Design%20a%20Kubernetes-based%20Microservices%20Architecture/","title":"Design a Kubernetes-based Microservices Architecture","text":"<p>Task: Design a Kubernetes-based architecture for a microservices application.</p> <p>Approach:</p> <ol> <li>Cluster Setup:<ul> <li>Use a managed Kubernetes service like AWS EKS, Google GKE, or Azure AKS.</li> <li>Set up a multi-node cluster with nodes spread across multiple availability zones for high availability.</li> </ul> </li> <li>Namespace Management:<ul> <li>Organize microservices into namespaces for better resource management and isolation.</li> <li>Use separate namespaces for development, staging, and production environments.</li> </ul> </li> <li>Service Discovery:<ul> <li>Use Kubernetes Services and DNS for service discovery.</li> <li>Implement Ingress controllers for external access to services.</li> </ul> </li> <li>Configuration Management:<ul> <li>Use ConfigMaps and Secrets for managing configuration data and sensitive information.</li> <li>Use Helm charts or Kustomize for templating and managing Kubernetes manifests.</li> </ul> </li> <li>CI/CD Pipeline:<ul> <li>Set up a CI/CD pipeline to automate the build, test, and deployment processes.</li> <li>Use tools like Jenkins, GitLab CI, or Argo CD for continuous deployment to Kubernetes.</li> </ul> </li> <li>Scaling and Resilience:<ul> <li>Implement Horizontal Pod Autoscaling (HPA) to scale microservices based on CPU or memory usage.</li> <li>Use Pod Disruption Budgets (PDB) and node affinity rules to ensure resilience.</li> </ul> </li> <li>Monitoring and Logging:<ul> <li>Implement monitoring using Prometheus and Grafana.</li> <li>Use Fluentd or Fluent Bit to collect and forward logs to a centralized logging system.</li> </ul> </li> <li>Security and Compliance:<ul> <li>Implement Role-Based Access Control (RBAC) for fine-grained access control.</li> <li>Use Network Policies to control communication between microservices.</li> <li>Scan container images for vulnerabilities and enforce security best practices.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Design%20a%20Logging%20and%20Monitoring%20System/","title":"Design a Logging and Monitoring System","text":"<p>Task: Design a comprehensive logging and monitoring system for a distributed application.</p> <p>Approach:</p> <ol> <li>Log Aggregation:<ul> <li>Use a centralized log aggregation tool like the ELK stack (Elasticsearch, Logstash, Kibana) or Graylog.</li> <li>Set up Fluentd or Logstash agents on application servers to forward logs to the central system.</li> </ul> </li> <li>Structured Logging:<ul> <li>Implement structured logging in applications to include context and metadata (e.g., request IDs, user IDs).</li> <li>Use JSON format for logs to facilitate parsing and querying.</li> </ul> </li> <li>Metrics Collection:<ul> <li>Use Prometheus to collect and store metrics from application servers and infrastructure.</li> <li>Define custom metrics for critical application and business processes.</li> </ul> </li> <li>Visualization:<ul> <li>Set up Grafana dashboards to visualize metrics and logs.</li> <li>Create dashboards for real-time monitoring and historical analysis.</li> </ul> </li> <li>Alerting:<ul> <li>Configure alerts based on key metrics and log patterns using Prometheus Alertmanager or Grafana Alerts.</li> <li>Set up alert channels (e.g., email, Slack, PagerDuty) for timely notifications.</li> </ul> </li> <li>Tracing:<ul> <li>Implement distributed tracing using tools like Jaeger or Zipkin to trace requests across microservices.</li> <li>Use tracing to identify performance bottlenecks and dependencies.</li> </ul> </li> <li>Retention and Compliance:<ul> <li>Define log retention policies based on business and compliance requirements.</li> <li>Implement data retention and archiving strategies to manage storage costs.</li> </ul> </li> </ol> <p>These scenarios cover a wide range of challenges that you might face as a DevOps Manager. Be prepared to explain your solutions in detail, justify your choices, and discuss any potential trade-offs.</p>"},{"location":"DevOps/scenarios/Design%20a%20Multi-Region%20Deployment/","title":"Design a Multi-Region Deployment","text":"<p>Task: Design a multi-region deployment for a web application to ensure high availability and disaster recovery.</p> <p>Approach:</p> <ol> <li>Global Load Balancing:<ul> <li>Use a global load balancer (e.g., AWS Route 53, Google Cloud Load Balancer) to route traffic based on the geographical location of the user.</li> <li>Set up health checks to route traffic away from unhealthy regions.</li> </ul> </li> <li>Application Layer:<ul> <li>Deploy application instances in multiple regions.</li> <li>Use auto-scaling groups to manage the number of instances based on traffic.</li> </ul> </li> <li>Database Layer:<ul> <li>Use a managed database service with cross-region replication (e.g., AWS RDS with read replicas in different regions).</li> <li>Ensure the primary database is in one region and read replicas in other regions.</li> </ul> </li> <li>Data Synchronization:<ul> <li>Implement data synchronization mechanisms to keep data consistent across regions.</li> <li>Use tools like AWS DataSync or Google Cloud Storage Transfer Service for file synchronization.</li> </ul> </li> <li>Failover Strategy:<ul> <li>Design a failover strategy where traffic is automatically redirected to another region in case of a region failure.</li> <li>Use automated scripts or tools like AWS Lambda to trigger failover.</li> </ul> </li> <li>Monitoring and Alerts:<ul> <li>Implement monitoring using CloudWatch, Prometheus, or Grafana.</li> <li>Set up alerts for latency, errors, and region failures.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Design%20a%20Scalable%20Logging%20Infrastructure/","title":"Design a Scalable Logging Infrastructure","text":"<p>Task: Design a scalable logging infrastructure for a microservices architecture.</p> <p>Approach:</p> <ol> <li>Log Aggregation:<ul> <li>Use a centralized log aggregation system like the ELK stack (Elasticsearch, Logstash, Kibana) or Fluentd + Elasticsearch.</li> <li>Configure microservices to send logs to the log aggregation system using Fluentd or Logstash.</li> </ul> </li> <li>Log Storage:<ul> <li>Store logs in a scalable and highly available storage system like Elasticsearch or a cloud-based log storage service (e.g., AWS CloudWatch Logs, Google Cloud Logging).</li> </ul> </li> <li>Structured Logging:<ul> <li>Implement structured logging in JSON format to make logs easily searchable and parsable.</li> <li>Include relevant metadata (e.g., request IDs, user IDs, timestamps) in log entries.</li> </ul> </li> <li>Log Processing:<ul> <li>Use Logstash or Fluentd to process and enrich logs before storing them.</li> <li>Implement filters and parsers to extract meaningful information from logs.</li> </ul> </li> <li>Visualization:<ul> <li>Set up Kibana or Grafana dashboards to visualize log data.</li> <li>Create custom dashboards for different microservices and use cases.</li> </ul> </li> <li>Alerting:<ul> <li>Configure alerts based on log patterns and thresholds using tools like ElastAlert or Grafana Alerts.</li> <li>Set up alerting channels (e.g., Slack, email, PagerDuty) for timely notifications.</li> </ul> </li> <li>Retention and Archiving:<ul> <li>Define log retention policies to manage storage costs and comply with regulatory requirements.</li> <li>Archive older logs to cost-effective storage solutions like AWS S3 or Google Cloud Storage.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Implement%20Blue-Green%20Deployment%20Strategy/","title":"Implement Blue-Green Deployment Strategy","text":"<p>Task: Design a blue-green deployment strategy for a web application hosted on AWS.</p> <p>Approach:</p> <ol> <li> <p>Environment Setup:</p> <ul> <li> <p>Create two identical environments (Blue and Green).</p> </li> <li> <p>Use AWS Elastic Beanstalk or ECS for environment management.</p> </li> <li>CI/CD Pipeline:</li> <li>Set up a CI/CD pipeline using Jenkins or AWS CodePipeline.</li> <li>Ensure the pipeline builds, tests, and deploys to the Blue environment first.</li> <li>Traffic Management:</li> <li>Use AWS Route 53 for DNS routing.</li> <li>Initially route all traffic to the Blue environment.</li> <li>Deployment Process:</li> <li>Deploy the new version of the application to the Green environment.</li> <li>Perform thorough testing in the Green environment to ensure it\u2019s functioning as expected.</li> <li>Switch Traffic:</li> <li>If tests pass, switch the traffic from Blue to Green using Route 53.</li> <li>Monitor the Green environment for any issues.</li> <li>Rollback Strategy:</li> <li>Keep the Blue environment running until you\u2019re confident the Green environment is stable.</li> <li>In case of any issues, quickly switch back the traffic to the Blue environment.</li> <li>Automation and Monitoring:</li> <li>Automate the switching process using scripts or AWS Lambda functions.</li> <li>Implement monitoring with CloudWatch and set up alerts for anomalies.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Implement%20Infrastructure%20as%20Code%20%28IaC%29/","title":"Implement Infrastructure as Code (IaC)","text":"<p>Task: Design an infrastructure as code setup to manage a multi-cloud environment.</p> <p>Approach:</p> <ol> <li>Tool Selection:<ul> <li>Use Terraform as the IaC tool for managing resources across AWS, GCP, and Azure.</li> </ul> </li> <li>State Management:<ul> <li>Use a centralized backend (e.g., AWS S3, Terraform Cloud) to store the Terraform state file securely.</li> <li>Enable state locking to prevent concurrent modifications.</li> </ul> </li> <li>Modular Design:<ul> <li>Organize Terraform configurations into reusable modules (e.g., VPC, security groups, EC2 instances).</li> <li>Use version control to manage module versions.</li> </ul> </li> <li>Environment Separation:<ul> <li>Separate configurations for different environments (e.g., dev, staging, production) using workspaces or directories.</li> <li>Implement environment-specific variables and secrets management.</li> </ul> </li> <li>Provisioning:<ul> <li>Write Terraform configurations to provision resources across AWS, GCP, and Azure.</li> <li>Ensure configurations are idempotent and can handle incremental changes.</li> </ul> </li> <li>CI/CD Integration:<ul> <li>Integrate Terraform with CI/CD pipelines to automate infrastructure provisioning and updates.</li> <li>Use tools like Atlantis for pull request-driven workflows.</li> </ul> </li> <li>Compliance and Security:<ul> <li>Implement security scanning tools like tfsec or Checkov to scan Terraform code for vulnerabilities.</li> <li>Enforce policies using Sentinel or Open Policy Agent (OPA).</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Implement%20Security%20Best%20Practices%20in%20a%20DevOps%20Pipeline/","title":"Implement Security Best Practices in a DevOps Pipeline","text":"<p>Task: Design a DevOps pipeline with integrated security best practices.</p> <p>Approach:</p> <ol> <li>Source Code Management:<ul> <li>Use a version control system like Git with branch protection rules.</li> <li>Implement code reviews and approval processes before merging to the main branch.</li> </ul> </li> <li>Static Analysis:<ul> <li>Integrate static code analysis tools like SonarQube, ESLint, or pylint to scan for vulnerabilities and code quality issues.</li> <li>Ensure these checks run automatically on every pull request.</li> </ul> </li> <li>Dependency Scanning:<ul> <li>Use dependency scanning tools like OWASP Dependency-Check, Snyk, or WhiteSource to identify and address vulnerabilities in third-party libraries.</li> <li>Ensure these scans are part of the CI pipeline.</li> </ul> </li> <li>Container Security:<ul> <li>Scan Docker images for vulnerabilities using tools like Clair, Trivy, or Aqua Security.</li> <li>Use base images from trusted sources and keep them up to date.</li> </ul> </li> <li>Secrets Management:<ul> <li>Use secrets management tools like AWS Secrets Manager, HashiCorp Vault, or Azure Key Vault to manage sensitive information securely.</li> <li>Avoid hardcoding secrets in code or configuration files.</li> </ul> </li> <li>Dynamic Analysis:<ul> <li>Implement dynamic application security testing (DAST) using tools like OWASP ZAP or Burp Suite to identify runtime vulnerabilities.</li> <li>Run these tests in a staging environment before deploying to production.</li> </ul> </li> <li>Continuous Monitoring:<ul> <li>Set up continuous monitoring with tools like Prometheus, Grafana, and ELK stack (Elasticsearch, Logstash, Kibana).</li> <li>Implement alerts for security incidents and anomalies.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Implement%20a%20Zero-Downtime%20Deployment%20Strategy/","title":"Implement a Zero-Downtime Deployment Strategy","text":"<p>Task: Design a zero-downtime deployment strategy for a web application hosted on a cloud platform.</p> <p>Approach:</p> <ol> <li>Blue-Green Deployment:<ul> <li>Create two identical environments (Blue and Green).</li> <li>Use a load balancer to route traffic to the active environment (initially Blue).</li> </ul> </li> <li>CI/CD Pipeline:<ul> <li>Set up CI/CD pipeline using Jenkins, GitHub Actions, or GitLab CI.</li> <li>Ensure the pipeline builds, tests, and deploys to the inactive environment (initially Green).</li> </ul> </li> <li>Testing:<ul> <li>Conduct thorough testing in the Green environment to ensure the new version is stable and functional.</li> <li>Include automated tests and user acceptance testing (UAT).</li> </ul> </li> <li>Traffic Switch:<ul> <li>Once testing is successful, switch the traffic from Blue to Green using the load balancer.</li> <li>Monitor the new environment closely for any issues.</li> </ul> </li> <li>Rollback Strategy:<ul> <li>Keep the previous environment (Blue) running until the new environment (Green) is stable.</li> <li>In case of any issues, quickly switch back the traffic to the Blue environment.</li> </ul> </li> <li>Automation and Monitoring:<ul> <li>Automate the switching process using scripts or tools like AWS Lambda.</li> <li>Implement monitoring using Prometheus and Grafana to ensure smooth transitions.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Implementing%20a%20Disaster%20Recovery%20Plan/","title":"Implementing a Disaster Recovery Plan","text":"<p>Task: Design a disaster recovery plan for a web application hosted on Google Cloud Platform (GCP).</p> <p>Approach:</p> <ol> <li>Identify Critical Components:<ul> <li>Web servers, database servers, and storage.</li> <li>Determine RTO (Recovery Time Objective) and RPO (Recovery Point Objective).</li> </ul> </li> <li>Data Backup:<ul> <li>Use GCP's Cloud Storage for backups.</li> <li>Schedule regular snapshots of persistent disks.</li> <li>Backup databases using Cloud SQL automated backups.</li> </ul> </li> <li>Redundancy and Failover:<ul> <li>Deploy applications across multiple regions.</li> <li>Use Global Load Balancer to distribute traffic.</li> <li>Set up instance groups with auto-scaling.</li> </ul> </li> <li>Automated Recovery:<ul> <li>Use GCP Deployment Manager or Terraform for infrastructure as code.</li> <li>Automate recovery scripts to spin up resources in the backup region.</li> <li>Implement database replication to a secondary region.</li> </ul> </li> <li>Testing and Validation:<ul> <li>Regularly test the disaster recovery plan.</li> <li>Conduct failover drills to ensure processes work as expected.</li> <li>Update the disaster recovery plan based on test outcomes.</li> </ul> </li> <li>Monitoring and Alerts:<ul> <li>Use Stackdriver for monitoring and logging.</li> <li>Set up alerts for resource failures and performance issues.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Migrate%20On-Premises%20Applications%20to%20the%20Cloud/","title":"Migrate On-Premises Applications to the Cloud","text":"<p>Task: Plan the migration of a company's on-premises applications to AWS.</p> <p>Approach:</p> <ol> <li>Assessment and Planning:<ul> <li>Assess the current on-premises environment.</li> <li>Identify applications suitable for cloud migration.</li> <li>Create a migration strategy (Lift and Shift, Re-architect, Re-platform).</li> </ul> </li> <li>Design Cloud Architecture:<ul> <li>Design VPC architecture with subnets, security groups, and IAM roles.</li> <li>Choose appropriate AWS services (EC2, RDS, S3, etc.).</li> <li>Plan for high availability and disaster recovery.</li> </ul> </li> <li>Data Migration:<ul> <li>Use AWS Database Migration Service (DMS) for database migration.</li> <li>Transfer files to S3 using AWS Snowball or AWS Transfer Family.</li> </ul> </li> <li>Application Deployment:<ul> <li>Containerize applications using Docker if applicable.</li> <li>Deploy applications to ECS/EKS or directly to EC2 instances.</li> <li>Implement CI/CD pipelines using AWS CodePipeline and CodeDeploy.</li> </ul> </li> <li>Testing and Validation:<ul> <li>Conduct thorough testing in a staging environment.</li> <li>Validate performance, security, and functionality.</li> </ul> </li> <li>Monitoring and Optimization:<ul> <li>Use CloudWatch for monitoring.</li> <li>Implement cost management tools to optimize cloud spending.</li> </ul> </li> </ol>"},{"location":"DevOps/scenarios/Secure%20a%20CICD%20Pipeline/","title":"Secure a CI/CD Pipeline","text":"<p>Task: Design a CI/CD pipeline with integrated security checks.</p> <p>Approach:</p> <ol> <li>Source Code Management:<ul> <li>Use Git for version control.</li> <li>Implement branch protection rules.</li> </ul> </li> <li>Security Scanning:<ul> <li>Integrate SAST (Static Application Security Testing) tools like SonarQube.</li> <li>Use dependency scanning tools like OWASP Dependency-Check or Snyk.</li> </ul> </li> <li>Build and Test:<ul> <li>Use Jenkins or GitHub Actions for CI/CD.</li> <li>Containerize applications using Docker.</li> <li>Run unit tests, integration tests, and security tests.</li> </ul> </li> <li>Container Security:<ul> <li>Scan Docker images for vulnerabilities using tools like Clair or Trivy.</li> <li>Enforce the use of approved base images.</li> </ul> </li> <li>Deployment Security:<ul> <li>Use Kubernetes RBAC (Role-Based Access Control) to limit permissions.</li> <li>Implement network policies to control traffic flow.</li> </ul> </li> <li>Monitoring and Compliance:<ul> <li>Use Prometheus and Grafana for monitoring.</li> <li>Implement logging and auditing using ELK stack.</li> <li>Ensure compliance with industry standards (e.g., PCI-DSS, HIPAA).</li> </ul> </li> </ol>"},{"location":"SRE/also/","title":"Additional Subjects to Anticipate:","text":"<p>Here are some additional topics you might anticipate for a comprehensive Linux and containerization-focused test:</p> <ol> <li> <p>Systemd and Service Management</p> <ul> <li>Managing services with <code>systemctl</code></li> <li>Understanding unit files</li> <li>Controlling system startup and shutdown processes</li> </ul> </li> <li> <p>SELinux and AppArmor</p> <ul> <li>Basic concepts of SELinux and AppArmor</li> <li>Managing and configuring security policies</li> <li>Troubleshooting security context issues</li> </ul> </li> <li> <p>Networking Tools and Troubleshooting</p> <ul> <li>Commands like <code>ping</code>, <code>traceroute</code>, <code>netstat</code>, <code>ss</code>, and <code>tcpdump</code></li> <li>Diagnosing network issues</li> <li>Configuring network interfaces and routes</li> </ul> </li> <li> <p>Package Management</p> <ul> <li>Using <code>apt</code> on Debian-based systems and <code>yum</code> or <code>dnf</code> on Red Hat-based systems</li> <li>Installing, updating, and removing packages</li> <li>Managing package repositories</li> </ul> </li> <li> <p>File System Management</p> <ul> <li>Creating and managing file systems with <code>mkfs</code>, <code>mount</code>, and <code>umount</code></li> <li>Disk usage analysis with <code>df</code> and <code>du</code></li> <li>LVM (Logical Volume Management) basics</li> </ul> </li> <li> <p>Shell Scripting</p> <ul> <li>Basic and advanced scripting concepts</li> <li>Common scripting tools like <code>awk</code>, <code>sed</code>, and <code>grep</code></li> <li>Automation and task scheduling with <code>cron</code></li> </ul> </li> <li> <p>Log Management</p> <ul> <li>Understanding system logs in <code>/var/log</code></li> <li>Using <code>journalctl</code> for querying systemd logs</li> <li>Configuring and managing logrotate</li> </ul> </li> <li> <p>Virtualization</p> <ul> <li>Basic concepts of virtualization (KVM, QEMU)</li> <li>Managing virtual machines with <code>virsh</code> and <code>virt-manager</code></li> <li>Containerization vs. virtualization</li> </ul> </li> <li> <p>SSH and Remote Access</p> <ul> <li>Configuring and securing SSH</li> <li>Using key-based authentication</li> <li>Port forwarding and SSH tunnels</li> </ul> </li> <li> <p>High Availability and Load Balancing</p> <ul> <li>Basic concepts of high availability (HA)</li> <li>Configuring load balancers (HAProxy, Nginx)</li> <li>Cluster management and failover strategies</li> </ul> </li> <li> <p>Cloud Computing and Infrastructure as Code</p> <ul> <li>Understanding of cloud platforms (AWS, Azure, Google Cloud)</li> <li>Basics of Infrastructure as Code (Terraform, Ansible)</li> <li>Managing cloud resources and services</li> </ul> </li> <li> <p>Monitoring and Performance Tuning</p> <ul> <li>Using monitoring tools like <code>top</code>, <code>htop</code>, <code>vmstat</code>, <code>iostat</code></li> <li>Basic performance tuning strategies</li> <li>Introduction to monitoring solutions like Prometheus and Grafana</li> </ul> </li> </ol>"},{"location":"SRE/also/#coding-challenges","title":"Coding Challenges:","text":"<ol> <li> <p>Bash Scripting Challenge:</p> <ul> <li>Writing a script to automate a common task (e.g., backup, user management, log analysis)</li> <li>Parsing and processing text files</li> <li>Handling command-line arguments and options</li> </ul> </li> <li> <p>Programming Challenge:</p> <ul> <li>Choose a language you are comfortable with (e.g., Python, Go, C)</li> <li>Solve a problem related to system administration or automation</li> <li>Implement a small tool or utility (e.g., a simple HTTP server, a file parser)</li> </ul> </li> </ol> <p>By preparing for these additional subjects and honing your problem-solving skills in scripting and programming, you'll be well-equipped to tackle a comprehensive test on Linux systems and containerization.</p>"},{"location":"SRE/questions/","title":"Questions","text":""},{"location":"SRE/questions/#virtual-machines-and-containers","title":"Virtual Machines and Containers","text":"<ol> <li> <p>Difference between VM and Container</p> <ul> <li> <p>Virtual Machines (VMs VMs run on physical hardware via a hypervisor. Each VM includes a full copy of an operating system, the application, necessary binaries, and libraries - taking up tens of GBs. VMs can run multiple operating system instances above the virtual hardware layer. They are isolated from the host system and each other, providing complete process and file system isolation.</p> </li> <li> <p>Containers Containers share the host system\u2019s kernel but operate in isolated user spaces. They contain only the application and its dependencies. They do not bundle a full OS but include libraries, binaries, etc., required to run the desired software. Containers are more lightweight and use fewer resources than VMs because they leverage the host system\u2019s kernel.</p> </li> </ul> </li> <li> <p>What are the security implications of using containers versus VMs?</p> <ul> <li>Containers share the host's kernel, making them less isolated than VMs, which can run different operating systems. This makes VMs more secure for applications needing strong isolation.</li> </ul> </li> <li> <p>How does container orchestration differ from traditional application deployment?</p> <ul> <li>Container orchestration tools like Kubernetes automate the deployment, scaling, and management of containerized applications, offering advantages in microservice architectures compared to traditional deployment which often involves manual scaling and management</li> </ul> </li> </ol>"},{"location":"SRE/questions/#docker-and-containerization","title":"Docker and Containerization","text":"<ol> <li> <p>How are layers created in Docker images?</p> <ul> <li> <p>In Docker, every image begins from a base image, and layers are added on top. Each layer represents an instruction in the image\u2019s Dockerfile. For example:</p> <ul> <li><code>FROM ubuntu:18.04</code> \u2014 the base layer</li> <li><code>RUN apt-get update &amp;&amp; apt-get install -y git</code> \u2014 creates a new layer</li> <li><code>COPY . /app</code> \u2014 adds the contents of the current directory as a new layer</li> <li><code>RUN make /app</code> \u2014 builds the application</li> </ul> </li> <li> <p>Each layer is only stored once and is reused across images, which saves space on disk and speeds up processing time. Layers are cached and are read-only.</p> </li> </ul> </li> <li> <p>What is Docker Swarm and how does it compare to Kubernetes?</p> <ul> <li>Docker Swarm is Docker's native clustering and scheduling tool, which is simpler and integrated directly into the Docker ecosystem. Kubernetes is more complex but provides a more powerful and flexible feature set for managing containers at scale.</li> </ul> </li> <li> <p>How can you optimize Docker images to reduce their size and build time?</p> <ul> <li>To optimize Docker images, use smaller base images, minimize layer count by combining commands, remove unnecessary files, and use multi-stage builds to reduce final image size.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#kubernetes","title":"Kubernetes","text":"<ol> <li> <p>Describe Kubernetes Components</p> <ul> <li>API Server (kube-apiserver): Acts as the front-end to the control plane. It exposes the Kubernetes API and is the only component that communicates with the cluster\u2019s etcd storage.</li> <li>Scheduler (kube-scheduler): Responsible for distributing work or containers across multiple nodes. It looks for newly created pods that have no node assigned and selects a node for them to run on.</li> <li>Controller Manager (kube-controller-manager): Runs controller processes. These background threads handle routine tasks in the cluster. For example, the Replication Controller ensures that the number of replicas for each pod matches the user-defined number.</li> <li>etcd: Consistent and highly-available key value store used as Kubernetes\u2019 backing store for all cluster data.</li> <li>Kubelet: An agent running on each node in the cluster. It makes sure containers are running in a Pod.</li> <li>Kube-proxy: Manages network communication between Pods and external network.</li> </ul> </li> <li> <p>Process of Creating a New Pod in Kubernetes</p> <ol> <li>API Request: A request is sent to the API Server to create a new Pod. This request includes the Pod specification.</li> <li>Scheduling: The API Server stores the Pod specification in etcd. The Scheduler watches for new Pods with no assigned node, selects a suitable node, and updates the Pod's information in etcd.</li> <li>Starting the Pod: Kubelet on the chosen node watches etcd for Pods that are scheduled to it. When it finds a new Pod, it instructs the container runtime (e.g., Docker) to pull the required image and start the container.</li> <li>Proxying and Load Balancing: Kube-proxy configures the node's network so that the Pod can communicate with other Pods across the network.</li> </ol> </li> <li> <p>Explain the role and functionality of Custom Resource Definitions (CRDs) in Kubernetes.</p> <ul> <li>CRDs allow you to define new, custom resources in Kubernetes that act like native Kubernetes objects, extending its functionality</li> </ul> </li> <li> <p>How does Kubernetes handle service discovery and load balancing?</p> <ul> <li>Kubernetes uses services to abstract the access to pods, providing a stable IP address and DNS name. Load balancing is handled at the service level, distributing network traffic to available pods.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#networking","title":"Networking","text":"<ol> <li> <p>What are the key differences between TCP and UDP protocols?</p> <ul> <li>TCP is connection-oriented, provides reliable delivery, and maintains order of messages. UDP is connectionless, faster, and used where speed is preferable to reliability, such as streaming.</li> </ul> </li> <li> <p>Explain the concept of network segmentation and its benefits.</p> <ul> <li>It divides a network into smaller parts to improve performance and security. Segmentation helps contain network problems and minimize the impact of breaches.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#url-and-web-technologies","title":"URL and Web Technologies","text":"<ol> <li> <p>URL Structure: A URL typically consists of the following:</p> <ul> <li>Protocol (e.g., HTTP, HTTPS)</li> <li>Hostname or IP Address</li> <li>Port (optional)</li> <li>Path to a specific resource</li> <li>Query string (optional)</li> <li>Fragment (optional)</li> </ul> </li> <li> <p>How do HTTP cookies work and what are their security implications?</p> <ul> <li>Cookies are data files stored on the client's computer by web browsers to remember stateful information (e.g., items added in the shopping cart) or the user's browsing activity. Security implications include privacy concerns and potential misuse for tracking.</li> </ul> </li> <li> <p>What is the difference between HTTP/1.1 and HTTP/2?</p> <ul> <li>HTTP/2 is more efficient, allowing multiple requests and responses between client and server over a single connection simultaneously, improving web page load times compared to HTTP/1.1's one request per connection limit.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#osi-model-deep-dive","title":"OSI Model Deep Dive","text":"<ol> <li> <p>OSI Model: The Open Systems Interconnection (OSI) model is a conceptual framework used to understand network interactions in seven layers:</p> <ol> <li>Physical</li> <li>Data Link</li> <li>Network</li> <li>Transport</li> <li>Session</li> <li>Presentation</li> <li>Application</li> </ol> </li> <li> <p>How do different layers of the OSI model interact during a web browsing session?</p> <ul> <li>When browsing, data travels from the application layer down to the physical layer on the sender\u2019s side, across the network, and then up from the physical layer to the application layer on the receiver\u2019s side.</li> </ul> </li> <li> <p>What are some common security protocols at the Presentation and Application layers?</p> <ul> <li>Common protocols include TLS/SSL for secure communications over the internet, and MIME for formatting messages the application layer sends and receives.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#tcpip-protocols","title":"TCP/IP Protocols","text":"<ol> <li> <p>TCP Three-Way Handshake and Four-Way Termination</p> <ul> <li> <p>Three-Way Handshake:</p> <ol> <li>Client sends SYN (synchronize) to server.</li> <li>Server responds with SYN-ACK (synchronize-acknowledge).</li> <li>Client sends ACK (acknowledge).</li> </ol> </li> <li> <p>Four-Way Termination:</p> <ol> <li>Client sends a FIN (finish) signal.</li> <li>Server acknowledges with ACK.</li> <li>Server sends a FIN.</li> <li>Client sends ACK to acknowledge.</li> </ol> </li> </ul> </li> <li> <p>What is the purpose of the ARP protocol and how does it work?</p> <ul> <li>The Address Resolution Protocol (ARP) resolves IP addresses to MAC addresses, allowing devices to communicate within a local network segment.</li> </ul> </li> <li> <p>Describe how SSL/TLS provides security over the transport layer.</p> <ul> <li>SSL/TLS encrypts data at the transport layer, providing secure transmission of information across potentially insecure networks like the internet.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#performance-metrics","title":"Performance Metrics","text":"<ol> <li> <p>What are Latency and Throughput?</p> <ul> <li>Latency: The time it takes for a packet to travel from source to destination. It impacts how quickly a system can respond to input.</li> <li>Throughput: The amount of data that can be processed by a system in a given amount of time. It affects the amount of work a system can handle.</li> </ul> </li> <li> <p>How can you measure and improve the latency of a web service?</p> <ul> <li>Latency can be measured using tools like Ping or Traceroute. Improvements can be made by optimizing server response times, increasing bandwidth, and using content delivery networks (CDNs).</li> </ul> </li> <li> <p>What are some tools and techniques for performance benchmarking in a cloud environment?</p> <ul> <li>Tools such as Apache JMeter, LoadRunner, or cloud-specific tools like AWS CloudWatch can be used to simulate user requests and measure performance metrics.</li> </ul> </li> </ol>"},{"location":"SRE/questions/#site-reliability-engineering","title":"Site Reliability Engineering","text":"<ol> <li> <p>What is SRE?</p> <ul> <li>Site Reliability Engineering (SRE) is a discipline that incorporates aspects of software engineering and applies them to infrastructure and operations problems. The goal is to create scalable and highly reliable software systems. SRE role involves tasks such as automation, monitoring, and designing highly reliable systems.</li> </ul> </li> <li> <p>How does SRE differ from traditional IT operations?</p> <ul> <li>SRE focuses on automating operations tasks and maintaining system reliability through software engineering, whereas traditional IT operations may focus more on manual setup, monitoring, and intervention.</li> </ul> </li> <li> <p>What are the key metrics that SREs typically monitor, and why?</p> <ul> <li>SREs monitor metrics like service uptime, error rates, traffic, latency, and saturation to ensure that the system meets its defined service level objectives (SLOs) and to predict and prevent future problems.</li> </ul> </li> </ol> <p>These questions can help deepen understanding of various aspects of IT infrastructure, networking, and system reliability, making them suitable for educational, interview, or professional discussion settings.</p>"},{"location":"System%20Design/HTTP/","title":"Path of a HTTP request","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant DNS\n    participant Server\n\n    Client-&gt;&gt;DNS: DNS Resolution (Domain to IP)\n    DNS--&gt;&gt;Client: IP Address\n    Client-&gt;&gt;Server: Establish Connection (TCP/TLS Handshake)\n    Client-&gt;&gt;Server: Send HTTP Request\n    Server-&gt;&gt;Server: Route Request\n    Server-&gt;&gt;Server: Authenticate &amp; Authorise\n    Server-&gt;&gt;Server: Execute Business Logic\n    Server-&gt;&gt;Database: Query Database (if needed)\n    Database--&gt;&gt;Server: Data Response\n    Server-&gt;&gt;Server: Generate HTTP Response\n    Server-&gt;&gt;Client: Send HTTP Response\n    Client-&gt;&gt;Client: Process Response\n    Server-&gt;&gt;Client: Close Connection (if applicable)\n</code></pre> <p>The path of an HTTP request involves several steps, each of which plays a crucial role in ensuring that a request is processed correctly and the appropriate response is returned. Here is a detailed explanation of the path of an HTTP request:</p>"},{"location":"System%20Design/HTTP/#1-client-initiation","title":"1. Client Initiation","text":"<p>The process begins with a client, typically a web browser, mobile app, or any HTTP client, initiating an HTTP request. This request is usually triggered by user actions such as clicking a link, submitting a form, or programmatically through an API call.</p>"},{"location":"System%20Design/HTTP/#2-dns-resolution","title":"2. DNS Resolution","text":"<p>Before the request reaches the server, the client's device must resolve the domain name (e.g., www.example.com) to an IP address. This is done through a DNS (Domain Name System) lookup. The DNS resolver queries a DNS server to obtain the IP address associated with the domain.</p>"},{"location":"System%20Design/HTTP/#3-establishing-a-connection","title":"3. Establishing a Connection","text":"<p>With the IP address resolved, the client establishes a connection to the server. For secure connections, this involves a TLS handshake to establish an encrypted connection. For non-secure connections, a simple TCP connection is established.</p>"},{"location":"System%20Design/HTTP/#4-sending-the-request","title":"4. Sending the Request","text":"<p>Once the connection is established, the client sends an HTTP request to the server. This request consists of:</p> <ul> <li>Request Line: Includes the HTTP method (GET, POST, PUT, DELETE, etc.), the URL, and the HTTP version.</li> <li>Headers: Key-value pairs providing additional information about the request (e.g., <code>User-Agent</code>, <code>Accept</code>, <code>Content-Type</code>).</li> <li>Body: Optional data sent with the request, typically used with methods like POST and PUT.</li> </ul>"},{"location":"System%20Design/HTTP/#5-server-processing","title":"5. Server Processing","text":"<p>The server receives the request and processes it. This involves several steps:</p> <ul> <li>Routing: The server determines which handler or controller should process the request based on the URL and HTTP method.</li> <li>Authentication &amp; Authorisation: The server checks if the request is authenticated (is the user who they claim to be?) and authorised (does the user have permission to perform this action?).</li> <li>Logic Execution: The server executes the necessary business logic, which may involve querying a database, processing data, or calling other services.</li> <li>Generating a Response: The server constructs a response, which includes a status code (e.g., 200 OK, 404 Not Found), headers, and a body (typically HTML, JSON, or XML).</li> </ul>"},{"location":"System%20Design/HTTP/#6-sending-the-response","title":"6. Sending the Response","text":"<p>The server sends the HTTP response back to the client over the established connection. This response includes the status code, headers, and any body content.</p>"},{"location":"System%20Design/HTTP/#7-client-handling","title":"7. Client Handling","text":"<p>Upon receiving the response, the client processes it:</p> <ul> <li>Parsing the Response: The client reads the status code to determine if the request was successful or if there were errors.</li> <li>Rendering or Processing Data: If the response body contains HTML, the browser renders it. If it contains data (e.g., JSON), the client may process it accordingly (e.g., updating the UI or storing data).</li> </ul>"},{"location":"System%20Design/HTTP/#8-connection-closure","title":"8. Connection Closure","text":"<p>After the response is received and processed, the connection may be closed. For HTTP/1.1, persistent connections allow multiple requests/responses over a single connection, which can be kept open for a period. For HTTP/2, multiplexing allows multiple requests/responses simultaneously over a single connection.</p>"},{"location":"System%20Design/HTTP/#summary","title":"Summary","text":"<p>To summarise, the path of an HTTP request involves the following key steps: client initiation, DNS resolution, establishing a connection, sending the request, server processing, sending the response, client handling, and connection closure. Each step is crucial for the accurate and efficient exchange of information between the client and the server.</p>"},{"location":"System%20Design/HTTPS/","title":"Path of a HTTPS request","text":"<pre><code>\nsequenceDiagram\n    participant Client\n    participant DNS Server\n    participant Server\n\n    Client-&gt;&gt;DNS Server: DNS Request (www.example.com)\n    DNS Server--&gt;&gt;Client: DNS Response (IP Address)\n\n    Client-&gt;&gt;Server: SYN\n    Server--&gt;&gt;Client: SYN-ACK\n    Client-&gt;&gt;Server: ACK\n\n    Client-&gt;&gt;Server: Client Hello\n    Server--&gt;&gt;Client: Server Hello\n    Server--&gt;&gt;Client: Server Certificate\n    opt Optional Step\n        Server--&gt;&gt;Client: Server Key Exchange\n    end\n    Server--&gt;&gt;Client: Server Hello Done\n    Client-&gt;&gt;Server: Client Key Exchange\n    Client-&gt;&gt;Server: Change Cipher Spec\n    Server--&gt;&gt;Client: Change Cipher Spec\n    Client-&gt;&gt;Server: Finished\n    Server--&gt;&gt;Client: Finished\n\n    Client-&gt;&gt;Server: Encrypted HTTP Request\n    Server--&gt;&gt;Client: Encrypted HTTP Response\n\n    Client-&gt;&gt;Server: FIN\n    Server--&gt;&gt;Client: ACK\n    Server-&gt;&gt;Client: FIN\n    Client--&gt;&gt;Server: ACK</code></pre> <p>The path of an HTTPS request involves several steps to ensure secure communication between a client (e.g., a web browser) and a server. Here is a detailed explanation of the process:</p>"},{"location":"System%20Design/HTTPS/#1-dns-resolution","title":"1. DNS Resolution","text":"<ul> <li>Client Request: The client wants to access a website, so it sends a DNS (Domain Name System) request to resolve the domain name (e.g., www.example.com) to an IP address.</li> <li>DNS Response: The DNS server responds with the IP address of the server hosting the website.</li> </ul>"},{"location":"System%20Design/HTTPS/#2-tcp-connection-establishment","title":"2. TCP Connection Establishment","text":"<ul> <li>Client Request: The client initiates a TCP (Transmission Control Protocol) connection with the server using the IP address obtained from the DNS resolution.</li> <li>Three-Way Handshake: This involves three steps:</li> <li>SYN: The client sends a SYN (synchronise) packet to the server to initiate a connection.</li> <li>SYN-ACK: The server responds with a SYN-ACK (synchronise-acknowledge) packet.</li> <li>ACK: The client sends an ACK (acknowledge) packet, completing the handshake and establishing a TCP connection.</li> </ul>"},{"location":"System%20Design/HTTPS/#3-tls-handshake","title":"3. TLS Handshake","text":"<ul> <li>Client Hello: The client sends a \"Client Hello\" message, including the SSL/TLS version, cipher suites, and a random number.</li> <li>Server Hello: The server responds with a \"Server Hello\" message, selecting the SSL/TLS version, cipher suite, and providing a random number.</li> <li>Server Certificate: The server sends its digital certificate, which contains the server's public key and is signed by a trusted Certificate Authority (CA).</li> <li>Server Key Exchange (optional): If required, the server sends a key exchange message.</li> <li>Server Hello Done: The server signals the end of the server hello messages.</li> <li>Client Key Exchange: The client sends a \"Client Key Exchange\" message, which may include a pre-master secret encrypted with the server's public key.</li> <li>Change Cipher Spec: Both client and server send a \"Change Cipher Spec\" message, indicating that subsequent messages will be encrypted.</li> <li>Finished: Both client and server send a \"Finished\" message to verify that the handshake was successful.</li> </ul>"},{"location":"System%20Design/HTTPS/#4-secure-communication","title":"4. Secure Communication","text":"<ul> <li>HTTP Request: The client sends an encrypted HTTP request over the established TLS connection.</li> <li>Server Response: The server decrypts the request, processes it, and sends back an encrypted HTTP response.</li> </ul>"},{"location":"System%20Design/HTTPS/#5-termination","title":"5. Termination","text":"<ul> <li>Client Initiated: The client can initiate termination by sending a FIN (finish) packet.</li> <li>Server Response: The server responds with an ACK (acknowledge) and then sends its own FIN packet.</li> <li>Client Final ACK: The client sends a final ACK packet, completing the termination of the connection.</li> </ul> <p>Throughout this process, the data exchanged between the client and server is encrypted, ensuring confidentiality, integrity, and authenticity of the communication.</p>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/","title":"Aggregate Error Count in Log Messages","text":""},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#problem-statement","title":"Problem Statement","text":"<p>You are given a log file where each line contains a timestamp, a severity level (INFO, WARNING, ERROR), and a message. Your task is to write a Bash script to parse the log file and count the number of <code>ERROR</code> messages, aggregating them based on the error message content.</p>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#log-file-format","title":"Log File Format","text":"<p>Each log entry is in the format: <pre><code>[timestamp] [severity] message\n</code></pre> - <code>timestamp</code> is a string representing the time of the event. - <code>severity</code> is one of <code>INFO</code>, <code>WARNING</code>, or <code>ERROR</code>. - <code>message</code> is a string representing the event message.</p>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#example-log-file","title":"Example Log File","text":"<pre><code>[2023-05-20 12:00:00] INFO User logged in\n[2023-05-20 12:01:00] WARNING Disk space low\n[2023-05-20 12:02:00] ERROR Unable to connect to database\n[2023-05-20 12:02:10] ERROR Unable to connect to database\n[2023-05-20 12:03:00] INFO User logged out\n[2023-05-20 12:04:00] ERROR Failed to load resource\n[2023-05-20 12:04:05] ERROR Unable to connect to database\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#output","title":"Output","text":"<p>The script should output the aggregated count of each unique error message: <pre><code>Unable to connect to database: 3\nFailed to load resource: 1\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#bash-script-solution","title":"Bash Script Solution","text":"<p>To solve this problem using a Bash script, you can use tools like <code>grep</code>, <code>awk</code>, and <code>sort</code> to filter, extract, and aggregate error counts based on the message content.</p>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#steps","title":"Steps","text":"<ol> <li>Use <code>grep</code> to filter only <code>ERROR</code> level messages.</li> <li>Use <code>awk</code> to extract the message content following the <code>ERROR</code> label.</li> <li>Use <code>sort</code> and <code>uniq</code> to aggregate and count occurrences of each unique message.</li> </ol>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#bash-script-code","title":"Bash Script Code","text":"<pre><code>#!/bin/bash\n\n# Define the log file\nlogfile=\"logfile.txt\"\n\n# Filter, extract, and count error messages\ngrep \"ERROR\" \"$logfile\" | cut -d ' ' -f 4- | sort | uniq -c | while read count message; do\n    echo \"$message: $count\"\ndone\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#explanation","title":"Explanation","text":"<ol> <li>Filtering Errors: <code>grep \"ERROR\" \"$logfile\"</code> extracts only the lines that contain the word \"ERROR\".</li> <li>Extracting Messages: <code>cut -d ' ' -f 4-</code> uses <code>cut</code> to split each line on spaces and extracts everything from the fourth field onward, which corresponds to the message after the severity level.</li> <li>Sorting and Counting: <code>sort</code> sorts the error messages, and <code>uniq -c</code> counts each unique message.</li> <li>Output Formatting: The <code>while read count message</code> loop reads the output from <code>uniq -c</code>, where <code>count</code> is the number of occurrences and <code>message</code> is the error message, and prints them in the desired format.</li> </ol>"},{"location":"bash/Log%20File%20Analysis/Aggregate%20Error%20Count%20in%20Log%20Messages/#running-the-script","title":"Running the Script","text":"<ol> <li>Save the script to a file, for example, <code>count_errors.sh</code>.</li> <li>Make it executable with <code>chmod +x count_errors.sh</code>.</li> <li>Run the script with <code>./count_errors.sh</code>.</li> </ol> <p>The script will then process the log file and output the count of each unique error message, providing a simple way to aggregate and summarize error occurrences in log files.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/","title":"Log File Analysis and Archive","text":""},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#description","title":"Description:","text":"<p>You are given a directory containing multiple log files. Your task is to write a shell script that processes these log files to extract specific information, generates a summary report, and then archives the log files into a tarball.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#requirements","title":"Requirements:","text":"<ol> <li> <p>Process log files: Each log file contains multiple lines with entries in the following format:     <pre><code>YYYY-MM-DD HH:MM:SS [LEVEL] Message\n</code></pre></p> <ul> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Generate summary report:</p> <ul> <li>Count the number of log entries for each log level (INFO, WARNING, ERROR) across all log files.</li> <li>Identify the date with the highest number of log entries.</li> </ul> </li> <li> <p>Archive log files: After processing, archive all log files into a tarball named <code>processed_logs.tar.gz</code>.</p> </li> </ol>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#input","title":"Input:","text":"<ul> <li>A directory named <code>log_files</code> containing multiple log files.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#output","title":"Output:","text":"<ul> <li>A summary report printed to the console with the following format:   <pre><code>Log Summary Report\n==================\nTotal INFO entries: &lt;number&gt;\nTotal WARNING entries: &lt;number&gt;\nTotal ERROR entries: &lt;number&gt;\n\nDate with highest number of entries: &lt;YYYY-MM-DD&gt; with &lt;number&gt; entries\n</code></pre></li> <li>A tarball named <code>processed_logs.tar.gz</code> containing all the log files from the <code>log_files</code> directory.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#example","title":"Example:","text":"<p>Suppose the <code>log_files</code> directory contains two log files <code>log1.txt</code> and <code>log2.txt</code> with the following content:</p> <p>log1.txt: <pre><code>2024-05-16 12:00:00 [INFO] System started\n2024-05-16 12:01:00 [ERROR] Failed to connect to database\n2024-05-16 12:02:00 [WARNING] Low disk space\n</code></pre></p> <p>log2.txt: <pre><code>2024-05-16 12:03:00 [INFO] User login\n2024-05-17 12:04:00 [WARNING] High memory usage\n2024-05-17 12:05:00 [ERROR] Service crashed\n</code></pre></p> <p>The summary report should be: <pre><code>Log Summary Report\n==================\nTotal INFO entries: 2\nTotal WARNING entries: 2\nTotal ERROR entries: 2\n\nDate with highest number of entries: 2024-05-16 with 3 entries\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the log files always contain valid entries in the specified format.</li> <li>Your script should handle an arbitrary number of log files in the <code>log_files</code> directory.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>analyze_and_archive_logs.sh</code>.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Initialize counters\ntotal_info=0\ntotal_warning=0\ntotal_error=0\n\ndeclare -A date_entries\n\n# Process each log file\nfor log_file in log_files/*; do\n  while IFS= read -r line; do\n    level=$(echo \"$line\" | awk '{print $3}' | tr -d '[]')\n    date=$(echo \"$line\" | awk '{print $1}')\n\n    # Count log levels\n    case $level in\n      INFO)\n        ((total_info++))\n        ;;\n      WARNING)\n        ((total_warning++))\n        ;;\n      ERROR)\n        ((total_error++))\n        ;;\n    esac\n\n    # Count entries per date\n    if [ -n \"$date\" ]; then\n      ((date_entries[\"$date\"]++))\n    fi\n  done &lt; \"$log_file\"\ndone\n\n# Identify the date with the highest number of log entries\nmax_entries=0\nmax_date=\"\"\nfor date in \"${!date_entries[@]}\"; do\n  if [ ${date_entries[\"$date\"]} -gt $max_entries ]; then\n    max_entries=${date_entries[\"$date\"]}\n    max_date=$date\n  fi\ndone\n\n# Generate summary report\necho \"Log Summary Report\"\necho \"==================\"\necho \"Total INFO entries: $total_info\"\necho \"Total WARNING entries: $total_warning\"\necho \"Total ERROR entries: $total_error\"\necho\necho \"Date with highest number of entries: $max_date with $max_entries entries\"\n\n# Archive log files into a tarball\ntar -czvf processed_logs.tar.gz -C log_files .\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20and%20Archive/#explanation","title":"Explanation:","text":"<ol> <li> <p>Initialise counters and date entries: Variables and an associative array are set up to count log levels and track the number of entries per date.</p> </li> <li> <p>Process each log file: The script iterates through each log file in the <code>log_files</code> directory, reads each line, updates counters, and counts entries per date.</p> </li> <li> <p>Identify date with the highest number of entries: The script determines the date with the most log entries by iterating through the <code>date_entries</code> associative array.</p> </li> <li> <p>Generate summary report: The script prints the total counts and the date with the highest number of log entries.</p> </li> <li> <p>Archive log files: The script archives all log files from the <code>log_files</code> directory into a tarball named <code>processed_logs.tar.gz</code>.</p> </li> </ol> <p>This solution assumes the log files are correctly formatted and the directory is always named <code>log_files</code>. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/","title":"Log File Analysis with Error Distribution","text":""},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#description","title":"Description:","text":"<p>You are given a directory containing multiple log files. Your task is to write a shell script that analyses these log files to calculate the distribution of log entries per hour, specifically focusing on <code>ERROR</code> log entries. The script should generate a summary report showing the number of <code>ERROR</code> entries for each hour of the day.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#requirements","title":"Requirements:","text":"<ol> <li> <p>Process log files: Each log file contains multiple lines with entries in the following format:     <pre><code>YYYY-MM-DD HH:MM:SS [LEVEL] Message\n</code></pre></p> <ul> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Generate error distribution report:</p> <ul> <li>Count the number of <code>ERROR</code> log entries for each hour of the day (00 to 23).</li> <li>Output the distribution in a report format.</li> </ul> </li> </ol>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#input","title":"Input:","text":"<ul> <li>A directory named <code>log_files</code> containing multiple log files.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#output","title":"Output:","text":"<ul> <li>A summary report printed to the console with the following format:   <pre><code>Error Distribution Report\n=========================\nHour 00: &lt;number of errors&gt;\nHour 01: &lt;number of errors&gt;\n...\nHour 23: &lt;number of errors&gt;\n</code></pre></li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#example","title":"Example:","text":"<p>Suppose the <code>log_files</code> directory contains two log files <code>log1.txt</code> and <code>log2.txt</code> with the following content:</p> <p>log1.txt: <pre><code>2024-05-16 12:00:00 [INFO] System started\n2024-05-16 12:01:00 [ERROR] Failed to connect to database\n2024-05-16 13:45:00 [WARNING] Low disk space\n</code></pre></p> <p>log2.txt: <pre><code>2024-05-16 12:03:00 [INFO] User login\n2024-05-16 12:04:00 [ERROR] Service crashed\n2024-05-16 14:15:00 [ERROR] Disk full\n</code></pre></p> <p>The error distribution report should be: <pre><code>Error Distribution Report\n=========================\nHour 00: 0\nHour 01: 0\n...\nHour 12: 2\nHour 13: 0\nHour 14: 1\n...\nHour 23: 0\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the log files always contain valid entries in the specified format.</li> <li>Your script should handle an arbitrary number of log files in the <code>log_files</code> directory.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>error_distribution_report.sh</code>.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Initialize an array to hold the count of errors for each hour\ndeclare -a error_count\nfor i in {0..23}; do\n  error_count[$i]=0\ndone\n\n# Process each log file\nfor log_file in log_files/*; do\n  while IFS= read -r line; do\n    level=$(echo \"$line\" | awk '{print $3}' | tr -d '[]')\n    if [ \"$level\" == \"ERROR\" ]; then\n      hour=$(echo \"$line\" | awk '{print $2}' | cut -d':' -f1)\n      ((error_count[hour]++))\n    fi\n  done &lt; \"$log_file\"\ndone\n\n# Generate error distribution report\necho \"Error Distribution Report\"\necho \"=========================\"\nfor i in {0..23}; do\n  printf \"Hour %02d: %d\\n\" $i ${error_count[$i]}\ndone\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Analysis%20with%20Error%20Distribution/#explanation","title":"Explanation:","text":"<ol> <li> <p>Initialise an array to hold error counts: The script sets up an array <code>error_count</code> with 24 elements (one for each hour) and initialises each element to 0.</p> </li> <li> <p>Process each log file: The script iterates through each log file in the <code>log_files</code> directory, reads each line, checks if the log level is <code>ERROR</code>, extracts the hour from the timestamp, and increments the corresponding element in the <code>error_count</code> array.</p> </li> <li> <p>Generate error distribution report: The script prints the error distribution report, showing the number of <code>ERROR</code> entries for each hour of the day.</p> </li> </ol> <p>This solution assumes the log files are correctly formatted and the directory is always named <code>log_files</code>. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/","title":"Log File Filtering and Compression","text":""},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#description","title":"Description:","text":"<p>You are given a directory containing multiple log files. Your task is to write a shell script that filters the log entries based on a specified log level, outputs these filtered entries to a new file, and then compresses this file into a zip archive.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#requirements","title":"Requirements:","text":"<ol> <li> <p>Filter log entries: Each log file contains multiple lines with entries in the following format:     <pre><code>YYYY-MM-DD HH:MM:SS [LEVEL] Message\n</code></pre></p> <ul> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Generate filtered log file:</p> <ul> <li>Filter log entries based on a specified log level (e.g., <code>ERROR</code>).</li> <li>Output these filtered entries to a new file named <code>filtered_logs.txt</code>.</li> </ul> </li> <li> <p>Compress filtered log file:</p> <ul> <li>Compress <code>filtered_logs.txt</code> into a zip archive named <code>filtered_logs.zip</code>.</li> </ul> </li> </ol>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#input","title":"Input:","text":"<ul> <li>A directory named <code>log_files</code> containing multiple log files.</li> <li>A specified log level to filter (e.g., <code>ERROR</code>).</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#output","title":"Output:","text":"<ul> <li>A file named <code>filtered_logs.txt</code> containing the filtered log entries.</li> <li>A zip archive named <code>filtered_logs.zip</code> containing <code>filtered_logs.txt</code>.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#example","title":"Example:","text":"<p>Suppose the <code>log_files</code> directory contains two log files <code>log1.txt</code> and <code>log2.txt</code> with the following content:</p> <p>log1.txt: <pre><code>2024-05-16 12:00:00 [INFO] System started\n2024-05-16 12:01:00 [ERROR] Failed to connect to database\n2024-05-16 12:02:00 [WARNING] Low disk space\n</code></pre></p> <p>log2.txt: <pre><code>2024-05-16 12:03:00 [INFO] User login\n2024-05-16 12:04:00 [WARNING] High memory usage\n2024-05-16 12:05:00 [ERROR] Service crashed\n</code></pre></p> <p>If the specified log level is <code>ERROR</code>, the content of <code>filtered_logs.txt</code> should be: <pre><code>2024-05-16 12:01:00 [ERROR] Failed to connect to database\n2024-05-16 12:05:00 [ERROR] Service crashed\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the log files always contain valid entries in the specified format.</li> <li>Your script should handle an arbitrary number of log files in the <code>log_files</code> directory.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>filter_and_compress_logs.sh</code>.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Check if the log level is specified\nif [ -z \"$1\" ]; then\n  echo \"Usage: $0 &lt;LOG_LEVEL&gt;\"\n  exit 1\nfi\n\nLOG_LEVEL=$1\n\n# Initialize the output file\noutput_file=\"filtered_logs.txt\"\n&gt; $output_file\n\n# Process each log file\nfor log_file in log_files/*; do\n  while IFS= read -r line; do\n    level=$(echo \"$line\" | awk '{print $3}' | tr -d '[]')\n    if [ \"$level\" == \"$LOG_LEVEL\" ]; then\n      echo \"$line\" &gt;&gt; $output_file\n    fi\n  done &lt; \"$log_file\"\ndone\n\n# Compress the filtered log file into a zip archive\nzip filtered_logs.zip $output_file\n\necho \"Filtered log entries have been saved to $output_file and compressed into filtered_logs.zip\"\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20Filtering%20and%20Compression/#explanation","title":"Explanation:","text":"<ol> <li> <p>Check if the log level is specified: The script requires a log level as an argument. If not provided, it displays usage information and exits.</p> </li> <li> <p>Initialise the output file: The script creates or clears the <code>filtered_logs.txt</code> file to store filtered log entries.</p> </li> <li> <p>Process each log file: The script iterates through each log file in the <code>log_files</code> directory, reads each line, and appends entries that match the specified log level to <code>filtered_logs.txt</code>.</p> </li> <li> <p>Compress the filtered log file: The script compresses <code>filtered_logs.txt</code> into a zip archive named <code>filtered_logs.zip</code>.</p> </li> <li> <p>Completion message: The script outputs a message indicating the filtered log entries have been saved and compressed.</p> </li> </ol> <p>This solution assumes the log files are correctly formatted and the directory is always named <code>log_files</code>. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/","title":"Log File and Tarball Manipulation","text":""},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#description","title":"Description:","text":"<p>You are provided with a tarball (<code>logs.tar.gz</code>) containing multiple log files. Your task is to write a shell script that extracts the tarball, processes the log files, and generates a summary report.</p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#requirements","title":"Requirements:","text":"<ol> <li>Extract the tarball: Extract <code>logs.tar.gz</code> to a directory named <code>logs</code>.</li> <li> <p>Process log files: Each log file contains multiple lines with entries in the following format:     <pre><code>YYYY-MM-DD HH:MM:SS [LEVEL] Message\n</code></pre></p> <ul> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Generate summary report:</p> <ul> <li>Count the number of log entries for each log level (INFO, WARNING, ERROR) across all log files.</li> <li>Identify the most recent log entry (based on date and time) for each log level.</li> </ul> </li> </ol>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#input","title":"Input:","text":"<ul> <li>A tarball file named <code>logs.tar.gz</code> containing multiple log files.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#output","title":"Output:","text":"<ul> <li>A summary report printed to the console with the following format:   <pre><code>Log Summary Report\n==================\nTotal INFO entries: &lt;number&gt;\nTotal WARNING entries: &lt;number&gt;\nTotal ERROR entries: &lt;number&gt;\n\nMost recent INFO entry: &lt;YYYY-MM-DD HH:MM:SS [LEVEL] Message&gt;\nMost recent WARNING entry: &lt;YYYY-MM-DD HH:MM:SS [LEVEL] Message&gt;\nMost recent ERROR entry: &lt;YYYY-MM-DD HH:MM:SS [LEVEL] Message&gt;\n</code></pre></li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#example","title":"Example:","text":"<p>Suppose <code>logs.tar.gz</code> contains two log files <code>log1.txt</code> and <code>log2.txt</code> with the following content:</p> <p>log1.txt: <pre><code>2024-05-16 12:00:00 [INFO] System started\n2024-05-16 12:01:00 [ERROR] Failed to connect to database\n2024-05-16 12:02:00 [WARNING] Low disk space\n</code></pre></p> <p>log2.txt: <pre><code>2024-05-16 12:03:00 [INFO] User login\n2024-05-16 12:04:00 [WARNING] High memory usage\n2024-05-16 12:05:00 [ERROR] Service crashed\n</code></pre></p> <p>The summary report should be: <pre><code>Log Summary Report\n==================\nTotal INFO entries: 2\nTotal WARNING entries: 2\nTotal ERROR entries: 2\n\nMost recent INFO entry: 2024-05-16 12:03:00 [INFO] User login\nMost recent WARNING entry: 2024-05-16 12:04:00 [WARNING] High memory usage\nMost recent ERROR entry: 2024-05-16 12:05:00 [ERROR] Service crashed\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the tarball always contains valid log files in the specified format.</li> <li>Your script should handle an arbitrary number of log files within the tarball.</li> </ul>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>process_logs.sh</code>.</p> <p>Here's a bash script solution for the described challenge:</p> <pre><code>#!/bin/bash\n\n# Extract the tarball\nmkdir -p logs\ntar -xzvf logs.tar.gz -C logs\n\n# Initialize counters\ntotal_info=0\ntotal_warning=0\ntotal_error=0\n\n# Initialize most recent log entries\nrecent_info=\"\"\nrecent_warning=\"\"\nrecent_error=\"\"\n\n# Function to compare and update the most recent log entry\nupdate_recent() {\n  local level=$1\n  local entry=$2\n  local datetime=$(echo \"$entry\" | awk '{print $1 \" \" $2}')\n  case $level in\n    INFO)\n      if [[ -z $recent_info || $datetime &gt; $(echo \"$recent_info\" | awk '{print $1 \" \" $2}') ]]; then\n        recent_info=$entry\n      fi\n      ;;\n    WARNING)\n      if [[ -z $recent_warning || $datetime &gt; $(echo \"$recent_warning\" | awk '{print $1 \" \" $2}') ]]; then\n        recent_warning=$entry\n      fi\n      ;;\n    ERROR)\n      if [[ -z $recent_error || $datetime &gt; $(echo \"$recent_error\" | awk '{print $1 \" \" $2}') ]]; then\n        recent_error=$entry\n      fi\n      ;;\n  esac\n}\n\n# Process each log file\nfor log_file in logs/*; do\n  while IFS= read -r line; do\n    level=$(echo \"$line\" | awk '{print $3}' | tr -d '[]')\n    case $level in\n      INFO)\n        ((total_info++))\n        update_recent INFO \"$line\"\n        ;;\n      WARNING)\n        ((total_warning++))\n        update_recent WARNING \"$line\"\n        ;;\n      ERROR)\n        ((total_error++))\n        update_recent ERROR \"$line\"\n        ;;\n    esac\n  done &lt; \"$log_file\"\ndone\n\n# Generate summary report\necho \"Log Summary Report\"\necho \"==================\"\necho \"Total INFO entries: $total_info\"\necho \"Total WARNING entries: $total_warning\"\necho \"Total ERROR entries: $total_error\"\necho\necho \"Most recent INFO entry: $recent_info\"\necho \"Most recent WARNING entry: $recent_warning\"\necho \"Most recent ERROR entry: $recent_error\"\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Log%20File%20and%20Tarball%20Manipulation/#explanation","title":"Explanation:","text":"<ol> <li> <p>Extract the tarball: The script creates a <code>logs</code> directory and extracts <code>logs.tar.gz</code> into it.</p> </li> <li> <p>Initialise counters and most recent log entries: Variables are set up to count log levels and track the most recent entries.</p> </li> <li> <p>Update recent function: A helper function <code>update_recent</code> compares timestamps and updates the most recent log entry for each level.</p> </li> <li> <p>Process each log file: The script iterates through each log file in the <code>logs</code> directory, reads each line, and updates counters and recent entries based on log levels.</p> </li> <li> <p>Generate summary report: The script prints the total counts and most recent log entries for each log level.</p> </li> </ol> <p>This script assumes the log files are correctly formatted and the tarball is always named <code>logs.tar.gz</code>. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/","title":"Parse Logs and Count Events by Severity Level","text":""},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#problem-statement","title":"Problem Statement","text":"<p>You are given a log file where each line contains a timestamp and a severity level (INFO, WARNING, ERROR). Your task is to write a Bash script to parse the log file and count the number of events for each severity level.</p>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#log-file-format","title":"Log File Format","text":"<p>Each log entry is in the format: <pre><code>[timestamp] [severity] message\n</code></pre> - <code>timestamp</code> is a string representing the time of the event. - <code>severity</code> is one of <code>INFO</code>, <code>WARNING</code>, or <code>ERROR</code>. - <code>message</code> is a string representing the event message.</p>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#example-log-file","title":"Example Log File","text":"<pre><code>[2023-05-20 12:00:00] INFO User logged in\n[2023-05-20 12:01:00] WARNING Disk space low\n[2023-05-20 12:02:00] ERROR Unable to connect to database\n[2023-05-20 12:03:00] INFO User logged out\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#output","title":"Output","text":"<p>The script should output the count of each severity level in the format: <pre><code>INFO: 2\nWARNING: 1\nERROR: 1\n</code></pre></p>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#bash-script-solution","title":"Bash Script Solution","text":"<p>To solve this problem using a Bash script, we can use <code>grep</code> to filter lines by severity level and <code>wc -l</code> to count the number of lines for each severity.</p>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#steps","title":"Steps","text":"<ol> <li>Use <code>grep</code> to find lines containing each severity level.</li> <li>Count the number of lines found using <code>wc -l</code>.</li> <li>Print the counts in the required format.</li> </ol>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#bash-script-code","title":"Bash Script Code","text":"<pre><code>#!/bin/bash\n\n# Initialize counts\ninfo_count=0\nwarning_count=0\nerror_count=0\n\n# Read the log file\nwhile IFS= read -r line; do\n    # Extract the severity level\n    severity=$(echo \"$line\" | awk '{print $2}')\n\n    # Update the counts based on the severity level\n    case $severity in\n        INFO)\n            info_count=$((info_count + 1))\n            ;;\n        WARNING)\n            warning_count=$((warning_count + 1))\n            ;;\n        ERROR)\n            error_count=$((error_count + 1))\n            ;;\n    esac\ndone &lt; \"logfile.txt\"\n\n# Print the counts\necho \"INFO: $info_count\"\necho \"WARNING: $warning_count\"\necho \"ERROR: $error_count\"\n</code></pre>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#explanation","title":"Explanation","text":"<ol> <li>Initialization: We initialize variables to hold the counts for each severity level (<code>info_count</code>, <code>warning_count</code>, <code>error_count</code>).</li> <li>Reading the Log File: We use a <code>while</code> loop to read the log file line by line. The <code>IFS= read -r line</code> command reads each line into the variable <code>line</code>.</li> <li>Extracting Severity Level: We use <code>awk</code> to extract the second word of each line, which corresponds to the severity level.</li> <li>Updating Counts: We use a <code>case</code> statement to increment the appropriate count variable based on the extracted severity level.</li> <li>Printing the Counts: After processing all lines, we print the counts for each severity level.</li> </ol>"},{"location":"bash/Log%20File%20Analysis/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#example-usage","title":"Example Usage","text":"<p>Save the script to a file, for example, <code>count_severity.sh</code>, and make it executable:</p> <pre><code>chmod +x count_severity.sh\n</code></pre> <p>Create a log file named <code>logfile.txt</code> with the example log entries:</p> <pre><code>[2023-05-20 12:00:00] INFO User logged in\n[2023-05-20 12:01:00] WARNING Disk space low\n[2023-05-20 12:02:00] ERROR Unable to connect to database\n[2023-05-20 12:03:00] INFO User logged out\n</code></pre> <p>Run the script:</p> <pre><code>./count_severity.sh\n</code></pre> <p>The output should be:</p> <pre><code>INFO: 2\nWARNING: 1\nERROR: 1\n</code></pre> <p>This script efficiently processes the log file and counts the number of events for each severity level using standard Bash tools and commands.</p>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/","title":"SRE Challenge: Automated User Metrics Collection and Alerting","text":""},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#description","title":"Description:","text":"<p>As a Site Reliability Engineer (SRE) at Acme, you need to ensure the platform's stability and performance by monitoring user activity metrics and setting up automated alerts. Your task is to write a Python script that collects user metrics from a simulated API, processes the data to generate insights, and sets up an alerting mechanism for anomalous activity.</p>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#requirements","title":"Requirements:","text":"<ol> <li> <p>Collect user metrics: Use a simulated API to collect user activity metrics. The API returns a JSON response with the following format:    <pre><code>{\n  \"timestamp\": \"YYYY-MM-DDTHH:MM:SSZ\",\n  \"active_users\": &lt;number&gt;,\n  \"new_videos\": &lt;number&gt;,\n  \"likes\": &lt;number&gt;,\n  \"comments\": &lt;number&gt;,\n  \"shares\": &lt;number&gt;\n}\n</code></pre>    The script should collect data every minute for a specified duration (e.g., 10 minutes).</p> </li> <li> <p>Process data:</p> <ul> <li>Calculate the average number of active users per minute.</li> <li>Identify the minute with the highest number of new videos uploaded.</li> </ul> </li> <li> <p>Set up alerting mechanism:</p> <ul> <li>Set a threshold for active users (e.g., 10000). If the number of active users exceeds this threshold at any minute, print an alert message.</li> </ul> </li> </ol>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#input","title":"Input:","text":"<ul> <li>Simulated API endpoint (e.g., <code>http://example.com/api/user_metrics</code>).</li> <li>Duration for data collection (e.g., 10 minutes).</li> </ul>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#output","title":"Output:","text":"<ul> <li>Print a summary report with the average number of active users and the minute with the highest number of new videos.</li> <li>Print an alert message if the number of active users exceeds the threshold.</li> </ul>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#example","title":"Example:","text":"<p>Suppose the API returns the following data for three minutes:</p> <p>Minute 1: <pre><code>{\n  \"timestamp\": \"2024-05-16T12:00:00Z\",\n  \"active_users\": 9500,\n  \"new_videos\": 100,\n  \"likes\": 1500,\n  \"comments\": 200,\n  \"shares\": 300\n}\n</code></pre></p> <p>Minute 2: <pre><code>{\n  \"timestamp\": \"2024-05-16T12:01:00Z\",\n  \"active_users\": 10500,\n  \"new_videos\": 120,\n  \"likes\": 1600,\n  \"comments\": 250,\n  \"shares\": 350\n}\n</code></pre></p> <p>Minute 3: <pre><code>{\n  \"timestamp\": \"2024-05-16T12:02:00Z\",\n  \"active_users\": 9800,\n  \"new_videos\": 90,\n  \"likes\": 1400,\n  \"comments\": 180,\n  \"shares\": 280\n}\n</code></pre></p> <p>The summary report should be: <pre><code>Summary Report\n==============\nAverage active users per minute: 9933.33\nMinute with highest number of new videos: 2024-05-16T12:01:00Z with 120 new videos\n</code></pre></p> <p>The alert message should be: <pre><code>Alert: Active users exceeded threshold at 2024-05-16T12:01:00Z with 10500 active users\n</code></pre></p>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in Python.</li> <li>Assume the API always returns valid data in the specified format.</li> </ul>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#submission","title":"Submission:","text":"<p>Submit your Python script file with the name <code>acme_sre_challenge.py</code>.</p>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a Python script:</p> <pre><code>import requests\nimport time\nfrom datetime import datetime, timedelta\n\nAPI_ENDPOINT = \"http://example.com/api/user_metrics\"\nDURATION_MINUTES = 10\nTHRESHOLD_ACTIVE_USERS = 10000\n\ndef collect_metrics(api_endpoint, duration_minutes):\n    end_time = datetime.utcnow() + timedelta(minutes=duration_minutes)\n    metrics = []\n\n    while datetime.utcnow() &lt; end_time:\n        response = requests.get(api_endpoint)\n        data = response.json()\n        metrics.append(data)\n        time.sleep(60)\n\n    return metrics\n\ndef process_metrics(metrics):\n    total_active_users = 0\n    highest_new_videos = 0\n    highest_new_videos_time = \"\"\n\n    for metric in metrics:\n        total_active_users += metric[\"active_users\"]\n        if metric[\"new_videos\"] &gt; highest_new_videos:\n            highest_new_videos = metric[\"new_videos\"]\n            highest_new_videos_time = metric[\"timestamp\"]\n\n    average_active_users = total_active_users / len(metrics)\n    return average_active_users, highest_new_videos_time, highest_new_videos\n\ndef check_alerts(metrics, threshold):\n    for metric in metrics:\n        if metric[\"active_users\"] &gt; threshold:\n            print(f\"Alert: Active users exceeded threshold at {metric['timestamp']} with {metric['active_users']} active users\")\n\ndef main():\n    metrics = collect_metrics(API_ENDPOINT, DURATION_MINUTES)\n    average_active_users, highest_new_videos_time, highest_new_videos = process_metrics(metrics)\n\n    print(\"Summary Report\")\n    print(\"==============\")\n    print(f\"Average active users per minute: {average_active_users:.2f}\")\n    print(f\"Minute with highest number of new videos: {highest_new_videos_time} with {highest_new_videos} new videos\")\n\n    check_alerts(metrics, THRESHOLD_ACTIVE_USERS)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"bash/misc/Automated%20User%20Metrics%20Collection%20and%20Alerting/#explanation","title":"Explanation:","text":"<ol> <li> <p>Collect metrics: The <code>collect_metrics</code> function collects data from the API every minute for a specified duration and stores the metrics in a list.</p> </li> <li> <p>Process metrics: The <code>process_metrics</code> function calculates the average number of active users per minute and identifies the minute with the highest number of new videos.</p> </li> <li> <p>Check alerts: The <code>check_alerts</code> function checks if the number of active users exceeds the threshold and prints an alert message if it does.</p> </li> <li> <p>Main function: The <code>main</code> function orchestrates the collection, processing, and alerting, and prints the summary report.</p> </li> </ol> <p>This solution assumes the API returns valid data and the endpoint is always accessible. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/misc/File%20Metadata%20Organisation/","title":"File Metadata Organisation","text":""},{"location":"bash/misc/File%20Metadata%20Organisation/#description","title":"Description:","text":"<p>You are given a directory containing various types of files (text files, images, scripts, etc.). Your task is to write a shell script that organises these files based on their file types into subdirectories named after the file type. Additionally, generate a summary report detailing the number of files for each file type.</p>"},{"location":"bash/misc/File%20Metadata%20Organisation/#requirements","title":"Requirements:","text":"<ol> <li> <p>Organise files by type:</p> <ul> <li>Move files into subdirectories based on their file extensions.</li> <li>Create a subdirectory for each file type (e.g., <code>txt</code>, <code>jpg</code>, <code>sh</code>).</li> <li>If a subdirectory for a file type already exists, just move the file into it.</li> </ul> </li> <li> <p>Generate summary report:</p> <ul> <li>Count the number of files for each file type.</li> <li>Output the summary report to a file named <code>file_summary.txt</code>.</li> </ul> </li> </ol>"},{"location":"bash/misc/File%20Metadata%20Organisation/#input","title":"Input:","text":"<ul> <li>A directory named <code>files</code> containing various types of files.</li> </ul>"},{"location":"bash/misc/File%20Metadata%20Organisation/#output","title":"Output:","text":"<ul> <li>Organised subdirectories inside the <code>files</code> directory.</li> <li>A summary report in a file named <code>file_summary.txt</code> with the following format:   <pre><code>File Summary Report\n===================\ntxt: &lt;number of txt files&gt;\njpg: &lt;number of jpg files&gt;\nsh: &lt;number of sh files&gt;\n...\n</code></pre></li> </ul>"},{"location":"bash/misc/File%20Metadata%20Organisation/#example","title":"Example:","text":"<p>Suppose the <code>files</code> directory contains the following files: - <code>document1.txt</code> - <code>document2.txt</code> - <code>image1.jpg</code> - <code>script1.sh</code> - <code>script2.sh</code> - <code>image2.jpg</code></p> <p>After running the script, the <code>files</code> directory should have the following structure: <pre><code>files/\n  \u251c\u2500\u2500 txt/\n  \u2502   \u251c\u2500\u2500 document1.txt\n  \u2502   \u2514\u2500\u2500 document2.txt\n  \u251c\u2500\u2500 jpg/\n  \u2502   \u251c\u2500\u2500 image1.jpg\n  \u2502   \u2514\u2500\u2500 image2.jpg\n  \u251c\u2500\u2500 sh/\n  \u2502   \u251c\u2500\u2500 script1.sh\n  \u2502   \u2514\u2500\u2500 script2.sh\n</code></pre></p> <p>And <code>file_summary.txt</code> should contain: <pre><code>File Summary Report\n===================\ntxt: 2\njpg: 2\nsh: 2\n</code></pre></p>"},{"location":"bash/misc/File%20Metadata%20Organisation/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the <code>files</code> directory always contains valid files with proper extensions.</li> <li>Your script should handle an arbitrary number of files in the <code>files</code> directory.</li> </ul>"},{"location":"bash/misc/File%20Metadata%20Organisation/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>organise_files.sh</code>.</p>"},{"location":"bash/misc/File%20Metadata%20Organisation/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Check if the files directory exists\nif [ ! -d \"files\" ]; then\n  echo \"Directory 'files' not found!\"\n  exit 1\nfi\n\n# Initialize an associative array to hold the count of each file type\ndeclare -A file_count\n\n# Process each file in the files directory\nfor file in files/*; do\n  if [ -f \"$file\" ]; then\n    # Get the file extension\n    extension=\"${file##*.}\"\n\n    # Create a subdirectory for the file type if it doesn't exist\n    if [ ! -d \"files/$extension\" ]; then\n      mkdir \"files/$extension\"\n    fi\n\n    # Move the file to the corresponding subdirectory\n    mv \"$file\" \"files/$extension/\"\n\n    # Increment the file type count\n    ((file_count[$extension]++))\n  fi\ndone\n\n# Generate file summary report\nsummary_file=\"files/file_summary.txt\"\necho \"File Summary Report\" &gt; \"$summary_file\"\necho \"===================\" &gt;&gt; \"$summary_file\"\nfor ext in \"${!file_count[@]}\"; do\n  echo \"$ext: ${file_count[$ext]}\" &gt;&gt; \"$summary_file\"\ndone\n\necho \"Files have been organised and summary report generated at $summary_file\"\n</code></pre>"},{"location":"bash/misc/File%20Metadata%20Organisation/#explanation","title":"Explanation:","text":"<ol> <li> <p>Check if the files directory exists: The script ensures that the <code>files</code> directory is present before proceeding.</p> </li> <li> <p>Initialise an associative array for file counts: The script sets up an associative array <code>file_count</code> to keep track of the number of files for each extension.</p> </li> <li> <p>Process each file: The script iterates through each file in the <code>files</code> directory, extracts the file extension, creates a corresponding subdirectory if it doesn't exist, moves the file into the subdirectory, and updates the file count.</p> </li> <li> <p>Generate the summary report: The script creates a <code>file_summary.txt</code> file in the <code>files</code> directory, writes the counts of each file type, and prints a completion message.</p> </li> </ol> <p>This solution assumes the <code>files</code> directory contains valid files with proper extensions and is named correctly. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/misc/Script-Based%20User%20Management/","title":"Script-Based User Management","text":""},{"location":"bash/misc/Script-Based%20User%20Management/#description","title":"Description:","text":"<p>You are tasked with creating a shell script that performs user management operations on a Linux system. The script should be able to add a new user, delete an existing user, and list all users on the system. Each operation should be specified by a command-line argument.</p>"},{"location":"bash/misc/Script-Based%20User%20Management/#requirements","title":"Requirements:","text":"<ol> <li>Add a new user: The script should accept a username as an argument and create a new user with that name.</li> <li>Delete an existing user: The script should accept a username as an argument and delete the user with that name.</li> <li>List all users: The script should list all users currently on the system.</li> </ol>"},{"location":"bash/misc/Script-Based%20User%20Management/#input","title":"Input:","text":"<ul> <li>Command-line arguments specifying the operation (<code>add</code>, <code>delete</code>, <code>list</code>) and the username (for <code>add</code> and <code>delete</code> operations).</li> </ul>"},{"location":"bash/misc/Script-Based%20User%20Management/#output","title":"Output:","text":"<ul> <li>Appropriate messages indicating the success or failure of each operation.</li> </ul>"},{"location":"bash/misc/Script-Based%20User%20Management/#example","title":"Example:","text":"<ul> <li>To add a new user:   <pre><code>./user_management.sh add newuser\n</code></pre>   Output:   <pre><code>User 'newuser' added successfully.\n</code></pre></li> <li>To delete an existing user:   <pre><code>./user_management.sh delete newuser\n</code></pre>   Output:   <pre><code>User 'newuser' deleted successfully.\n</code></pre></li> <li>To list all users:   <pre><code>./user_management.sh list\n</code></pre>   Output:   <pre><code>List of users:\nuser1\nuser2\n...\n</code></pre></li> </ul>"},{"location":"bash/misc/Script-Based%20User%20Management/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Ensure proper error handling for operations (e.g., user already exists, user does not exist).</li> </ul>"},{"location":"bash/misc/Script-Based%20User%20Management/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>user_management.sh</code>.</p>"},{"location":"bash/misc/Script-Based%20User%20Management/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Function to add a new user\nadd_user() {\n  username=$1\n  if id \"$username\" &amp;&gt;/dev/null; then\n    echo \"Error: User '$username' already exists.\"\n  else\n    sudo useradd \"$username\"\n    if [ $? -eq 0 ]; then\n      echo \"User '$username' added successfully.\"\n    else\n      echo \"Error: Failed to add user '$username'.\"\n    fi\n  fi\n}\n\n# Function to delete an existing user\ndelete_user() {\n  username=$1\n  if id \"$username\" &amp;&gt;/dev/null; then\n    sudo userdel \"$username\"\n    if [ $? -eq 0 ]; then\n      echo \"User '$username' deleted successfully.\"\n    else\n      echo \"Error: Failed to delete user '$username'.\"\n    fi\n  else\n    echo \"Error: User '$username' does not exist.\"\n  fi\n}\n\n# Function to list all users\nlist_users() {\n  echo \"List of users:\"\n  cut -d: -f1 /etc/passwd\n}\n\n# Main script logic\nif [ $# -lt 1 ]; then\n  echo \"Usage: $0 {add|delete|list} [username]\"\n  exit 1\nfi\n\noperation=$1\nusername=$2\n\ncase $operation in\n  add)\n    if [ -z \"$username\" ]; then\n      echo \"Error: No username specified for 'add' operation.\"\n      exit 1\n    fi\n    add_user \"$username\"\n    ;;\n  delete)\n    if [ -z \"$username\" ]; then\n      echo \"Error: No username specified for 'delete' operation.\"\n      exit 1\n    fi\n    delete_user \"$username\"\n    ;;\n  list)\n    list_users\n    ;;\n  *)\n    echo \"Error: Invalid operation specified. Use 'add', 'delete', or 'list'.\"\n    exit 1\n    ;;\nesac\n</code></pre>"},{"location":"bash/misc/Script-Based%20User%20Management/#explanation","title":"Explanation:","text":"<ol> <li> <p>Add a new user: The <code>add_user</code> function checks if the user already exists using the <code>id</code> command. If the user does not exist, it uses <code>useradd</code> to create the user and checks for success.</p> </li> <li> <p>Delete an existing user: The <code>delete_user</code> function checks if the user exists using the <code>id</code> command. If the user exists, it uses <code>userdel</code> to delete the user and checks for success.</p> </li> <li> <p>List all users: The <code>list_users</code> function lists all users by reading <code>/etc/passwd</code> and extracting the usernames.</p> </li> <li> <p>Main script logic: The script processes command-line arguments to determine the operation (<code>add</code>, <code>delete</code>, <code>list</code>) and calls the appropriate function. It also includes error handling for missing arguments and invalid operations.</p> </li> </ol> <p>This script assumes it is run with appropriate permissions to manage users (typically as root or with <code>sudo</code>). Adjustments may be needed based on specific requirements or system configurations.</p>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/","title":"Disk Space Monitoring Script","text":""},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#description","title":"Description:","text":"<p>You are tasked with creating a shell script that monitors disk space usage on a system and sends alerts when the usage exceeds a specified threshold. The script should be designed to run periodically and log its activities.</p>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#requirements","title":"Requirements:","text":"<ol> <li> <p>Monitor Disk Space Usage:</p> <ul> <li>The script should check the disk space usage of all mounted filesystems.</li> <li>If any filesystem's usage exceeds a specified threshold (e.g., 80%), the script should log a warning message.</li> </ul> </li> <li> <p>Logging:</p> <ul> <li>The script should log its activities to a file named <code>disk_usage.log</code> in the following format:   <pre><code>YYYY-MM-DD HH:MM:SS - [LEVEL] Message\n</code></pre></li> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Command-line Arguments:</p> <ul> <li>The script should accept a command-line argument to specify the usage threshold (in percentage).</li> <li>If the threshold is not provided, it should default to 80%.</li> </ul> </li> <li> <p>Periodic Execution:</p> <ul> <li>The script should be designed to be run periodically (e.g., via <code>cron</code>).</li> </ul> </li> </ol>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#input","title":"Input:","text":"<ul> <li>A command-line argument specifying the usage threshold (in percentage).</li> </ul>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#output","title":"Output:","text":"<ul> <li>A log file named <code>disk_usage.log</code> containing information and warning messages about disk space usage.</li> </ul>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#example","title":"Example:","text":"<p>If the specified threshold is 80%, and the disk usage is as follows:</p> <pre><code>Filesystem      Size  Used Avail Use% Mounted on\n/dev/sda1        50G   35G   15G  70% /\n/dev/sda2        20G   18G    2G  90% /home\n</code></pre> <p>The log file should contain entries similar to: <pre><code>2024-05-18 14:00:00 - [INFO] Checked disk usage for /dev/sda1: 70%\n2024-05-18 14:00:00 - [WARNING] Disk usage for /dev/sda2 is 90%, which exceeds the threshold of 80%\n</code></pre></p>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>The script should handle cases where the threshold is not provided and default to 80%.</li> <li>Ensure the script runs efficiently to be suitable for periodic execution.</li> </ul>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>disk_space_monitor.sh</code>.</p>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Default threshold\nDEFAULT_THRESHOLD=80\n\n# Get the threshold from the command-line argument or use the default\nTHRESHOLD=${1:-$DEFAULT_THRESHOLD}\n\n# Log file\nLOG_FILE=\"disk_usage.log\"\n\n# Function to log messages\nlog_message() {\n  local level=$1\n  local message=$2\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') - [$level] $message\" &gt;&gt; $LOG_FILE\n}\n\n# Check disk usage for each mounted filesystem\ndf -H | awk 'NR&gt;1' | while read -r line; do\n  usage=$(echo $line | awk '{print $5}' | tr -d '%')\n  filesystem=$(echo $line | awk '{print $1}')\n  mount_point=$(echo $line | awk '{print $6}')\n\n  log_message \"INFO\" \"Checked disk usage for $filesystem ($mount_point): $usage%\"\n\n  if [ $usage -ge $THRESHOLD ]; then\n    log_message \"WARNING\" \"Disk usage for $filesystem ($mount_point) is ${usage}%, which exceeds the threshold of ${THRESHOLD}%\"\n  fi\ndone\n</code></pre>"},{"location":"bash/monitoring/Disk%20Space%20Monitoring%20Script/#explanation","title":"Explanation:","text":"<ol> <li> <p>Set default threshold: The script sets a default threshold value of 80%.</p> </li> <li> <p>Get threshold from command-line argument: It checks if a threshold is provided as a command-line argument. If not, it uses the default value.</p> </li> <li> <p>Log file setup: The script defines a log file <code>disk_usage.log</code> and a function <code>log_message</code> to handle logging.</p> </li> <li> <p>Check disk usage: The script uses the <code>df -H</code> command to get the disk usage of all mounted filesystems, skipping the header line.</p> </li> <li> <p>Log disk usage: For each filesystem, it logs the current usage as an <code>INFO</code> message.</p> </li> <li> <p>Check against threshold: If the usage exceeds the specified threshold, it logs a <code>WARNING</code> message.</p> </li> </ol> <p>This solution is designed to be efficient and suitable for periodic execution via <code>cron</code>. It ensures that disk usage is monitored and alerts are logged when usage exceeds the specified threshold.</p>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/","title":"Monitoring and Alerting for Acme Services","text":""},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#description","title":"Description:","text":"<p>As a Site Reliability Engineer (SRE) at Acme, your task is to ensure the smooth operation and performance of Acme's services. You need to create a monitoring and alerting system for a set of microservices to detect and respond to any performance issues or failures in real-time.</p>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#requirements","title":"Requirements:","text":"<ol> <li> <p>Service Metrics: Collect and monitor key metrics for each microservice, such as:</p> <ul> <li>CPU usage</li> <li>Memory usage</li> <li>Response time</li> <li>Error rate</li> </ul> </li> <li> <p>Log Analysis: Continuously analyze log files to detect patterns indicating potential issues, such as high error rates or slow response times.</p> </li> <li> <p>Alerts: Set up alerts to notify the SRE team when certain thresholds are breached, for example:</p> <ul> <li>CPU usage exceeds 80% for more than 5 minutes.</li> <li>Memory usage exceeds 75% for more than 5 minutes.</li> <li>Average response time exceeds 200ms for more than 3 minutes.</li> <li>Error rate exceeds 1% for more than 2 minutes.</li> </ul> </li> <li> <p>Incident Response: Implement automated responses for common incidents to reduce downtime and maintain service reliability.</p> </li> </ol>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#input","title":"Input:","text":"<ul> <li>A set of log files and performance metrics from multiple microservices.</li> </ul>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#output","title":"Output:","text":"<ul> <li>A script or configuration for setting up monitoring, log analysis, and alerting using tools like Prometheus, Grafana, and ELK (Elasticsearch, Logstash, Kibana).</li> <li>A document outlining the incident response plan.</li> </ul>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#example","title":"Example:","text":"<p>Suppose you have three microservices: <code>service-A</code>, <code>service-B</code>, and <code>service-C</code>. Each service generates log files and metrics that need to be monitored.</p> <ol> <li>Service Metrics Collection: Use Prometheus to scrape metrics from the services.</li> <li>Log Analysis: Use ELK stack to analyze logs and detect anomalies.</li> <li>Alert Configuration: Set up alerts in Prometheus and Grafana to notify the SRE team via email or Slack.</li> <li>Incident Response: Create a script to restart a service if it crashes or to scale up resources if usage exceeds certain limits.</li> </ol>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#solution","title":"Solution:","text":"<ol> <li>Prometheus Configuration:</li> </ol> <pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'microservices'\n    static_configs:\n      - targets: ['service-A:9090', 'service-B:9090', 'service-C:9090']\n</code></pre> <ol> <li>Grafana Dashboard:</li> <li>Create a dashboard in Grafana with panels for CPU usage, memory usage, response time, and error rate.</li> <li> <p>Configure alerts in Grafana for each metric.</p> </li> <li> <p>ELK Stack Configuration:</p> </li> </ol> <p>Logstash Configuration: <pre><code>input {\n  file {\n    path =&gt; \"/var/log/service-A/*.log\"\n    start_position =&gt; \"beginning\"\n  }\n  file {\n    path =&gt; \"/var/log/service-B/*.log\"\n    start_position =&gt; \"beginning\"\n  }\n  file {\n    path =&gt; \"/var/log/service-C/*.log\"\n    start_position =&gt; \"beginning\"\n  }\n}\n\nfilter {\n  grok {\n    match =&gt; { \"message\" =&gt; \"%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}\" }\n  }\n}\n\noutput {\n  elasticsearch {\n    hosts =&gt; [\"localhost:9200\"]\n    index =&gt; \"acme-logs-%{+YYYY.MM.dd}\"\n  }\n  stdout { codec =&gt; rubydebug }\n}\n</code></pre></p> <p>Kibana:    - Create visualizations and dashboards for log levels, error rates, and response times.    - Set up alerting in Kibana to notify the SRE team of anomalies.</p> <ol> <li>Incident Response Script (example in bash):</li> </ol> <pre><code>#!/bin/bash\n\n# Function to restart a service\nrestart_service() {\n  local service_name=$1\n  echo \"Restarting $service_name...\"\n  systemctl restart $service_name\n}\n\n# Function to scale up resources\nscale_up_resources() {\n  local service_name=$1\n  local current_instances=$(kubectl get deployment $service_name -o jsonpath='{.spec.replicas}')\n  local new_instances=$((current_instances + 1))\n  echo \"Scaling up $service_name from $current_instances to $new_instances instances...\"\n  kubectl scale deployment $service_name --replicas=$new_instances\n}\n\n# Check CPU usage\ncpu_usage=$(top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}')\nif (( $(echo \"$cpu_usage &gt; 80\" | bc -l) )); then\n  echo \"High CPU usage detected: $cpu_usage%\"\n  restart_service \"service-A\"\n  restart_service \"service-B\"\n  restart_service \"service-C\"\nfi\n\n# Check memory usage\nmemory_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')\nif (( $(echo \"$memory_usage &gt; 75\" | bc -l) )); then\n  echo \"High memory usage detected: $memory_usage%\"\n  scale_up_resources \"service-A\"\n  scale_up_resources \"service-B\"\n  scale_up_resources \"service-C\"\nfi\n</code></pre>"},{"location":"bash/monitoring/Monitoring%20and%20Alerting%20for%20Services/#submission","title":"Submission:","text":"<p>Submit the following: - <code>prometheus.yml</code> for Prometheus configuration. - JSON or YAML files for Grafana dashboard and alerts. - <code>logstash.conf</code> for Logstash configuration. - A script file for incident response, named <code>incident_response.sh</code>. - A document outlining the incident response plan, named <code>incident_response_plan.md</code>.</p>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/","title":"Acme Service Health Check and Alert","text":""},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#description","title":"Description:","text":"<p>You are an SRE (Site Reliability Engineer) at Acme, responsible for maintaining the health of various services. Your task is to write a bash script that checks the health of a specified service by making HTTP requests to its health endpoint, logs the response times, and sends an alert email if the response time exceeds a certain threshold.</p>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#requirements","title":"Requirements:","text":"<ol> <li>Health check: Make HTTP GET requests to the service's health endpoint at regular intervals.</li> <li>Log response times: Record the response times and status codes in a log file.</li> <li>Threshold alert: If the response time exceeds a specified threshold, send an alert email.</li> <li>Configuration: Use a configuration file to specify the service URL, interval, threshold, and email address.</li> </ol>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#input","title":"Input:","text":"<ul> <li>A configuration file <code>health_check.conf</code> with the following content:   <pre><code>SERVICE_URL=\"http://example.com/health\"\nCHECK_INTERVAL=60  # seconds\nRESPONSE_THRESHOLD=2000  # milliseconds\nALERT_EMAIL=\"alert@example.com\"\n</code></pre></li> </ul>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#output","title":"Output:","text":"<ul> <li>A log file named <code>health_check.log</code> containing the timestamp, response time, and status code of each health check.</li> <li>An email alert sent to the specified email address if the response time exceeds the threshold.</li> </ul>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#example","title":"Example:","text":"<p>Suppose the configuration file contains: <pre><code>SERVICE_URL=\"http://example.com/health\"\nCHECK_INTERVAL=60\nRESPONSE_THRESHOLD=2000\nALERT_EMAIL=\"alert@example.com\"\n</code></pre></p> <p>The log file <code>health_check.log</code> might look like: <pre><code>2024-05-18 12:00:00 1800 200\n2024-05-18 12:01:00 2100 200\n</code></pre></p> <p>An email alert would be sent if the response time exceeds 2000 milliseconds.</p>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the service health endpoint returns a standard HTTP response.</li> <li>Use standard Unix tools like <code>curl</code>, <code>awk</code>, <code>date</code>, and <code>mail</code>.</li> </ul>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>service_health_check.sh</code>.</p>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Source the configuration file\nsource health_check.conf\n\n# Initialize the log file\nlog_file=\"health_check.log\"\n\n# Function to send alert email\nsend_alert() {\n  local response_time=$1\n  echo \"Service response time exceeded threshold: ${response_time}ms\" | mail -s \"Service Health Alert\" $ALERT_EMAIL\n}\n\n# Function to perform health check\nperform_health_check() {\n  while true; do\n    # Record the start time\n    start_time=$(date +%s%3N)\n\n    # Make the HTTP request and capture the response time and status code\n    response=$(curl -o /dev/null -s -w \"%{http_code}\" $SERVICE_URL)\n    status_code=$?\n    end_time=$(date +%s%3N)\n    response_time=$((end_time - start_time))\n\n    # Log the result\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') ${response_time} ${response}\" &gt;&gt; $log_file\n\n    # Check if the response time exceeds the threshold\n    if [ $response_time -gt $RESPONSE_THRESHOLD ]; then\n      send_alert $response_time\n    fi\n\n    # Wait for the next interval\n    sleep $CHECK_INTERVAL\n  done\n}\n\n# Start the health check\nperform_health_check\n</code></pre>"},{"location":"bash/monitoring/Service%20Health%20Check%20and%20Alert/#explanation","title":"Explanation:","text":"<ol> <li> <p>Source the configuration file: The script sources <code>health_check.conf</code> to load the service URL, check interval, response threshold, and alert email address.</p> </li> <li> <p>Initialise the log file: The script sets up a log file <code>health_check.log</code> to record health check results.</p> </li> <li> <p>Function to send alert email: The <code>send_alert</code> function sends an email if the response time exceeds the threshold.</p> </li> <li> <p>Function to perform health check: The <code>perform_health_check</code> function makes HTTP GET requests to the service's health endpoint, records the response time and status code, logs the result, checks if the response time exceeds the threshold, and sends an alert if necessary.</p> </li> <li> <p>Start the health check: The script calls <code>perform_health_check</code> to start the health check process, which runs indefinitely at the specified intervals.</p> </li> </ol> <p>This solution assumes the health check configuration file is correctly formatted and the service health endpoint returns standard HTTP responses. Adjustments may be needed based on specific requirements or variations in input.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/","title":"System Resource Monitoring and Alerting Script","text":""},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#description","title":"Description:","text":"<p>You are required to write a shell script that monitors CPU and memory usage on a system, and sends alerts when usage exceeds specified thresholds. The script should run continuously and log its activities.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#requirements","title":"Requirements:","text":"<ol> <li> <p>Monitor CPU and Memory Usage:</p> <ul> <li>The script should check the CPU and memory usage at regular intervals (e.g., every 5 seconds).</li> <li>If the CPU or memory usage exceeds specified thresholds, the script should log a warning message.</li> </ul> </li> <li> <p>Logging:</p> <ul> <li>The script should log its activities to a file named <code>system_usage.log</code> in the following format:   <pre><code>YYYY-MM-DD HH:MM:SS - [LEVEL] Message\n</code></pre></li> <li><code>YYYY-MM-DD</code> is the date.</li> <li><code>HH:MM:SS</code> is the time.</li> <li><code>[LEVEL]</code> is the log level (<code>INFO</code>, <code>WARNING</code>).</li> <li><code>Message</code> is the log message.</li> </ul> </li> <li> <p>Command-line Arguments:</p> <ul> <li>The script should accept command-line arguments to specify the CPU and memory usage thresholds (in percentage).</li> <li>If the thresholds are not provided, they should default to 75% for CPU and 80% for memory.</li> </ul> </li> <li> <p>Continuous Monitoring:</p> <ul> <li>The script should run continuously, checking the CPU and memory usage at regular intervals.</li> </ul> </li> </ol>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#input","title":"Input:","text":"<ul> <li>Command-line arguments specifying the CPU and memory usage thresholds (in percentage).</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#output","title":"Output:","text":"<ul> <li>A log file named <code>system_usage.log</code> containing information and warning messages about CPU and memory usage.</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#example","title":"Example:","text":"<p>If the specified thresholds are 75% for CPU and 80% for memory, and the system usage is as follows:</p> <pre><code>CPU usage: 65%\nMemory usage: 85%\n</code></pre> <p>The log file should contain entries similar to: <pre><code>2024-05-18 14:00:00 - [INFO] Checked CPU usage: 65%\n2024-05-18 14:00:00 - [WARNING] Memory usage is 85%, which exceeds the threshold of 80%\n</code></pre></p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>The script should handle cases where the thresholds are not provided and default to 75% for CPU and 80% for memory.</li> <li>Ensure the script runs efficiently to be suitable for continuous monitoring.</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>resource_monitor.sh</code>.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Default thresholds\nDEFAULT_CPU_THRESHOLD=75\nDEFAULT_MEM_THRESHOLD=80\n\n# Get the thresholds from command-line arguments or use the defaults\nCPU_THRESHOLD=${1:-$DEFAULT_CPU_THRESHOLD}\nMEM_THRESHOLD=${2:-$DEFAULT_MEM_THRESHOLD}\n\n# Log file\nLOG_FILE=\"system_usage.log\"\n\n# Function to log messages\nlog_message() {\n  local level=$1\n  local message=$2\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') - [$level] $message\" &gt;&gt; $LOG_FILE\n}\n\n# Function to check CPU and memory usage\ncheck_usage() {\n  cpu_usage=$(top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}')\n  mem_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')\n\n  log_message \"INFO\" \"Checked CPU usage: ${cpu_usage}%\"\n  log_message \"INFO\" \"Checked memory usage: ${mem_usage}%\"\n\n  if (( $(echo \"$cpu_usage &gt; $CPU_THRESHOLD\" |bc -l) )); then\n    log_message \"WARNING\" \"CPU usage is ${cpu_usage}%, which exceeds the threshold of ${CPU_THRESHOLD}%\"\n  fi\n\n  if (( $(echo \"$mem_usage &gt; $MEM_THRESHOLD\" |bc -l) )); then\n    log_message \"WARNING\" \"Memory usage is ${mem_usage}%, which exceeds the threshold of ${MEM_THRESHOLD}%\"\n  fi\n}\n\n# Run the check_usage function continuously at regular intervals\nwhile true; do\n  check_usage\n  sleep 5\ndone\n</code></pre>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting%20Script/#explanation","title":"Explanation:","text":"<ol> <li> <p>Set default thresholds: The script sets default threshold values for CPU (75%) and memory (80%) usage.</p> </li> <li> <p>Get thresholds from command-line arguments: It checks if thresholds for CPU and memory are provided as command-line arguments. If not, it uses the default values.</p> </li> <li> <p>Log file setup: The script defines a log file <code>system_usage.log</code> and a function <code>log_message</code> to handle logging.</p> </li> <li> <p>Check CPU and memory usage: The script uses <code>top</code> and <code>free</code> commands to get the CPU and memory usage, respectively, and logs the current usage as <code>INFO</code> messages.</p> </li> <li> <p>Check against thresholds: If the CPU or memory usage exceeds the specified thresholds, it logs a <code>WARNING</code> message.</p> </li> <li> <p>Continuous monitoring: The script runs the <code>check_usage</code> function in a continuous loop, checking the usage every 5 seconds.</p> </li> </ol> <p>This solution is designed to run continuously and efficiently, making it suitable for real-time monitoring of system resources.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/","title":"System Resource Monitoring and Alerting","text":""},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#description","title":"Description:","text":"<p>You are required to write a shell script that monitors the system's CPU and memory usage. If the usage exceeds specified thresholds, the script should log an alert message to a file and send an email notification.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#requirements","title":"Requirements:","text":"<ol> <li> <p>Monitor system resources:</p> <ul> <li>Monitor CPU and memory usage at regular intervals (e.g., every 10 seconds).</li> <li>If CPU usage exceeds 80% or memory usage exceeds 70%, log an alert and send an email.</li> </ul> </li> <li> <p>Log alerts:</p> <ul> <li>Log alert messages to a file named <code>system_alerts.log</code> in the following format:   <pre><code>YYYY-MM-DD HH:MM:SS - ALERT: &lt;resource&gt; usage is &lt;usage&gt;%\n</code></pre></li> </ul> </li> <li> <p>Send email notifications:</p> <ul> <li>Send an email with the alert message to a specified email address.</li> </ul> </li> </ol>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#input","title":"Input:","text":"<ul> <li>Thresholds for CPU (80%) and memory (70%) usage.</li> <li>Email address to send notifications to.</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#output","title":"Output:","text":"<ul> <li>A log file named <code>system_alerts.log</code> containing alert messages.</li> <li>Email notifications sent to the specified email address when thresholds are exceeded.</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#example","title":"Example:","text":"<p>If CPU usage exceeds 80%, an alert message should be logged and an email should be sent: <pre><code>2024-05-16 12:00:00 - ALERT: CPU usage is 85%\n</code></pre></p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#constraints","title":"Constraints:","text":"<ul> <li>Your script should be written in bash.</li> <li>Assume the system has the <code>mail</code> utility installed for sending emails.</li> <li>The script should run continuously, monitoring resources at specified intervals.</li> </ul>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#submission","title":"Submission:","text":"<p>Submit your bash script file with the name <code>monitor_system.sh</code>.</p>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#solution","title":"Solution:","text":"<p>Here is a possible solution in the form of a bash script:</p> <pre><code>#!/bin/bash\n\n# Email address to send alerts to\nEMAIL=\"your_email@example.com\"\n\n# Thresholds\nCPU_THRESHOLD=80\nMEM_THRESHOLD=70\n\n# Log file\nLOG_FILE=\"system_alerts.log\"\n\n# Function to log alerts\nlog_alert() {\n  local message=$1\n  echo \"$(date '+%Y-%m-%d %H:%M:%S') - ALERT: $message\" &gt;&gt; $LOG_FILE\n}\n\n# Function to send email alerts\nsend_email() {\n  local subject=$1\n  local body=$2\n  echo \"$body\" | mail -s \"$subject\" $EMAIL\n}\n\n# Monitor system resources\nwhile true; do\n  # Get CPU and memory usage\n  CPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}')\n  MEM_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}')\n\n  # Check CPU usage\n  if (( $(echo \"$CPU_USAGE &gt; $CPU_THRESHOLD\" | bc -l) )); then\n    message=\"CPU usage is ${CPU_USAGE}%\"\n    log_alert \"$message\"\n    send_email \"CPU Usage Alert\" \"$message\"\n  fi\n\n  # Check memory usage\n  if (( $(echo \"$MEM_USAGE &gt; $MEM_THRESHOLD\" | bc -l) )); then\n    message=\"Memory usage is ${MEM_USAGE}%\"\n    log_alert \"$message\"\n    send_email \"Memory Usage Alert\" \"$message\"\n  fi\n\n  # Wait for the next check\n  sleep 10\ndone\n</code></pre>"},{"location":"bash/monitoring/System%20Resource%20Monitoring%20and%20Alerting/#explanation","title":"Explanation:","text":"<ol> <li> <p>Initialise variables: Set the email address, CPU and memory usage thresholds, and the log file name.</p> </li> <li> <p>Log alerts: Define a function <code>log_alert</code> that writes alert messages to the log file with a timestamp.</p> </li> <li> <p>Send email alerts: Define a function <code>send_email</code> that sends an email with the alert message.</p> </li> <li> <p>Monitor system resources: Use a <code>while true</code> loop to continuously monitor CPU and memory usage at 10-second intervals.</p> <ul> <li>CPU usage: Calculate CPU usage using <code>top</code> and check if it exceeds the threshold. If so, log the alert and send an email.</li> <li>Memory usage: Calculate memory usage using <code>free</code> and check if it exceeds the threshold. If so, log the alert and send an email.</li> </ul> </li> <li> <p>Wait for the next check: Use <code>sleep 10</code> to wait 10 seconds before the next check.</p> </li> </ol> <p>This solution assumes the <code>mail</code> utility is installed and configured on the system. Adjustments may be needed based on specific requirements or system configurations.</p>"},{"location":"linux/coreutils/","title":"Coreutils","text":""},{"location":"linux/coreutils/#coreutils-study-sheet","title":"Coreutils Study Sheet","text":"<p>Purpose: To provide a quick reference for using GNU Core Utilities (coreutils) on a Linux system, covering basic file, text, and system commands.</p>"},{"location":"linux/coreutils/#file-operations","title":"File Operations","text":"<ol> <li> <p>List Files:</p> <ul> <li>Basic listing:   <pre><code>ls\n</code></pre></li> <li>Detailed listing:   <pre><code>ls -l\n</code></pre></li> <li>Include hidden files:   <pre><code>ls -a\n</code></pre></li> </ul> </li> <li> <p>Copy Files:</p> <ul> <li>Basic copy:   <pre><code>cp &lt;source&gt; &lt;destination&gt;\n</code></pre></li> <li>Copy directories recursively:   <pre><code>cp -r &lt;source-dir&gt; &lt;destination-dir&gt;\n</code></pre></li> </ul> </li> <li> <p>Move/Rename Files:    <pre><code>mv &lt;source&gt; &lt;destination&gt;\n</code></pre></p> </li> <li> <p>Remove Files:</p> <ul> <li>Basic remove:   <pre><code>rm &lt;file&gt;\n</code></pre></li> <li>Remove directories recursively:   <pre><code>rm -r &lt;directory&gt;\n</code></pre></li> <li>Force remove:   <pre><code>rm -f &lt;file&gt;\n</code></pre></li> </ul> </li> <li> <p>Create Directories:       <pre><code>mkdir &lt;directory&gt;\n</code></pre></p> <ul> <li>Create parent directories as needed:   <pre><code>mkdir -p &lt;parent/child-directory&gt;\n</code></pre></li> </ul> </li> <li> <p>Remove Directories:    <pre><code>rmdir &lt;directory&gt;\n</code></pre></p> </li> <li> <p>Change File Permissions:       <pre><code>chmod &lt;permissions&gt; &lt;file&gt;\n</code></pre></p> <ul> <li>Example to make a file executable:   <pre><code>chmod +x &lt;file&gt;\n</code></pre></li> </ul> </li> <li> <p>Change File Ownership:    <pre><code>chown &lt;owner&gt;:&lt;group&gt; &lt;file&gt;\n</code></pre></p> </li> <li> <p>Link Files:</p> <ul> <li>Create a hard link:   <pre><code>ln &lt;target&gt; &lt;link-name&gt;\n</code></pre></li> <li>Create a symbolic link:   <pre><code>ln -s &lt;target&gt; &lt;link-name&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/coreutils/#text-operations","title":"Text Operations","text":"<ol> <li> <p>Display File Contents:</p> <ul> <li>Basic display:   <pre><code>cat &lt;file&gt;\n</code></pre></li> <li>Display with line numbers:   <pre><code>cat -n &lt;file&gt;\n</code></pre></li> </ul> </li> <li> <p>Concatenate Files:    <pre><code>cat &lt;file1&gt; &lt;file2&gt; &gt; &lt;output-file&gt;\n</code></pre></p> </li> <li> <p>View File with Paging:       <pre><code>less &lt;file&gt;\n</code></pre></p> <ul> <li>Alternative command:   <pre><code>more &lt;file&gt;\n</code></pre></li> </ul> </li> <li> <p>Search Inside Files:       <pre><code>grep &lt;pattern&gt; &lt;file&gt;\n</code></pre></p> <ul> <li>Recursive search:   <pre><code>grep -r &lt;pattern&gt; &lt;directory&gt;\n</code></pre></li> </ul> </li> <li> <p>Count Lines, Words, Characters:       <pre><code>wc &lt;file&gt;\n</code></pre></p> <ul> <li>Count lines only:   <pre><code>wc -l &lt;file&gt;\n</code></pre></li> </ul> </li> <li> <p>Sort Lines:    <pre><code>sort &lt;file&gt;\n</code></pre></p> </li> <li> <p>Remove Duplicate Lines:    <pre><code>uniq &lt;file&gt;\n</code></pre></p> </li> <li> <p>Compare Files:    <pre><code>diff &lt;file1&gt; &lt;file2&gt;\n</code></pre></p> </li> <li> <p>Replace Text in Files:</p> <ul> <li>Basic replace:   <pre><code>sed 's/&lt;old&gt;/&lt;new&gt;/g' &lt;file&gt;\n</code></pre></li> <li>Replace and save changes:   <pre><code>sed -i 's/&lt;old&gt;/&lt;new&gt;/g' &lt;file&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/coreutils/#system-operations","title":"System Operations","text":"<ol> <li> <p>Print Working Directory:    <pre><code>pwd\n</code></pre></p> </li> <li> <p>Change Directory:    <pre><code>cd &lt;directory&gt;\n</code></pre></p> </li> <li> <p>Display Disk Usage:</p> <ul> <li>Disk space usage of files and directories:   <pre><code>du -sh &lt;directory&gt;\n</code></pre></li> <li>Disk free space:   <pre><code>df -h\n</code></pre></li> </ul> </li> <li> <p>Display Process Information:</p> <ul> <li>List all processes:   <pre><code>ps aux\n</code></pre></li> <li>Filter processes by name:   <pre><code>ps aux | grep &lt;process-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Terminate a Process:       <pre><code>kill &lt;PID&gt;\n</code></pre></p> <ul> <li>Force terminate:   <pre><code>kill -9 &lt;PID&gt;\n</code></pre></li> </ul> </li> <li> <p>System Uptime:    <pre><code>uptime\n</code></pre></p> </li> <li> <p>Display System Information:    <pre><code>uname -a\n</code></pre></p> </li> <li> <p>Change File Timestamps:    <pre><code>touch &lt;file&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/coreutils/#archiving-and-compression","title":"Archiving and Compression","text":"<ol> <li> <p>Create Archive:    <pre><code>tar -cvf &lt;archive-name&gt;.tar &lt;file-or-directory&gt;\n</code></pre></p> </li> <li> <p>Extract Archive:    <pre><code>tar -xvf &lt;archive-name&gt;.tar\n</code></pre></p> </li> <li> <p>Create Compressed Archive:    <pre><code>tar -czvf &lt;archive-name&gt;.tar.gz &lt;file-or-directory&gt;\n</code></pre></p> </li> <li> <p>Extract Compressed Archive:    <pre><code>tar -xzvf &lt;archive-name&gt;.tar.gz\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can efficiently perform common file, text, and system operations on a Linux system, leveraging the powerful utilities provided by coreutils.</p>"},{"location":"linux/admin/backup/","title":"Backup","text":""},{"location":"linux/admin/backup/#linux-backup-and-recovery-study-sheet","title":"Linux Backup and Recovery Study Sheet","text":"<p>Purpose: To provide a quick reference for performing backup and recovery tasks on a Linux system.</p>"},{"location":"linux/admin/backup/#backup-basics","title":"Backup Basics","text":"<ol> <li> <p>Types of Backups:</p> <ul> <li>Full Backup: A complete copy of all data.</li> <li>Incremental Backup: Copies only the data that has changed since the last backup.</li> <li>Differential Backup: Copies all data that has changed since the last full backup.</li> </ul> </li> <li> <p>Common Backup Tools:</p> <ul> <li><code>rsync</code>: Synchronize files and directories.</li> <li><code>tar</code>: Archive files.</li> <li><code>dd</code>: Low-level copying and conversion.</li> <li><code>rsnapshot</code>: Filesystem snapshot utility.</li> <li><code>Bacula</code>, <code>Amanda</code>: Enterprise-level backup solutions.</li> <li><code>Timeshift</code>: System restore utility.</li> </ul> </li> </ol>"},{"location":"linux/admin/backup/#rsync-for-backups","title":"<code>rsync</code> for Backups","text":"<ol> <li> <p>Basic rsync Command:       <pre><code>rsync -avh /source/directory /destination/directory\n</code></pre></p> <ul> <li><code>-a</code>: Archive mode (preserves permissions, timestamps, etc.).</li> <li><code>-v</code>: Verbose output.</li> <li><code>-h</code>: Human-readable output.</li> </ul> </li> <li> <p>Using <code>rsync</code> Over SSH:    <pre><code>rsync -avh -e ssh /source/directory user@remote:/destination/directory\n</code></pre></p> </li> <li> <p>Incremental Backup with <code>rsync</code>:    <pre><code>rsync -avh --link-dest=/previous/backup /source/directory /destination/directory\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/backup/#tar-for-backups","title":"<code>tar</code> for Backups","text":"<ol> <li> <p>Creating a tar Archive:       <pre><code>tar -cvzf backup.tar.gz /directory/to/backup\n</code></pre></p> <ul> <li><code>-c</code>: Create a new archive.</li> <li><code>-v</code>: Verbose output.</li> <li><code>-z</code>: Compress the archive with gzip.</li> <li><code>-f</code>: Specify the filename.</li> </ul> </li> <li> <p>Extracting a tar Archive:       <pre><code>tar -xvzf backup.tar.gz -C /path/to/restore\n</code></pre></p> <ul> <li><code>-x</code>: Extract files from an archive.</li> <li><code>-C</code>: Specify the directory to extract files to.</li> </ul> </li> <li> <p>Incremental Backup with <code>tar</code>:</p> <ul> <li>Create a full backup:   <pre><code>tar -cvzf full-backup.tar.gz /directory/to/backup\n</code></pre></li> <li>Create an incremental backup:   <pre><code>tar -cvzf incremental-backup.tar.gz --listed-incremental=/path/to/snapshot.file /directory/to/backup\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/backup/#dd-for-backups","title":"<code>dd</code> for Backups","text":"<ol> <li> <p>Creating a Disk Image:       <pre><code>dd if=/dev/sdX of=/path/to/backup.img bs=4M\n</code></pre></p> <ul> <li><code>if</code>: Input file (source device).</li> <li><code>of</code>: Output file (destination image file).</li> <li><code>bs</code>: Block size (default is 512 bytes, <code>4M</code> for 4 MB blocks).</li> </ul> </li> <li> <p>Restoring a Disk Image:    <pre><code>dd if=/path/to/backup.img of=/dev/sdX bs=4M\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/backup/#rsnapshot-for-backups","title":"<code>rsnapshot</code> for Backups","text":"<ol> <li> <p>Install rsnapshot:    <pre><code>sudo apt install rsnapshot  # Debian/Ubuntu\nsudo yum install rsnapshot  # Red Hat/CentOS\n</code></pre></p> </li> <li> <p>Configure rsnapshot:</p> <ul> <li>Edit the configuration file <code>/etc/rsnapshot.conf</code>.</li> <li>Define backup intervals (hourly, daily, weekly, etc.).</li> <li>Example configuration snippet:   <pre><code>snapshot_root   /path/to/snapshots/\nbackup  /home/  localhost/\nbackup  /etc/   localhost/\n</code></pre></li> </ul> </li> <li> <p>Run rsnapshot Backup:    <pre><code>sudo rsnapshot hourly\nsudo rsnapshot daily\nsudo rsnapshot weekly\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/backup/#timeshift-for-system-restore","title":"<code>Timeshift</code> for System Restore","text":"<ol> <li> <p>Install Timeshift:    <pre><code>sudo apt install timeshift  # Debian/Ubuntu\nsudo dnf install timeshift  # Fedora\n</code></pre></p> </li> <li> <p>Configure Timeshift:</p> <ul> <li>Launch Timeshift GUI:   <pre><code>sudo timeshift\n</code></pre></li> <li>Select the snapshot type (RSYNC/BTRFS) and configure settings.</li> </ul> </li> <li> <p>Create and Restore Snapshots:</p> <ul> <li>Create a snapshot:   <pre><code>sudo timeshift --create --comments \"Manual backup\"\n</code></pre></li> <li>Restore a snapshot:   <pre><code>sudo timeshift --restore\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/backup/#backup-automation-with-cron","title":"Backup Automation with Cron","text":"<ol> <li>Schedule a Backup Job:<ul> <li>Edit the crontab file:   <pre><code>crontab -e\n</code></pre></li> <li>Add a cron job (example: daily backup at 2 AM):   <pre><code>0 2 * * * /usr/bin/rsync -avh /source/directory /destination/directory\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/backup/#best-practices-for-backup-and-recovery","title":"Best Practices for Backup and Recovery","text":"<ol> <li>Regular Backups: Schedule regular backups to minimize data loss.</li> <li>Offsite Backups: Store backups in a different physical location.</li> <li>Encryption: Encrypt sensitive data backups for security.</li> <li>Testing: Regularly test backup and recovery processes to ensure reliability.</li> <li>Documentation: Document backup and recovery procedures for easy reference.</li> </ol> <p>By using this study sheet, new starters can effectively manage backup and recovery tasks on a Linux system, ensuring data integrity and availability.</p>"},{"location":"linux/admin/cron/","title":"Cron","text":""},{"location":"linux/admin/cron/#cron-jobs-and-scheduled-tasks-study-sheet","title":"Cron Jobs and Scheduled Tasks Study Sheet","text":"<p>Purpose: To provide a quick reference for creating and managing scheduled tasks using cron on a Linux system.</p>"},{"location":"linux/admin/cron/#understanding-cron","title":"Understanding Cron","text":"<ul> <li>Cron: A time-based job scheduler in Unix-like operating systems. Users can schedule jobs (commands or scripts) to run periodically at fixed times, dates, or intervals.</li> <li>Crontab: A file containing the schedule of cron entries. Each user has their own crontab file.</li> </ul>"},{"location":"linux/admin/cron/#cron-syntax","title":"Cron Syntax","text":"<ol> <li> <p>Cron Job Format:    <pre><code>* * * * * command\n</code></pre></p> <ul> <li>Field Breakdown:<ul> <li><code>* * * * *</code>: Minute (0-59), Hour (0-23), Day of Month (1-31), Month (1-12), Day of Week (0-7) (Sunday=0 or 7)</li> <li><code>command</code>: The command to be executed</li> </ul> </li> </ul> </li> <li> <p>Examples:</p> <ul> <li>Run a script every day at 2:30 AM:   <pre><code>30 2 * * * /path/to/script.sh\n</code></pre></li> <li>Run a command every 15 minutes:   <pre><code>*/15 * * * * /path/to/command\n</code></pre></li> <li>Run a task every Monday at 5 PM:   <pre><code>0 17 * * 1 /path/to/task\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/cron/#managing-crontab","title":"Managing Crontab","text":"<ol> <li> <p>Edit Crontab:     <pre><code>crontab -e\n</code></pre></p> <ul> <li>This opens the current user's crontab file in the default text editor.</li> </ul> </li> <li> <p>List Crontab Entries:     <pre><code>crontab -l\n</code></pre></p> <ul> <li>Displays the current user's crontab entries.</li> </ul> </li> <li> <p>Remove Crontab:     <pre><code>crontab -r\n</code></pre></p> <ul> <li>Removes the current user's crontab file.</li> </ul> </li> <li> <p>Edit Crontab for Another User (requires sudo):    <pre><code>sudo crontab -u &lt;username&gt; -e\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/cron/#special-strings-in-cron","title":"Special Strings in Cron","text":"<ul> <li>@reboot: Run once, at startup.     <pre><code>@reboot /path/to/script.sh\n</code></pre></li> <li>@yearly: Run once a year, equivalent to <code>0 0 1 1 *</code>.     <pre><code>@yearly /path/to/script.sh\n</code></pre></li> <li>@monthly: Run once a month, equivalent to <code>0 0 1 * *</code>.     <pre><code>@monthly /path/to/script.sh\n</code></pre></li> <li>@weekly: Run once a week, equivalent to <code>0 0 * * 0</code>.     <pre><code>@weekly /path/to/script.sh\n</code></pre></li> <li>@daily: Run once a day, equivalent to <code>0 0 * * *</code>.     <pre><code>@daily /path/to/script.sh\n</code></pre></li> <li>@hourly: Run once an hour, equivalent to <code>0 * * * *</code>.     <pre><code>@hourly /path/to/script.sh\n</code></pre></li> </ul>"},{"location":"linux/admin/cron/#redirecting-output","title":"Redirecting Output","text":"<ul> <li>Redirect standard output and standard error to a file:     <pre><code>* * * * * /path/to/command &gt;&gt; /path/to/logfile 2&gt;&amp;1\n</code></pre></li> </ul>"},{"location":"linux/admin/cron/#environment-variables-in-crontab","title":"Environment Variables in Crontab","text":"<ul> <li>Setting Variables: You can set environment variables in the crontab file.   <pre><code>PATH=/usr/local/bin:/usr/bin:/bin\nSHELL=/bin/bash\n</code></pre><ul> <li>Example:   <pre><code>PATH=/usr/local/bin:/usr/bin:/bin\nSHELL=/bin/bash\n0 5 * * * /path/to/command\n</code></pre></li> </ul> </li> </ul>"},{"location":"linux/admin/cron/#anacron","title":"Anacron","text":"<ul> <li>Anacron: Similar to cron but used for tasks that need to be run periodically with a guarantee that they will be executed, even if the system is down for some period.</li> <li>Configuration Files:<ul> <li><code>/etc/anacrontab</code>: Main configuration file for anacron.</li> <li>Example:   <pre><code># /etc/anacrontab: configuration file for anacron\n\n# period   delay   job-identifier   command\n1         5       cron.daily       run-parts /etc/cron.daily\n7         10      cron.weekly      run-parts /etc/cron.weekly\n30        15      cron.monthly     run-parts /etc/cron.monthly\n</code></pre></li> </ul> </li> </ul>"},{"location":"linux/admin/cron/#common-commands-and-tips","title":"Common Commands and Tips","text":"<ol> <li> <p>Check Cron Logs:</p> <ul> <li>Syslog:   <pre><code>sudo grep CRON /var/log/syslog\n</code></pre></li> <li>Journalctl (systemd-based systems):   <pre><code>sudo journalctl -u cron\n</code></pre></li> </ul> </li> <li> <p>Testing Cron Jobs:</p> <ul> <li>Ensure the script or command works by running it manually before scheduling.</li> <li>Include <code>echo</code> statements or logging within the script to verify execution.</li> </ul> </li> </ol> <p>By using this study sheet, new starters can efficiently create, manage, and troubleshoot cron jobs, ensuring tasks are scheduled and executed as needed on a Linux system.</p>"},{"location":"linux/admin/disk/","title":"Disk","text":""},{"location":"linux/admin/disk/#linux-disk-management-study-sheet","title":"Linux Disk Management Study Sheet","text":"<p>Purpose: To provide a quick reference for managing disks and filesystems on a Linux system.</p>"},{"location":"linux/admin/disk/#viewing-disk-information","title":"Viewing Disk Information","text":"<ol> <li> <p>View Disk Partitions:    <pre><code>lsblk\n</code></pre></p> <ul> <li>Alternative command:   <pre><code>fdisk -l\n</code></pre></li> </ul> </li> <li> <p>View Disk Usage:    <pre><code>df -h\n</code></pre></p> </li> <li> <p>View Inode Usage:    <pre><code>df -i\n</code></pre></p> </li> <li> <p>View Block Device Attributes:    <pre><code>lsblk -f\n</code></pre></p> </li> <li> <p>View Filesystem Type:    <pre><code>blkid\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/disk/#partitioning-disks","title":"Partitioning Disks","text":"<ol> <li> <p>Using <code>fdisk</code>:</p> <ul> <li>Open <code>fdisk</code> for a specific disk:   <pre><code>sudo fdisk /dev/sdX\n</code></pre></li> <li>Common <code>fdisk</code> commands:</li> <li><code>n</code>: Add a new partition</li> <li><code>d</code>: Delete a partition</li> <li><code>p</code>: Print the partition table</li> <li><code>w</code>: Write changes and exit</li> </ul> </li> <li> <p>Using <code>parted</code>:</p> <ul> <li>Open <code>parted</code> for a specific disk:   <pre><code>sudo parted /dev/sdX\n</code></pre></li> <li>Common <code>parted</code> commands:</li> <li><code>print</code>: Display the partition table</li> <li><code>mklabel gpt</code>: Create a new GPT partition table</li> <li><code>mkpart primary ext4 0% 100%</code>: Create a primary partition spanning the entire disk</li> <li><code>quit</code>: Exit <code>parted</code></li> </ul> </li> </ol>"},{"location":"linux/admin/disk/#creating-filesystems","title":"Creating Filesystems","text":"<ol> <li> <p>Create an ext4 Filesystem:    <pre><code>sudo mkfs.ext4 /dev/sdX1\n</code></pre></p> </li> <li> <p>Create an XFS Filesystem:    <pre><code>sudo mkfs.xfs /dev/sdX1\n</code></pre></p> </li> <li> <p>Create a Btrfs Filesystem:    <pre><code>sudo mkfs.btrfs /dev/sdX1\n</code></pre></p> </li> <li> <p>Create a Swap Partition:    <pre><code>sudo mkswap /dev/sdX2\nsudo swapon /dev/sdX2\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/disk/#mounting-and-unmounting-filesystems","title":"Mounting and Unmounting Filesystems","text":"<ol> <li> <p>Mount a Filesystem:    <pre><code>sudo mount /dev/sdX1 /mnt\n</code></pre></p> </li> <li> <p>Unmount a Filesystem:    <pre><code>sudo umount /mnt\n</code></pre></p> </li> <li> <p>View Mounted Filesystems:    <pre><code>mount | column -t\n</code></pre></p> </li> <li> <p>Mount a Filesystem at Boot:</p> <ul> <li>Edit <code>/etc/fstab</code>:   <pre><code>sudo nano /etc/fstab\n</code></pre></li> <li>Add an entry:   <pre><code>/dev/sdX1 /mnt ext4 defaults 0 2\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/disk/#resizing-partitions-and-filesystems","title":"Resizing Partitions and Filesystems","text":"<ol> <li> <p>Resize an ext4 Filesystem:</p> <ul> <li>Increase:   <pre><code>sudo resize2fs /dev/sdX1\n</code></pre></li> <li>Decrease (unmount first):   <pre><code>sudo umount /dev/sdX1\nsudo resize2fs /dev/sdX1 &lt;size&gt;\nsudo mount /dev/sdX1\n</code></pre></li> </ul> </li> <li> <p>Resize an XFS Filesystem:</p> <ul> <li>Increase:   <pre><code>sudo xfs_growfs /mnt\n</code></pre></li> <li>Decrease: XFS does not support shrinking.</li> </ul> </li> <li> <p>Resize a Partition (using <code>parted</code>):</p> <ul> <li>Open <code>parted</code>:   <pre><code>sudo parted /dev/sdX\n</code></pre></li> <li>Resize partition:   <pre><code>resizepart PARTITION_NUMBER END\n</code></pre></li> <li>Adjust the filesystem size as necessary.</li> </ul> </li> </ol>"},{"location":"linux/admin/disk/#managing-lvm-logical-volume-manager","title":"Managing LVM (Logical Volume Manager)","text":"<ol> <li> <p>Create Physical Volume:    <pre><code>sudo pvcreate /dev/sdX1\n</code></pre></p> </li> <li> <p>Create Volume Group:    <pre><code>sudo vgcreate my_vg /dev/sdX1\n</code></pre></p> </li> <li> <p>Create Logical Volume:    <pre><code>sudo lvcreate -L 10G -n my_lv my_vg\n</code></pre></p> </li> <li> <p>Extend Logical Volume:    <pre><code>sudo lvextend -L +5G /dev/my_vg/my_lv\nsudo resize2fs /dev/my_vg/my_lv\n</code></pre></p> </li> <li> <p>Reduce Logical Volume:</p> <ul> <li>Unmount the filesystem first:   <pre><code>sudo umount /dev/my_vg/my_lv\nsudo resize2fs /dev/my_vg/my_lv &lt;new_size&gt;\nsudo lvreduce -L &lt;new_size&gt; /dev/my_vg/my_lv\nsudo mount /dev/my_vg/my_lv\n</code></pre></li> </ul> </li> <li> <p>Remove Logical Volume:    <pre><code>sudo lvremove /dev/my_vg/my_lv\n</code></pre></p> </li> <li> <p>Remove Volume Group:    <pre><code>sudo vgremove my_vg\n</code></pre></p> </li> <li> <p>Remove Physical Volume:    <pre><code>sudo pvremove /dev/sdX1\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can effectively manage disks and filesystems on a Linux system, ensuring proper storage configuration and maintenance.</p>"},{"location":"linux/admin/files/","title":"Files","text":""},{"location":"linux/admin/files/#linux-file-permissions-study-sheet","title":"Linux File Permissions Study Sheet","text":"<p>Purpose: To provide a quick reference for understanding and managing file permissions in Linux.</p>"},{"location":"linux/admin/files/#understanding-file-permissions","title":"Understanding File Permissions","text":"<ol> <li> <p>Permission Types:</p> <ul> <li>r: Read - allows reading the file or listing the directory.</li> <li>w: Write - allows modifying the file or directory.</li> <li>x: Execute - allows executing the file or entering the directory.</li> </ul> </li> <li> <p>Permission Groups:</p> <ul> <li>User (u): The owner of the file.</li> <li>Group (g): Users who are members of the file's group.</li> <li>Others (o): All other users.</li> </ul> </li> <li> <p>Permission Structure:</p> <ul> <li>Displayed using <code>ls -l</code>:   <pre><code>-rwxr-xr--\n</code></pre></li> <li>Breakdown:</li> <li>-: File type (e.g., <code>-</code> for a regular file, <code>d</code> for a directory).</li> <li>rwx: User permissions.</li> <li>r-x: Group permissions.</li> <li>r--: Other permissions.</li> </ul> </li> </ol>"},{"location":"linux/admin/files/#viewing-permissions","title":"Viewing Permissions","text":"<ol> <li> <p>List File Permissions:    <pre><code>ls -l &lt;filename&gt;\n</code></pre></p> </li> <li> <p>List Directory Permissions:    <pre><code>ls -ld &lt;directory&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/files/#changing-permissions","title":"Changing Permissions","text":"<ol> <li> <p>Using Symbolic Notation:</p> <ul> <li>Add permission:   <pre><code>chmod u+x &lt;filename&gt;  # Add execute permission to the user\nchmod g+w &lt;filename&gt;  # Add write permission to the group\nchmod o+r &lt;filename&gt;  # Add read permission to others\n</code></pre></li> <li>Remove permission:   <pre><code>chmod u-x &lt;filename&gt;  # Remove execute permission from the user\nchmod g-w &lt;filename&gt;  # Remove write permission from the group\nchmod o-r &lt;filename&gt;  # Remove read permission from others\n</code></pre></li> <li>Set exact permission:   <pre><code>chmod u=rwx,g=rx,o=r &lt;filename&gt;\n</code></pre></li> </ul> </li> <li> <p>Using Numeric Notation:</p> <ul> <li>Permissions are represented by a three-digit octal number.</li> <li>r = 4, w = 2, x = 1.</li> <li> <p>Combine values to set permissions (e.g., <code>rwx = 4+2+1 = 7</code>).</p> </li> <li> <p>Set permissions:   <pre><code>chmod 755 &lt;filename&gt;  # User: rwx, Group: rx, Others: r\nchmod 644 &lt;filename&gt;  # User: rw, Group: r, Others: r\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"linux/admin/files/#changing-ownership","title":"Changing Ownership","text":"<ol> <li> <p>Change File Owner:    <pre><code>chown &lt;new-owner&gt; &lt;filename&gt;\n</code></pre></p> </li> <li> <p>Change File Group:    <pre><code>chown :&lt;new-group&gt; &lt;filename&gt;\n</code></pre></p> </li> <li> <p>Change Owner and Group:    <pre><code>chown &lt;new-owner&gt;:&lt;new-group&gt; &lt;filename&gt;\n</code></pre></p> </li> <li> <p>Recursive Ownership Change:    <pre><code>chown -R &lt;new-owner&gt;:&lt;new-group&gt; &lt;directory&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/files/#special-permissions","title":"Special Permissions","text":"<ol> <li> <p>Setuid (Set User ID):</p> <ul> <li>Execute file as the owner, not as the user who runs it.   <pre><code>chmod u+s &lt;filename&gt;\n</code></pre></li> </ul> </li> <li> <p>Setgid (Set Group ID):</p> <ul> <li>New files in the directory inherit the group of the directory.   <pre><code>chmod g+s &lt;directory&gt;\n</code></pre></li> </ul> </li> <li> <p>Sticky Bit:</p> <ul> <li>Only the file owner can delete files in the directory.   <pre><code>chmod +t &lt;directory&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/files/#viewing-and-setting-special-permissions","title":"Viewing and Setting Special Permissions","text":"<ol> <li> <p>Viewing Special Permissions:    <pre><code>ls -l &lt;filename&gt;  # Look for 's' (setuid/setgid) or 't' (sticky bit)\n</code></pre></p> </li> <li> <p>Setting Special Permissions (Numeric Notation):</p> <ul> <li>Setuid: 4</li> <li>Setgid: 2</li> <li>Sticky Bit: 1   <pre><code>chmod 4755 &lt;filename&gt;  # Setuid\nchmod 2755 &lt;directory&gt;  # Setgid\nchmod 1755 &lt;directory&gt;  # Sticky bit\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can effectively manage and understand file permissions in Linux, ensuring proper access control and security.</p>"},{"location":"linux/admin/security/","title":"Security","text":""},{"location":"linux/admin/security/#security-and-access-control-study-sheet","title":"Security and Access Control Study Sheet","text":"<p>Purpose: To provide a quick reference for enhancing security and managing access control on a Linux system.</p>"},{"location":"linux/admin/security/#basic-security-practices","title":"Basic Security Practices","text":"<ol> <li> <p>Regular Updates:</p> <ul> <li>Keep the system updated to protect against vulnerabilities.   <pre><code>sudo apt update &amp;&amp; sudo apt upgrade   # Debian/Ubuntu\nsudo yum update                       # Red Hat/CentOS\nsudo dnf update                       # Fedora\n</code></pre></li> </ul> </li> <li> <p>User Management:</p> <ul> <li>Create a new user:   <pre><code>sudo adduser &lt;username&gt;\n</code></pre></li> <li>Grant sudo privileges:   <pre><code>sudo usermod -aG sudo &lt;username&gt;      # Debian/Ubuntu\nsudo usermod -aG wheel &lt;username&gt;     # Red Hat/CentOS\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#firewall-configuration","title":"Firewall Configuration","text":"<ol> <li> <p>Using UFW (Uncomplicated Firewall):</p> <ul> <li>Enable UFW:   <pre><code>sudo ufw enable\n</code></pre></li> <li>Allow specific services:   <pre><code>sudo ufw allow ssh\nsudo ufw allow http\nsudo ufw allow https\n</code></pre></li> <li>Check UFW status:   <pre><code>sudo ufw status\n</code></pre></li> </ul> </li> <li> <p>Using iptables:</p> <ul> <li>Allow incoming SSH connections:   <pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n</code></pre></li> <li>Save iptables rules (Debian/Ubuntu):   <pre><code>sudo iptables-save | sudo tee /etc/iptables/rules.v4\n</code></pre></li> <li>Save iptables rules (Red Hat/CentOS):   <pre><code>sudo service iptables save\n</code></pre></li> </ul> </li> <li> <p>Using firewalld:</p> <ul> <li>Start and enable firewalld:   <pre><code>sudo systemctl start firewalld\nsudo systemctl enable firewalld\n</code></pre></li> <li>Allow a service (e.g., SSH):   <pre><code>sudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n</code></pre></li> <li>Check firewalld status:   <pre><code>sudo firewall-cmd --state\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#ssh-configuration","title":"SSH Configuration","text":"<ol> <li> <p>Configure SSH Daemon:</p> <ul> <li>Edit SSH configuration:   <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre></li> <li>Disable root login:   <pre><code>PermitRootLogin no\n</code></pre></li> <li>Change the default SSH port:   <pre><code>Port 2222\n</code></pre></li> <li>Restrict user access:   <pre><code>AllowUsers &lt;username&gt;\n</code></pre></li> </ul> </li> <li> <p>Restart SSH Service:    <pre><code>sudo systemctl restart sshd\n</code></pre></p> </li> <li> <p>Set Up SSH Key Authentication:</p> <ul> <li>Generate SSH key pair on the client:   <pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre></li> <li>Copy the public key to the server:   <pre><code>ssh-copy-id &lt;username&gt;@&lt;server-ip&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#intrusion-detection","title":"Intrusion Detection","text":"<ol> <li> <p>Install and Configure Fail2Ban:</p> <ul> <li>Install Fail2Ban:   <pre><code>sudo apt install fail2ban   # Debian/Ubuntu\nsudo yum install fail2ban   # Red Hat/CentOS\n</code></pre></li> <li>Configure Fail2Ban:   <pre><code>sudo nano /etc/fail2ban/jail.local\n</code></pre></li> <li>Example configuration:   <pre><code>[sshd]\nenabled = true\nport = 22\nlogpath = /var/log/auth.log\nbantime = 600\nmaxretry = 3\n</code></pre></li> <li>Start and enable Fail2Ban:   <pre><code>sudo systemctl start fail2ban\nsudo systemctl enable fail2ban\n</code></pre></li> </ul> </li> <li> <p>Install and Configure AIDE (Advanced Intrusion Detection Environment):</p> <ul> <li>Install AIDE:   <pre><code>sudo apt install aide   # Debian/Ubuntu\nsudo yum install aide   # Red Hat/CentOS\n</code></pre></li> <li>Initialize AIDE database:   <pre><code>sudo aide --init\n</code></pre></li> <li>Move the new database to the default location:   <pre><code>sudo mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n</code></pre></li> <li>Perform a manual check:   <pre><code>sudo aide --check\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#access-control-with-selinux-and-apparmor","title":"Access Control with SELinux and AppArmor","text":"<ol> <li> <p>SELinux:</p> <ul> <li>Check SELinux status:   <pre><code>sestatus\n</code></pre></li> <li>Change SELinux mode (temporarily):   <pre><code>sudo setenforce 0   # Permissive mode\nsudo setenforce 1   # Enforcing mode\n</code></pre></li> <li>Configure SELinux mode permanently:   <pre><code>sudo nano /etc/selinux/config\n</code></pre></li> <li>Change <code>SELINUX</code> directive:     <pre><code>SELINUX=enforcing   # or permissive or disabled\n</code></pre></li> </ul> </li> <li> <p>AppArmor:</p> <ul> <li>Check AppArmor status:   <pre><code>sudo apparmor_status\n</code></pre></li> <li>Enable or disable a profile:   <pre><code>sudo aa-enforce /etc/apparmor.d/&lt;profile&gt;\nsudo aa-disable /etc/apparmor.d/&lt;profile&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#data-encryption","title":"Data Encryption","text":"<ol> <li>Encrypt Partitions with LUKS:<ul> <li>Install cryptsetup:   <pre><code>sudo apt install cryptsetup   # Debian/Ubuntu\nsudo yum install cryptsetup   # Red Hat/CentOS\n</code></pre></li> <li>Encrypt a partition:   <pre><code>sudo cryptsetup luksFormat /dev/sdX\n</code></pre></li> <li>Open the encrypted partition:   <pre><code>sudo cryptsetup luksOpen /dev/sdX my_encrypted_partition\n</code></pre></li> <li>Create a filesystem:   <pre><code>sudo mkfs.ext4 /dev/mapper/my_encrypted_partition\n</code></pre></li> <li>Mount the encrypted partition:   <pre><code>sudo mount /dev/mapper/my_encrypted_partition /mnt\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/security/#auditing-and-logging","title":"Auditing and Logging","text":"<ol> <li> <p>Set Up Auditd:</p> <ul> <li>Install auditd:   <pre><code>sudo apt install auditd   # Debian/Ubuntu\nsudo yum install audit    # Red Hat/CentOS\n</code></pre></li> <li>Start and enable auditd:   <pre><code>sudo systemctl start auditd\nsudo systemctl enable auditd\n</code></pre></li> <li>Configure audit rules:   <pre><code>sudo nano /etc/audit/audit.rules\n</code></pre></li> <li>Example rules:   <pre><code>-w /etc/passwd -p wa -k passwd_changes\n-w /var/log/auth.log -p wa -k auth_logs\n</code></pre></li> </ul> </li> <li> <p>Log Management with rsyslog:</p> <ul> <li>Configure rsyslog:   <pre><code>sudo nano /etc/rsyslog.conf\n</code></pre></li> <li>Example configuration:   <pre><code>*.info;mail.none;authpriv.none;cron.none                /var/log/messages\nauthpriv.*                                              /var/log/secure\nmail.*                                                  -/var/log/maillog\ncron.*                                                  /var/log/cron\n</code></pre></li> <li>Restart rsyslog:   <pre><code>sudo systemctl restart rsyslog\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can effectively secure and manage access control on a Linux system, ensuring proper protection and monitoring of the system.</p>"},{"location":"linux/admin/systemd/","title":"Systemd","text":""},{"location":"linux/admin/systemd/#systemd-service-management-study-sheet","title":"Systemd Service Management Study Sheet","text":"<p>Purpose: To provide a quick reference for managing system services using <code>systemd</code> on a Linux system.</p>"},{"location":"linux/admin/systemd/#basic-systemd-commands","title":"Basic Systemd Commands","text":"<ol> <li> <p>Start a Service:    <pre><code>sudo systemctl start &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Stop a Service:    <pre><code>sudo systemctl stop &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Restart a Service:    <pre><code>sudo systemctl restart &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Reload Service Configuration:    <pre><code>sudo systemctl reload &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Enable a Service to Start at Boot:    <pre><code>sudo systemctl enable &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Disable a Service from Starting at Boot:    <pre><code>sudo systemctl disable &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>Check the Status of a Service:    <pre><code>sudo systemctl status &lt;service-name&gt;\n</code></pre></p> </li> <li> <p>List All Active Services:    <pre><code>sudo systemctl list-units --type=service --state=active\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/systemd/#managing-service-units","title":"Managing Service Units","text":"<ol> <li> <p>View Unit Files:    <pre><code>sudo systemctl list-unit-files --type=service\n</code></pre></p> </li> <li> <p>Create a Custom Service:</p> <ul> <li>Create a new unit file in <code>/etc/systemd/system/</code>.</li> <li>Example: <code>/etc/systemd/system/my-service.service</code> <pre><code>[Unit]\nDescription=My Custom Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/my-service\nRestart=on-failure\nUser=myuser\nGroup=mygroup\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></li> </ul> </li> <li> <p>Reload Systemd Configuration:    <pre><code>sudo systemctl daemon-reload\n</code></pre></p> </li> <li> <p>Start and Enable the Custom Service:    <pre><code>sudo systemctl start my-service\nsudo systemctl enable my-service\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/systemd/#service-management-examples","title":"Service Management Examples","text":"<ol> <li> <p>Check the Status of the SSH Service:    <pre><code>sudo systemctl status ssh\n</code></pre></p> </li> <li> <p>Restart the Network Service:    <pre><code>sudo systemctl restart network\n</code></pre></p> </li> <li> <p>Enable the Apache Service to Start at Boot:    <pre><code>sudo systemctl enable httpd\n</code></pre></p> </li> <li> <p>Stop and Disable the MySQL Service:    <pre><code>sudo systemctl stop mysqld\nsudo systemctl disable mysqld\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/systemd/#troubleshooting-systemd-services","title":"Troubleshooting Systemd Services","text":"<ol> <li> <p>View Service Logs:</p> <ul> <li>Use <code>journalctl</code> to view logs for a specific service.   <pre><code>sudo journalctl -u &lt;service-name&gt;\n</code></pre></li> <li>Example: View logs for the nginx service.   <pre><code>sudo journalctl -u nginx\n</code></pre></li> </ul> </li> <li> <p>Analyze Failed Services:</p> <ul> <li>List failed services.   <pre><code>sudo systemctl --failed\n</code></pre></li> <li>Example: View details of a failed service.   <pre><code>sudo systemctl status &lt;failed-service-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Debugging a Service:</p> <ul> <li>Run a service in debug mode.   <pre><code>sudo systemctl edit &lt;service-name&gt;\n</code></pre></li> <li>Add the following under <code>[Service]</code>:   <pre><code>[Service]\nEnvironment=SYSTEMD_LOG_LEVEL=debug\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/systemd/#useful-commands-and-tips","title":"Useful Commands and Tips","text":"<ol> <li> <p>Check All Active Units:    <pre><code>systemctl list-units\n</code></pre></p> </li> <li> <p>Mask a Service:</p> <ul> <li>Prevent a service from being started.   <pre><code>sudo systemctl mask &lt;service-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Unmask a Service:</p> <ul> <li>Allow a previously masked service to be started.   <pre><code>sudo systemctl unmask &lt;service-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Isolate a Target:</p> <ul> <li>Change the system state to a specific target (similar to runlevels).   <pre><code>sudo systemctl isolate &lt;target&gt;\n</code></pre></li> </ul> </li> <li> <p>Set Default Target:</p> <ul> <li>Set the default target to multi-user (equivalent to runlevel 3).   <pre><code>sudo systemctl set-default multi-user.target\n</code></pre></li> <li>Set the default target to graphical (equivalent to runlevel 5).   <pre><code>sudo systemctl set-default graphical.target\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can effectively manage system services using <code>systemd</code>, ensuring proper operation and configuration of essential system services.</p>"},{"location":"linux/admin/users/","title":"Users","text":""},{"location":"linux/admin/users/#linux-user-configuration-study-sheet","title":"Linux User Configuration Study Sheet","text":"<p>Purpose: To provide a quick reference for managing user accounts and groups on a Linux system.</p>"},{"location":"linux/admin/users/#creating-and-managing-users","title":"Creating and Managing Users","text":"<ol> <li> <p>Create a New User:       <pre><code>sudo useradd &lt;username&gt;\n</code></pre></p> <ul> <li>With home directory creation:   <pre><code>sudo useradd -m &lt;username&gt;\n</code></pre></li> <li>With a specific shell:   <pre><code>sudo useradd -s /bin/bash &lt;username&gt;\n</code></pre></li> <li>With a specific home directory:   <pre><code>sudo useradd -m -d /home/&lt;username&gt; &lt;username&gt;\n</code></pre></li> </ul> </li> <li> <p>Set User Password:    <pre><code>sudo passwd &lt;username&gt;\n</code></pre></p> </li> <li> <p>Modify User Account:</p> <ul> <li>Change user's shell:   <pre><code>sudo usermod -s /bin/zsh &lt;username&gt;\n</code></pre></li> <li>Change user's home directory:   <pre><code>sudo usermod -d /new/home/directory &lt;username&gt;\n</code></pre></li> <li>Lock user account:   <pre><code>sudo usermod -L &lt;username&gt;\n</code></pre></li> <li>Unlock user account:   <pre><code>sudo usermod -U &lt;username&gt;\n</code></pre></li> </ul> </li> <li> <p>Delete a User:       <pre><code>sudo userdel &lt;username&gt;\n</code></pre></p> <ul> <li>Delete user along with home directory and mail spool:   <pre><code>sudo userdel -r &lt;username&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/users/#managing-groups","title":"Managing Groups","text":"<ol> <li> <p>Create a New Group:    <pre><code>sudo groupadd &lt;groupname&gt;\n</code></pre></p> </li> <li> <p>Add User to Group:    <pre><code>sudo usermod -aG &lt;groupname&gt; &lt;username&gt;\n</code></pre></p> </li> <li> <p>Remove User from Group:    <pre><code>sudo gpasswd -d &lt;username&gt; &lt;groupname&gt;\n</code></pre></p> </li> <li> <p>Change User's Primary Group:    <pre><code>sudo usermod -g &lt;groupname&gt; &lt;username&gt;\n</code></pre></p> </li> <li> <p>Delete a Group:    <pre><code>sudo groupdel &lt;groupname&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/users/#viewing-user-and-group-information","title":"Viewing User and Group Information","text":"<ol> <li> <p>List All Users:    <pre><code>cut -d: -f1 /etc/passwd\n</code></pre></p> </li> <li> <p>View User Information:    <pre><code>id &lt;username&gt;\n</code></pre></p> </li> <li> <p>Detailed user information:      <pre><code>getent passwd &lt;username&gt;\n</code></pre></p> </li> <li> <p>List All Groups:    <pre><code>cut -d: -f1 /etc/group\n</code></pre></p> </li> <li> <p>View Group Information:    <pre><code>getent group &lt;groupname&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/admin/users/#user-and-group-configuration-files","title":"User and Group Configuration Files","text":"<ol> <li> <p>/etc/passwd:</p> <ul> <li>Contains user account information.</li> <li>Format: <code>username:x:UID:GID:comment:home_directory:shell</code></li> <li>Example entry:   <pre><code>jan:x:1001:1001:Jan:/home/jan:/bin/bash\n</code></pre></li> </ul> </li> <li> <p>/etc/shadow:</p> <ul> <li>Contains secure user account information.</li> <li>Format: <code>username:password:last_change:min:max:warn:inactive:expire:flag</code></li> <li>Example entry:   <pre><code>jan:$6$saltsaltsaltsalt$hashedpassword:18449:0:99999:7:::\n</code></pre></li> </ul> </li> <li> <p>/etc/group:</p> <ul> <li>Contains group account information.</li> <li>Format: <code>groupname:x:GID:member1,member2,member3</code></li> <li>Example entry:   <pre><code>sudo:x:27:jan\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/admin/users/#common-tasks","title":"Common Tasks","text":"<ol> <li> <p>Switch User:    <pre><code>su - &lt;username&gt;\n</code></pre></p> </li> <li> <p>Execute Command as Another User:    <pre><code>sudo -u &lt;username&gt; &lt;command&gt;\n</code></pre></p> </li> <li> <p>Display Logged-in Users:    <pre><code>who\n</code></pre></p> </li> <li> <p>Show User's Last Login:    <pre><code>lastlog -u &lt;username&gt;\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can efficiently manage user and group configurations on a Linux system, ensuring proper account setup and maintenance.</p>"},{"location":"linux/containers/container-like/","title":"Container like","text":""},{"location":"linux/containers/container-like/#container-like-features-on-linux-without-using-docker","title":"Container-like Features on Linux Without Using Docker","text":"<p>Purpose: To provide a quick reference for using container-like features on Linux without relying on Docker.</p>"},{"location":"linux/containers/container-like/#overview","title":"Overview","text":"<p>Linux offers several tools and technologies that provide container-like features, allowing for application isolation, resource control, and process management without using Docker. These tools include LXC/LXD, systemd-nspawn, chroot, and namespaces with cgroups.</p>"},{"location":"linux/containers/container-like/#lxc-linux-containers","title":"LXC (Linux Containers)","text":"<ol> <li> <p>Install LXC:</p> <ul> <li>Debian/Ubuntu:   <pre><code>sudo apt update\nsudo apt install lxc\n</code></pre></li> <li>Red Hat/CentOS:   <pre><code>sudo yum install epel-release\nsudo yum install lxc\n</code></pre></li> </ul> </li> <li> <p>Create and Start a Container:     <pre><code>sudo lxc-create -t download -n mycontainer -- -d ubuntu -r focal -a amd64\nsudo lxc-start -n mycontainer\n</code></pre></p> </li> <li> <p>Attach to a Running Container:     <pre><code>sudo lxc-attach -n mycontainer\n</code></pre></p> </li> <li> <p>List Containers:     <pre><code>sudo lxc-ls -f\n</code></pre></p> </li> <li> <p>Stop and Destroy a Container:     <pre><code>sudo lxc-stop -n mycontainer\nsudo lxc-destroy -n mycontainer\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/container-like/#lxd-linux-container-daemon","title":"LXD (Linux Container Daemon)","text":"<ol> <li> <p>Install LXD:</p> <ul> <li>Debian/Ubuntu:   <pre><code>sudo apt update\nsudo apt install lxd\nsudo lxd init\n</code></pre></li> </ul> </li> <li> <p>Launch and Manage Containers:</p> <ul> <li>Launch a container:   <pre><code>lxc launch ubuntu:20.04 mycontainer\n</code></pre></li> <li>List containers:   <pre><code>lxc list\n</code></pre></li> <li>Execute a command in a container:   <pre><code>lxc exec mycontainer -- /bin/bash\n</code></pre></li> <li>Stop and delete a container:   <pre><code>lxc stop mycontainer\nlxc delete mycontainer\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/container-like/#systemd-nspawn","title":"Systemd-nspawn","text":"<ol> <li> <p>Install Systemd-nspawn:</p> <ul> <li>Debian/Ubuntu:   <pre><code>sudo apt update\nsudo apt install systemd-container\n</code></pre></li> <li>Red Hat/CentOS:   <pre><code>sudo yum install systemd-container\n</code></pre></li> </ul> </li> <li> <p>Create and Start a Container:</p> <ul> <li>Create a directory for the container's root filesystem:   <pre><code>mkdir -p /var/lib/machines/mycontainer\n</code></pre></li> <li>Bootstrap a minimal Linux system into this directory (example with <code>debootstrap</code> for Debian/Ubuntu):   <pre><code>sudo debootstrap --arch=amd64 focal /var/lib/machines/mycontainer http://archive.ubuntu.com/ubuntu/\n</code></pre></li> <li>Start the container:   <pre><code>sudo systemd-nspawn -b -D /var/lib/machines/mycontainer\n</code></pre></li> </ul> </li> <li> <p>Manage Containers:</p> <ul> <li>List running containers:   <pre><code>machinectl list\n</code></pre></li> <li>Stop a container:   <pre><code>machinectl poweroff mycontainer\n</code></pre></li> <li>Enter a running container:   <pre><code>machinectl shell mycontainer\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/container-like/#chroot","title":"Chroot","text":"<ol> <li> <p>Create a Chroot Environment:</p> <ul> <li>Create a directory for the chroot environment:   <pre><code>sudo mkdir -p /mychroot\n</code></pre></li> <li>Bootstrap a minimal Linux system into this directory (example with <code>debootstrap</code> for Debian/Ubuntu):   <pre><code>sudo debootstrap --arch=amd64 focal /mychroot http://archive.ubuntu.com/ubuntu/\n</code></pre></li> </ul> </li> <li> <p>Enter the Chroot Environment:     <pre><code>sudo chroot /mychroot /bin/bash\n</code></pre></p> </li> <li> <p>Exit the Chroot Environment:     <pre><code>exit\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/container-like/#namespaces-and-cgroups","title":"Namespaces and Cgroups","text":"<ol> <li> <p>Using <code>unshare</code> to Create Isolated Environments:</p> <ul> <li>Install <code>util-linux</code> (if not already installed):   <pre><code>sudo apt update\nsudo apt install util-linux\n</code></pre></li> <li>Create a new namespace for process isolation:   <pre><code>sudo unshare --fork --pid --mount-proc /bin/bash\n</code></pre></li> </ul> </li> <li> <p>Using Cgroups for Resource Limitation:</p> <ul> <li>Install <code>cgroup-tools</code> (if not already installed):   <pre><code>sudo apt update\nsudo apt install cgroup-tools\n</code></pre></li> <li>Create a new cgroup and limit CPU usage:   <pre><code>sudo cgcreate -g cpu:/mycgroup\nsudo cgset -r cpu.shares=512 mycgroup\nsudo cgexec -g cpu:/mycgroup /bin/bash\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/container-like/#advantages-and-disadvantages","title":"Advantages and Disadvantages","text":"<p>Advantages:</p> <ul> <li>Lightweight: No need to install Docker; uses existing Linux features.</li> <li>Flexibility: Fine-grained control over isolation and resource management.</li> <li>Compatibility: Works on systems where Docker might not be available or suitable.</li> </ul> <p>Disadvantages:</p> <ul> <li>Complexity: Requires more manual setup and configuration compared to Docker.</li> <li>Ecosystem: Lack of a unified toolset and ecosystem that Docker provides.</li> <li>Ease of Use: Higher learning curve and less straightforward usage compared to Docker.</li> </ul> <p>By using these tools and techniques, new starters can achieve container-like functionality on Linux systems without relying on Docker, providing flexibility and control over their environments.</p>"},{"location":"linux/containers/docker-config/","title":"Docker config","text":""},{"location":"linux/containers/docker-config/#docker-configuration-study-sheet","title":"Docker Configuration Study Sheet","text":"<p>Purpose: To provide a quick reference for configuring Docker on a Linux system.</p>"},{"location":"linux/containers/docker-config/#basic-configuration","title":"Basic Configuration","text":"<ol> <li> <p>Docker Installation:</p> <ul> <li>Debian/Ubuntu:   <pre><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></li> <li>Red Hat/CentOS:   <pre><code>sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></li> </ul> </li> <li> <p>Add User to Docker Group:     <pre><code>sudo usermod -aG docker &lt;username&gt;\n</code></pre></p> <ul> <li>Apply changes:   <pre><code>newgrp docker\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker-config/#daemon","title":"Daemon","text":"<ol> <li> <p>Edit Docker Daemon Configuration:</p> <ul> <li>Configuration file: <code>/etc/docker/daemon.json</code></li> <li>Open the configuration file:   <pre><code>sudo nano /etc/docker/daemon.json\n</code></pre></li> <li>Example configuration:   <pre><code>{\n  \"data-root\": \"/var/lib/docker\",\n  \"log-level\": \"warn\",\n  \"storage-driver\": \"overlay2\",\n  \"insecure-registries\" : [\"myregistrydomain.com:5000\"],\n  \"registry-mirrors\": [\"https://registry-mirror.example.com\"],\n  \"dns\": [\"8.8.8.8\", \"8.8.4.4\"]\n}\n</code></pre></li> </ul> </li> <li> <p>Restart Docker to Apply Changes:     <pre><code>sudo systemctl restart docker\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker-config/#network","title":"Network","text":"<ol> <li> <p>Configure Docker Networking:</p> <ul> <li>Default bridge network configuration file: <code>/etc/docker/daemon.json</code></li> <li>Example to configure default bridge IP range:   <pre><code>{\n  \"bip\": \"192.168.1.5/24\"\n}\n</code></pre></li> </ul> </li> <li> <p>Custom Docker Network:</p> <ul> <li>Create a new bridge network:   <pre><code>docker network create --driver bridge my_bridge\n</code></pre></li> <li>Assign a specific subnet to the network:   <pre><code>docker network create --subnet=192.168.1.0/24 my_custom_network\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker-config/#storage","title":"Storage","text":"<ol> <li> <p>Configure Docker Storage Driver:</p> <ul> <li>Supported storage drivers: <code>overlay2</code>, <code>aufs</code>, <code>devicemapper</code>, <code>btrfs</code>, <code>zfs</code></li> <li>Set storage driver in <code>/etc/docker/daemon.json</code>:   <pre><code>{\n  \"storage-driver\": \"overlay2\"\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> <li> <p>Changing Docker Data Root:</p> <ul> <li>Change data root directory in <code>/etc/docker/daemon.json</code>:   <pre><code>{\n  \"data-root\": \"/mnt/docker-data\"\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker-config/#logging","title":"Logging","text":"<ol> <li>Configure Docker Logging Driver:<ul> <li>Supported logging drivers: <code>json-file</code>, <code>syslog</code>, <code>journald</code>, <code>gelf</code>, <code>fluentd</code>, <code>awslogs</code>, <code>splunk</code>, <code>etwlogs</code></li> <li>Set logging driver in <code>/etc/docker/daemon.json</code>:   <pre><code>{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker-config/#registry","title":"Registry","text":"<ol> <li> <p>Configure Insecure Registries:</p> <ul> <li>Add insecure registries in <code>/etc/docker/daemon.json</code>:   <pre><code>{\n  \"insecure-registries\": [\"myregistrydomain.com:5000\"]\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> <li> <p>Configure Registry Mirrors:</p> <ul> <li>Add registry mirrors in <code>/etc/docker/daemon.json</code>:   <pre><code>{\n  \"registry-mirrors\": [\"https://registry-mirror.example.com\"]\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker-config/#swarm","title":"Swarm","text":"<ol> <li> <p>Initialize Docker Swarm:     <pre><code>docker swarm init --advertise-addr &lt;manager-ip&gt;\n</code></pre></p> </li> <li> <p>Add a Node to Swarm:</p> <ul> <li>Get the join token from the manager node:   <pre><code>docker swarm join-token worker\n</code></pre></li> <li>Use the token to join the node:   <pre><code>docker swarm join --token &lt;token&gt; &lt;manager-ip&gt;:2377\n</code></pre></li> </ul> </li> <li> <p>Deploy a Stack:</p> <ul> <li>Create a <code>docker-compose.yml</code> file with the stack configuration.</li> <li>Deploy the stack:   <pre><code>docker stack deploy -c docker-compose.yml &lt;stack-name&gt;\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can effectively configure Docker on a Linux system, ensuring proper setup and management of Docker environments.</p>"},{"location":"linux/containers/docker/","title":"Docker","text":""},{"location":"linux/containers/docker/#docker-command-line-syntax-and-configuration-study-sheet","title":"Docker Command Line Syntax and Configuration Study Sheet","text":"<p>Purpose: To provide a quick reference for using Docker command line tools and configuring Docker on a Linux system.</p>"},{"location":"linux/containers/docker/#basic-docker-commands","title":"Basic Docker Commands","text":"<ol> <li> <p>Check Docker Version:       <pre><code>docker --version\n</code></pre></p> </li> <li> <p>Run a Docker Container:       <pre><code>docker run &lt;image-name&gt;\n</code></pre></p> <ul> <li>Run in detached mode:   <pre><code>docker run -d &lt;image-name&gt;\n</code></pre></li> <li>Run with a specific name:   <pre><code>docker run --name &lt;container-name&gt; &lt;image-name&gt;\n</code></pre></li> <li>Run and map ports:   <pre><code>docker run -p &lt;host-port&gt;:&lt;container-port&gt; &lt;image-name&gt;\n</code></pre></li> <li>Run and mount volumes:   <pre><code>docker run -v &lt;host-path&gt;:&lt;container-path&gt; &lt;image-name&gt;\n</code></pre></li> </ul> </li> <li> <p>List Docker Containers:</p> <ul> <li>Running containers:   <pre><code>docker ps\n</code></pre></li> <li>All containers:   <pre><code>docker ps -a\n</code></pre></li> </ul> </li> <li> <p>Stop, Start, and Restart Containers:</p> <ul> <li>Stop a container:   <pre><code>docker stop &lt;container-id&gt;\n</code></pre></li> <li>Start a container:   <pre><code>docker start &lt;container-id&gt;\n</code></pre></li> <li>Restart a container:   <pre><code>docker restart &lt;container-id&gt;\n</code></pre></li> </ul> </li> <li> <p>Remove Containers:</p> <ul> <li>Remove a container:   <pre><code>docker rm &lt;container-id&gt;\n</code></pre></li> <li>Remove all stopped containers:   <pre><code>docker container prune\n</code></pre></li> </ul> </li> <li> <p>View Container Logs:       <pre><code>docker logs &lt;container-id&gt;\n</code></pre></p> </li> <li> <p>Execute a Command in a Running Container:       <pre><code>docker exec -it &lt;container-id&gt; &lt;command&gt;\n</code></pre></p> <ul> <li>Start an interactive shell:   <pre><code>docker exec -it &lt;container-id&gt; /bin/bash\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/docker/#docker-images","title":"Docker Images","text":"<ol> <li> <p>List Docker Images:       <pre><code>docker images\n</code></pre></p> </li> <li> <p>Pull an Image from Docker Hub:       <pre><code>docker pull &lt;image-name&gt;\n</code></pre></p> </li> <li> <p>Remove an Image:       <pre><code>docker rmi &lt;image-id&gt;\n</code></pre></p> </li> <li> <p>Build an Image from a Dockerfile:       <pre><code>docker build -t &lt;image-name&gt; &lt;path-to-dockerfile&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker/#docker-volumes","title":"Docker Volumes","text":"<ol> <li> <p>Create a Docker Volume:       <pre><code>docker volume create &lt;volume-name&gt;\n</code></pre></p> </li> <li> <p>List Docker Volumes:       <pre><code>docker volume ls\n</code></pre></p> </li> <li> <p>Remove a Docker Volume:       <pre><code>docker volume rm &lt;volume-name&gt;\n</code></pre></p> </li> <li> <p>Inspect a Docker Volume:       <pre><code>docker volume inspect &lt;volume-name&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker/#docker-networks","title":"Docker Networks","text":"<ol> <li> <p>List Docker Networks:       <pre><code>docker network ls\n</code></pre></p> </li> <li> <p>Create a Docker Network:       <pre><code>docker network create &lt;network-name&gt;\n</code></pre></p> </li> <li> <p>Connect a Container to a Network:       <pre><code>docker network connect &lt;network-name&gt; &lt;container-id&gt;\n</code></pre></p> </li> <li> <p>Disconnect a Container from a Network:       <pre><code>docker network disconnect &lt;network-name&gt; &lt;container-id&gt;\n</code></pre></p> </li> <li> <p>Inspect a Docker Network:       <pre><code>docker network inspect &lt;network-name&gt;\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker/#docker-compose","title":"Docker Compose","text":"<ol> <li> <p>Start Services Defined in <code>docker-compose.yml</code>:       <pre><code>docker-compose up\n</code></pre></p> <ul> <li>Start in detached mode:   <pre><code>docker-compose up -d\n</code></pre></li> </ul> </li> <li> <p>Stop Services:       <pre><code>docker-compose down\n</code></pre></p> </li> <li> <p>List Containers Managed by Docker Compose:       <pre><code>docker-compose ps\n</code></pre></p> </li> <li> <p>Build or Rebuild Services:       <pre><code>docker-compose build\n</code></pre></p> </li> <li> <p>View Logs for Services:       <pre><code>docker-compose logs\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker/#docker-configuration","title":"Docker Configuration","text":"<ol> <li> <p>Configure Docker Daemon:</p> <ul> <li>Edit the Docker daemon configuration file:   <pre><code>sudo nano /etc/docker/daemon.json\n</code></pre></li> <li>Example configuration:   <pre><code>{\n   \"data-root\": \"/custom/path/to/docker\",\n   \"log-level\": \"warn\",\n   \"storage-driver\": \"overlay2\"\n}\n</code></pre></li> <li>Restart Docker to apply changes:   <pre><code>sudo systemctl restart docker\n</code></pre></li> </ul> </li> <li> <p>Enable and Start Docker Service:       <pre><code>sudo systemctl enable docker\nsudo systemctl start docker\n</code></pre></p> </li> <li> <p>Check Docker Service Status:       <pre><code>sudo systemctl status docker\n</code></pre></p> </li> </ol>"},{"location":"linux/containers/docker/#common-docker-troubleshooting","title":"Common Docker Troubleshooting","text":"<ol> <li> <p>Check Docker Logs:    <pre><code>sudo journalctl -u docker\n</code></pre></p> </li> <li> <p>Restart Docker Service:    <pre><code>sudo systemctl restart docker\n</code></pre></p> </li> <li> <p>Check Container Logs:    <pre><code>docker logs &lt;container-id&gt;\n</code></pre></p> </li> <li> <p>Remove Dangling Images:    <pre><code>docker image prune\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can efficiently manage Docker containers, images, volumes, networks, and configurations, ensuring proper use and maintenance of Docker environments.</p>"},{"location":"linux/containers/k8s-bare-metal/","title":"K8s bare metal","text":""},{"location":"linux/containers/k8s-bare-metal/#kubernetes-on-bare-metal-study-sheet","title":"Kubernetes on Bare Metal Study Sheet","text":"<p>Purpose: To provide a quick reference for setting up and managing Kubernetes on bare metal servers.</p>"},{"location":"linux/containers/k8s-bare-metal/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Hardware Requirements:</p> <ul> <li>At least two machines (one master and one or more worker nodes).</li> <li>Minimum resources per node: 2 CPUs, 2 GB RAM, and 20 GB disk space.</li> </ul> </li> <li> <p>Software Requirements:</p> <ul> <li>Ubuntu, CentOS, or another compatible Linux distribution.</li> <li>Docker installed on all nodes.</li> <li>Kubernetes components: <code>kubeadm</code>, <code>kubelet</code>, and <code>kubectl</code>.</li> </ul> </li> <li> <p>Network Requirements:</p> <ul> <li>Unique hostname, MAC address, and product_uuid for each node.</li> <li>Disable swap on all nodes:   <pre><code>sudo swapoff -a\nsudo sed -i '/ swap / s/^/#/' /etc/fstab\n</code></pre></li> </ul> </li> <li> <p>IP Tables Configuration:</p> <ul> <li>Ensure <code>net.bridge.bridge-nf-call-iptables</code> is set to 1:   <pre><code>sudo modprobe br_netfilter\necho '1' | sudo tee /proc/sys/net/bridge/bridge-nf-call-iptables\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s-bare-metal/#installing-docker","title":"Installing Docker","text":"<ol> <li>Install Docker:<ul> <li>Ubuntu:   <pre><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></li> <li>CentOS:   <pre><code>sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum install -y docker-ce docker-ce-cli containerd.io\nsudo systemctl start docker\nsudo systemctl enable docker\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s-bare-metal/#installing-kubernetes-components","title":"Installing Kubernetes Components","text":"<ol> <li> <p>Add Kubernetes Repository:</p> <ul> <li>Ubuntu:   <pre><code>sudo apt update\nsudo apt install -y apt-transport-https ca-certificates curl\nsudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\nsudo add-apt-repository \"deb https://apt.kubernetes.io/ kubernetes-xenial main\"\n</code></pre></li> <li>CentOS:   <pre><code>cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n</code></pre></li> </ul> </li> <li> <p>Install Kubernetes Components:</p> <ul> <li>Ubuntu:   <pre><code>sudo apt update\nsudo apt install -y kubelet kubeadm kubectl\nsudo systemctl enable kubelet\nsudo systemctl start kubelet\n</code></pre></li> <li>CentOS:   <pre><code>sudo yum install -y kubelet kubeadm kubectl\nsudo systemctl enable kubelet\nsudo systemctl start kubelet\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s-bare-metal/#setting-up-the-kubernetes-cluster","title":"Setting Up the Kubernetes Cluster","text":"<ol> <li> <p>Initialize the Master Node:</p> <ul> <li>On the master node:   <pre><code>sudo kubeadm init --pod-network-cidr=10.244.0.0/16\n</code></pre></li> <li>Set up <code>kubectl</code> for the regular user:   <pre><code>mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre></li> </ul> </li> <li> <p>Install a Pod Network Add-On:</p> <ul> <li>Flannel:   <pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n</code></pre></li> <li>Calico:   <pre><code>kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n</code></pre></li> </ul> </li> <li> <p>Join Worker Nodes to the Cluster:</p> <ul> <li>On each worker node, run the join command provided by the <code>kubeadm init</code> output:   <pre><code>sudo kubeadm join &lt;master-ip&gt;:&lt;master-port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;\n</code></pre></li> </ul> </li> <li> <p>Verify the Cluster:</p> <ul> <li>Check the status of the nodes:   <pre><code>kubectl get nodes\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s-bare-metal/#managing-the-cluster","title":"Managing the Cluster","text":"<ol> <li> <p>Deploy Applications:</p> <ul> <li>Create a deployment:   <pre><code>kubectl create deployment nginx --image=nginx\n</code></pre></li> <li>Expose the deployment as a service:   <pre><code>kubectl expose deployment nginx --port=80 --type=NodePort\n</code></pre></li> </ul> </li> <li> <p>Scaling Applications:</p> <ul> <li>Scale the deployment:   <pre><code>kubectl scale deployment nginx --replicas=3\n</code></pre></li> </ul> </li> <li> <p>Updating Applications:</p> <ul> <li>Update the deployment with a new image:   <pre><code>kubectl set image deployment/nginx nginx=nginx:latest\n</code></pre></li> </ul> </li> <li> <p>Managing Nodes:</p> <ul> <li>Drain a node for maintenance:   <pre><code>kubectl drain &lt;node-name&gt; --ignore-daemonsets\n</code></pre></li> <li>Mark a node as schedulable again:   <pre><code>kubectl uncordon &lt;node-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Upgrading the Cluster:</p> <ul> <li>Upgrade <code>kubeadm</code>:   <pre><code>sudo apt update &amp;&amp; sudo apt install -y kubeadm=1.x.x-00\n</code></pre></li> <li>Upgrade the master node:   <pre><code>sudo kubeadm upgrade plan\nsudo kubeadm upgrade apply v1.x.x\n</code></pre></li> <li>Upgrade <code>kubelet</code> and <code>kubectl</code>:   <pre><code>sudo apt install -y kubelet=1.x.x-00 kubectl=1.x.x-00\nsudo systemctl restart kubelet\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can efficiently set up and manage a Kubernetes cluster on bare metal servers, ensuring proper configuration and maintenance of the cluster.</p>"},{"location":"linux/containers/k8s/","title":"K8s","text":""},{"location":"linux/containers/k8s/#kubernetes-command-line-syntax-study-sheet","title":"Kubernetes Command Line Syntax Study Sheet","text":"<p>Purpose: To provide a quick reference for commonly used Kubernetes (kubectl) commands.</p>"},{"location":"linux/containers/k8s/#basic-commands","title":"Basic Commands","text":"<ol> <li> <p>Get Information:</p> <ul> <li>Get all pods:    <pre><code>kubectl get pods\n</code></pre></li> <li>Get all services:   <pre><code>kubectl get services\n</code></pre></li> <li>Get all nodes:   <pre><code>kubectl get nodes\n</code></pre></li> <li>Get all deployments:   <pre><code>kubectl get deployments\n</code></pre></li> </ul> </li> <li> <p>Describe Resources:</p> <ul> <li>Describe a pod:   <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre></li> <li>Describe a node:   <pre><code>kubectl describe node &lt;node-name&gt;\n</code></pre></li> <li>Describe a service:   <pre><code>kubectl describe service &lt;service-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Create Resources:</p> <ul> <li>Create a pod from a YAML file:   <pre><code>kubectl create -f &lt;file.yaml&gt;\n</code></pre></li> <li>Create a deployment:   <pre><code>kubectl create deployment &lt;deployment-name&gt; --image=&lt;image-name&gt;\n</code></pre></li> <li>Expose a deployment as a service:   <pre><code>kubectl expose deployment &lt;deployment-name&gt; --port=&lt;port&gt; --target-port=&lt;target-port&gt;\n</code></pre></li> </ul> </li> <li> <p>Update Resources:</p> <ul> <li>Apply changes from a YAML file:   <pre><code>kubectl apply -f &lt;file.yaml&gt;\n</code></pre></li> <li>Edit a resource (e.g., deployment):   <pre><code>kubectl edit deployment &lt;deployment-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Delete Resources:</p> <ul> <li>Delete a pod:   <pre><code>kubectl delete pod &lt;pod-name&gt;\n</code></pre></li> <li>Delete a deployment:   <pre><code>kubectl delete deployment &lt;deployment-name&gt;\n</code></pre></li> <li>Delete all pods in a namespace:   <pre><code>kubectl delete pods --all --namespace=&lt;namespace&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s/#advanced-commands","title":"Advanced Commands","text":"<ol> <li> <p>Logs and Debugging:</p> <ul> <li>View pod logs:   <pre><code>kubectl logs &lt;pod-name&gt;\n</code></pre></li> <li>Stream pod logs:   <pre><code>kubectl logs -f &lt;pod-name&gt;\n</code></pre></li> <li>Execute a command in a pod:   <pre><code>kubectl exec -it &lt;pod-name&gt; -- &lt;command&gt;\n</code></pre></li> </ul> </li> <li> <p>Scaling:</p> <ul> <li>Scale a deployment:   <pre><code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number-of-replicas&gt;\n</code></pre></li> </ul> </li> <li> <p>Configuration and Context:</p> <ul> <li>View current context:   <pre><code>kubectl config current-context\n</code></pre></li> <li>Set a context:   <pre><code>kubectl config use-context &lt;context-name&gt;\n</code></pre></li> <li>View all contexts:   <pre><code>kubectl config get-contexts\n</code></pre></li> </ul> </li> <li> <p>Namespace Management:</p> <ul> <li>Get all namespaces:   <pre><code>kubectl get namespaces\n</code></pre></li> <li>Create a namespace:   <pre><code>kubectl create namespace &lt;namespace-name&gt;\n</code></pre></li> <li>Set default namespace:   <pre><code>kubectl config set-context --current --namespace=&lt;namespace-name&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/containers/k8s/#useful-tips","title":"Useful Tips","text":"<ul> <li> <p>Autocomplete: Enable kubectl command autocompletion.   <pre><code>source &lt;(kubectl completion bash)  # for Bash\nsource &lt;(kubectl completion zsh)   # for Zsh\n</code></pre></p> </li> <li> <p>Dry Run: Test commands without making changes.   <pre><code>kubectl apply -f &lt;file.yaml&gt; --dry-run=client\n</code></pre></p> </li> <li> <p>Context Switching: Quickly switch between clusters.   <pre><code>kubectl config use-context &lt;context-name&gt;\n</code></pre></p> </li> <li> <p>Label Filtering: Get resources based on labels.   <pre><code>kubectl get pods -l &lt;label-key&gt;=&lt;label-value&gt;\n</code></pre></p> </li> </ul> <p>By using this study sheet, new starters can efficiently navigate Kubernetes command line operations and perform essential tasks with confidence.</p>"},{"location":"linux/misc/stateless-linux/","title":"Stateless linux","text":""},{"location":"linux/misc/stateless-linux/#stateless-linux-systems-study-sheet","title":"Stateless Linux Systems Study Sheet","text":"<p>Purpose: To provide a quick reference for understanding and managing stateless Linux systems, where system state is not preserved across reboots.</p>"},{"location":"linux/misc/stateless-linux/#what-is-a-stateless-linux-system","title":"What is a Stateless Linux System?","text":"<ul> <li>Definition: A stateless Linux system does not retain any changes made to the system state after a reboot. The system always starts with a predefined state.</li> <li>Use Cases: Ideal for kiosks, public computers, embedded systems, and environments where consistency and security are critical.</li> </ul>"},{"location":"linux/misc/stateless-linux/#key-concepts","title":"Key Concepts","text":"<ol> <li> <p>Immutable Root Filesystem:</p> <ul> <li>The root filesystem is read-only, ensuring that no changes can be made to the core system files.</li> <li>Any changes are made in a temporary overlay that is discarded on reboot.</li> </ul> </li> <li> <p>Configuration Management:</p> <ul> <li>System configuration is managed via version-controlled files or central configuration management systems.</li> <li>Tools like Ansible, Puppet, or Chef can be used to ensure consistent configuration.</li> </ul> </li> <li> <p>Data Persistence:</p> <ul> <li>User data and logs can be stored in separate, persistent storage locations if needed.</li> <li>Persistent storage is often mounted on separate partitions or external storage devices.</li> </ul> </li> </ol>"},{"location":"linux/misc/stateless-linux/#setting-up-a-stateless-linux-system","title":"Setting Up a Stateless Linux System","text":"<ol> <li> <p>Create a Read-Only Root Filesystem:</p> <ul> <li>Using OverlayFS:<ul> <li>OverlayFS allows creating a read-only base layer with a writable upper layer.</li> <li>Example fstab entry:   <pre><code>none / overlay defaults,lowerdir=/ro-root,upperdir=/rw-root,workdir=/work 0 0\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>System Configuration Management:</p> <ul> <li>Use configuration management tools to automate system setup.</li> <li>Example with Ansible:   <pre><code>- name: Ensure stateless configuration\n  hosts: all\n  tasks:\n    - name: Copy configuration files\n      copy:\n        src: /path/to/config/\n        dest: /etc/\n    - name: Install necessary packages\n      package:\n        name:\n          - package1\n          - package2\n        state: present\n</code></pre></li> </ul> </li> <li> <p>Persistent Data Storage:</p> <ul> <li>Mount persistent storage for user data and logs.</li> <li>Example fstab entries:   <pre><code>/dev/sdb1 /var/log ext4 defaults 0 0\n/dev/sdc1 /home ext4 defaults 0 0\n</code></pre></li> </ul> </li> <li> <p>Network Configuration:</p> <ul> <li>Ensure network settings are applied on each boot using network management tools or scripts.</li> <li>Example network configuration script:   <pre><code>#!/bin/bash\nip link set dev eth0 up\nip addr add 192.168.1.100/24 dev eth0\nip route add default via 192.168.1.1\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/misc/stateless-linux/#booting-a-stateless-system","title":"Booting a Stateless System","text":"<ol> <li> <p>PXE Boot:</p> <ul> <li>Stateless systems can boot over the network using PXE (Preboot Execution Environment).</li> <li>Configure a PXE server to serve the boot images and configuration.</li> <li>Example PXE configuration:   <pre><code>DEFAULT linux\nLABEL linux\n  KERNEL vmlinuz\n  APPEND initrd=initrd.img root=/dev/nfs nfsroot=192.168.1.1:/nfs/root rw ip=dhcp\n</code></pre></li> </ul> </li> <li> <p>Live CD/USB:</p> <ul> <li>Use a live CD or USB to boot a stateless system.</li> <li>Create a bootable live image with tools like <code>mkisofs</code> or <code>dd</code>.</li> <li>Example <code>dd</code> command:   <pre><code>sudo dd if=live-image.iso of=/dev/sdX bs=4M status=progress\n</code></pre></li> </ul> </li> <li> <p>System Reset on Reboot:</p> <ul> <li>Configure the system to reset to the predefined state on reboot.</li> <li>Use a script to clear changes and reset the state:   <pre><code>#!/bin/bash\nmount -o remount,ro /\nrm -rf /rw-root/*\nreboot\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/misc/stateless-linux/#advantages-and-disadvantages","title":"Advantages and Disadvantages","text":"<p>Advantages:</p> <ul> <li>Consistency: Always boots into a known state, reducing configuration drift.</li> <li>Security: Changes are not persistent, reducing the risk of persistent malware.</li> <li>Maintenance: Simplified management and updates.</li> </ul> <p>Disadvantages:</p> <ul> <li>Limited Customization: Users cannot make permanent changes.</li> <li>Data Management: Requires careful planning for data persistence.</li> </ul> <p>By using this study sheet, new starters can efficiently understand and set up stateless Linux systems, ensuring proper implementation and management of such environments.</p>"},{"location":"linux/networking/DNS/","title":"DNS","text":""},{"location":"linux/networking/DNS/#linux-dns-configuration-study-sheet","title":"Linux DNS Configuration Study Sheet","text":"<p>Purpose: To provide a quick reference for configuring DNS settings on a Linux system.</p>"},{"location":"linux/networking/DNS/#checking-current-dns-settings","title":"Checking Current DNS Settings","text":"<ol> <li>View Current DNS Servers:     <pre><code>cat /etc/resolv.conf\n</code></pre><ul> <li>Typical output:   <pre><code>nameserver 8.8.8.8\nnameserver 8.8.4.4\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/DNS/#configuring-dns-settings","title":"Configuring DNS Settings","text":"<ol> <li> <p>Editing <code>/etc/resolv.conf</code>:</p> <ul> <li>Open the file in a text editor (e.g., <code>nano</code> or <code>vim</code>):   <pre><code>sudo nano /etc/resolv.conf\n</code></pre></li> <li>Add or modify nameserver entries:   <pre><code>nameserver 1.1.1.1\nnameserver 8.8.8.8\n</code></pre></li> </ul> </li> <li> <p>Persistent DNS Configuration:</p> <ul> <li> <p>NetworkManager: If your system uses NetworkManager, you should update DNS settings through its configuration to make changes persistent.</p> </li> <li> <p>Open the NetworkManager configuration file:   <pre><code>sudo nano /etc/NetworkManager/NetworkManager.conf\n</code></pre></p> </li> <li>Add or modify the DNS settings:   <pre><code>[main]\ndns=default\n</code></pre></li> <li>Restart NetworkManager to apply changes:   <pre><code>sudo systemctl restart NetworkManager\n</code></pre></li> </ul> </li> <li> <p>Using <code>nmcli</code> (NetworkManager Command Line Interface):</p> <ul> <li>List connections:   <pre><code>nmcli con show\n</code></pre></li> <li>Modify DNS settings for a specific connection:   <pre><code>nmcli con mod &lt;connection-name&gt; ipv4.dns \"1.1.1.1 8.8.8.8\"\nnmcli con up &lt;connection-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Systemd-Resolved Configuration:</p> <ul> <li>For systems using <code>systemd-resolved</code>, you can configure DNS settings in <code>/etc/systemd/resolved.conf</code>:   <pre><code>sudo nano /etc/systemd/resolved.conf\n</code></pre></li> <li>Update or add DNS settings:   <pre><code>[Resolve]\nDNS=1.1.1.1 8.8.8.8\nFallbackDNS=8.8.4.4\n</code></pre></li> <li>Restart the <code>systemd-resolved</code> service to apply changes:   <pre><code>sudo systemctl restart systemd-resolved\n</code></pre></li> </ul> </li> <li> <p>Adding DNS Servers in Network Interface Configuration:</p> <ul> <li>If you configure network interfaces directly, you can specify DNS settings in the interface configuration files.</li> <li>Debian/Ubuntu: Edit <code>/etc/network/interfaces</code>:   <pre><code>sudo nano /etc/network/interfaces\n</code></pre></li> <li> <p>Add DNS settings for an interface:   <pre><code>iface eth0 inet static\n    address 192.168.1.100\n    netmask 255.255.255.0\n    gateway 192.168.1.1\n    dns-nameservers 1.1.1.1 8.8.8.8\n</code></pre></p> </li> <li> <p>Red Hat/CentOS: Edit the interface configuration file (e.g., <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>):   <pre><code>sudo nano /etc/sysconfig/network-scripts/ifcfg-eth0\n</code></pre></p> </li> <li>Add DNS settings:   <pre><code>DNS1=1.1.1.1\nDNS2=8.8.8.8\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/DNS/#testing-dns-configuration","title":"Testing DNS Configuration","text":"<ol> <li> <p>Test DNS Resolution:</p> <ul> <li>Use <code>nslookup</code>:   <pre><code>nslookup example.com\n</code></pre></li> <li>Use <code>dig</code>:   <pre><code>dig example.com\n</code></pre></li> <li>Use <code>host</code>:   <pre><code>host example.com\n</code></pre></li> </ul> </li> <li> <p>Flush DNS Cache (if applicable):</p> <ul> <li>systemd-resolved:   <pre><code>sudo systemd-resolve --flush-caches\n</code></pre></li> <li>DNSMasq:   <pre><code>sudo systemctl restart dnsmasq\n</code></pre></li> </ul> </li> </ol> <p>By using this study sheet, new starters can efficiently configure and manage DNS settings on a Linux system, ensuring proper network resolution and connectivity.</p>"},{"location":"linux/networking/network-troubleshooting/","title":"Network troubleshooting","text":""},{"location":"linux/networking/network-troubleshooting/#networking-troubleshooting-study-sheet","title":"Networking Troubleshooting Study Sheet","text":"<p>Purpose: To provide a quick reference for diagnosing and resolving network issues on a Linux system.</p>"},{"location":"linux/networking/network-troubleshooting/#basic-connectivity-checks","title":"Basic Connectivity Checks","text":"<ol> <li> <p>Ping a Host:</p> <ul> <li>Check connectivity to a remote host:   <pre><code>ping &lt;hostname-or-ip&gt;\n</code></pre></li> <li>Continuous ping:   <pre><code>ping -c 5 &lt;hostname-or-ip&gt;\n</code></pre></li> </ul> </li> <li> <p>Check Local Network Configuration:</p> <ul> <li>Display all network interfaces and IP addresses:   <pre><code>ip a\n</code></pre></li> <li>Alternative command:   <pre><code>ifconfig\n</code></pre></li> </ul> </li> <li> <p>Check Routing Table:</p> <ul> <li>Display current routing table:   <pre><code>ip route\n</code></pre></li> <li>Alternative command:   <pre><code>route -n\n</code></pre></li> </ul> </li> <li> <p>Check Default Gateway:</p> <ul> <li>Verify the default gateway setting:   <pre><code>ip route | grep default\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/network-troubleshooting/#advanced-diagnostics","title":"Advanced Diagnostics","text":"<ol> <li> <p>Traceroute:</p> <ul> <li>Trace the path to a remote host:   <pre><code>traceroute &lt;hostname-or-ip&gt;\n</code></pre></li> <li>For systems without <code>traceroute</code>:   <pre><code>sudo apt install traceroute  # Debian/Ubuntu\nsudo yum install traceroute  # Red Hat/CentOS\n</code></pre></li> </ul> </li> <li> <p>DNS Resolution:</p> <ul> <li>Check DNS resolution:   <pre><code>nslookup &lt;hostname&gt;\n</code></pre></li> <li>Alternative command:   <pre><code>dig &lt;hostname&gt;\n</code></pre></li> <li>Simple DNS lookup:   <pre><code>host &lt;hostname&gt;\n</code></pre></li> </ul> </li> <li> <p>Check Open Ports:</p> <ul> <li>List listening ports:   <pre><code>sudo netstat -tuln\n</code></pre></li> <li>Alternative command:   <pre><code>sudo ss -tuln\n</code></pre></li> </ul> </li> <li> <p>Check Network Interfaces:</p> <ul> <li>Display interface statistics:   <pre><code>ip -s link\n</code></pre></li> </ul> </li> <li> <p>Check ARP Table:</p> <ul> <li>Display ARP table entries:   <pre><code>ip neigh\n</code></pre></li> <li>Alternative command:   <pre><code>arp -a\n</code></pre></li> </ul> </li> <li> <p>Check Active Connections:</p> <ul> <li>Display all active connections:   <pre><code>sudo netstat -an\n</code></pre></li> <li>Alternative command:   <pre><code>sudo ss -an\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/network-troubleshooting/#packet-analysis","title":"Packet Analysis","text":"<ol> <li> <p>Tcpdump:</p> <ul> <li>Capture packets on a specific interface:   <pre><code>sudo tcpdump -i &lt;interface&gt;\n</code></pre></li> <li>Capture and save packets to a file:   <pre><code>sudo tcpdump -i &lt;interface&gt; -w capture.pcap\n</code></pre></li> <li>Capture packets with specific filter:   <pre><code>sudo tcpdump -i &lt;interface&gt; tcp port 80\n</code></pre></li> </ul> </li> <li> <p>Wireshark:</p> <ul> <li>Install Wireshark:   <pre><code>sudo apt install wireshark  # Debian/Ubuntu\nsudo yum install wireshark  # Red Hat/CentOS\n</code></pre></li> <li>Use Wireshark GUI to capture and analyze network traffic.</li> </ul> </li> </ol>"},{"location":"linux/networking/network-troubleshooting/#common-networking-tools","title":"Common Networking Tools","text":"<ol> <li> <p>Telnet:</p> <ul> <li>Check connectivity to a specific port:   <pre><code>telnet &lt;hostname&gt; &lt;port&gt;\n</code></pre></li> <li>Install Telnet client:   <pre><code>sudo apt install telnet  # Debian/Ubuntu\nsudo yum install telnet  # Red Hat/CentOS\n</code></pre></li> </ul> </li> <li> <p>Nmap:</p> <ul> <li>Scan open ports on a host:   <pre><code>nmap &lt;hostname-or-ip&gt;\n</code></pre></li> <li>Install Nmap:   <pre><code>sudo apt install nmap  # Debian/Ubuntu\nsudo yum install nmap  # Red Hat/CentOS\n</code></pre></li> </ul> </li> <li> <p>Curl:</p> <ul> <li>Test HTTP/HTTPS connectivity:   <pre><code>curl -I &lt;url&gt;\n</code></pre></li> </ul> </li> <li> <p>Netcat:</p> <ul> <li>Check if a port is open:   <pre><code>nc -zv &lt;hostname&gt; &lt;port&gt;\n</code></pre></li> <li>Listen on a port:   <pre><code>nc -l &lt;port&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/network-troubleshooting/#network-configuration-files","title":"Network Configuration Files","text":"<ol> <li> <p>/etc/resolv.conf:</p> <ul> <li>DNS server configuration:   <pre><code>cat /etc/resolv.conf\n</code></pre></li> </ul> </li> <li> <p>/etc/hosts:</p> <ul> <li>Local hostname resolution:   <pre><code>cat /etc/hosts\n</code></pre></li> </ul> </li> <li> <p>/etc/network/interfaces (Debian/Ubuntu):</p> <ul> <li>Network interface configuration:   <pre><code>cat /etc/network/interfaces\n</code></pre></li> </ul> </li> <li> <p>/etc/sysconfig/network-scripts/ifcfg- (Red Hat/CentOS): <ul> <li>Network interface configuration:   <pre><code>cat /etc/sysconfig/network-scripts/ifcfg-&lt;interface&gt;\n</code></pre></li> </ul>"},{"location":"linux/networking/network-troubleshooting/#network-service-management","title":"Network Service Management","text":"<ol> <li> <p>Restart Network Services:</p> <ul> <li>Debian/Ubuntu:   <pre><code>sudo systemctl restart networking\n</code></pre></li> <li>Red Hat/CentOS:   <pre><code>sudo systemctl restart network\n</code></pre></li> </ul> </li> <li> <p>Check Network Service Status:     <pre><code>sudo systemctl status networking  # Debian/Ubuntu\nsudo systemctl status network     # Red Hat/CentOS\n</code></pre></p> </li> </ol>"},{"location":"linux/networking/network-troubleshooting/#persistent-network-issues","title":"Persistent Network Issues","text":"<ol> <li> <p>Check System Logs:</p> <ul> <li>View system logs for network-related messages:   <pre><code>sudo journalctl -u networking  # Debian/Ubuntu\nsudo journalctl -u network     # Red Hat/CentOS\n</code></pre></li> </ul> </li> <li> <p>Inspect Interface Configuration:</p> <ul> <li>Verify the configuration files for errors or misconfigurations.</li> </ul> </li> <li> <p>Hardware Issues:</p> <ul> <li>Check for hardware problems such as faulty cables, network cards, or switches.</li> </ul> </li> </ol> <p>By using this study sheet, new starters can efficiently diagnose and resolve network issues on a Linux system, ensuring proper network connectivity and performance.</p>"},{"location":"linux/networking/networking/","title":"Networking","text":""},{"location":"linux/networking/networking/#linux-networking-configuration-study-sheet","title":"Linux Networking Configuration Study Sheet","text":"<p>Purpose: To provide a quick reference for configuring and managing network settings on a Linux system.</p>"},{"location":"linux/networking/networking/#viewing-network-configuration","title":"Viewing Network Configuration","text":"<ol> <li> <p>Display Network Interfaces:     <pre><code>ip a\n</code></pre></p> <ul> <li>Alternative command:   <pre><code>ifconfig\n</code></pre></li> </ul> </li> <li> <p>Display Routing Table:     <pre><code>ip route\n</code></pre></p> <ul> <li>Alternative command:   <pre><code>route -n\n</code></pre></li> </ul> </li> <li> <p>Display DNS Configuration:    <pre><code>cat /etc/resolv.conf\n</code></pre></p> </li> </ol>"},{"location":"linux/networking/networking/#configuring-network-interfaces","title":"Configuring Network Interfaces","text":"<ol> <li> <p>Using <code>ip</code> Command:</p> <ul> <li>Assign an IP address:   <pre><code>sudo ip addr add 192.168.1.100/24 dev eth0\n</code></pre></li> <li>Bring an interface up:   <pre><code>sudo ip link set dev eth0 up\n</code></pre></li> <li>Bring an interface down:   <pre><code>sudo ip link set dev eth0 down\n</code></pre></li> </ul> </li> <li> <p>Using <code>ifconfig</code> Command:</p> <ul> <li>Assign an IP address:   <pre><code>sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0\n</code></pre></li> <li>Bring an interface up:   <pre><code>sudo ifconfig eth0 up\n</code></pre></li> <li>Bring an interface down:   <pre><code>sudo ifconfig eth0 down\n</code></pre></li> </ul> </li> <li> <p>Persistent Network Configuration:</p> <ul> <li>Debian/Ubuntu: Edit <code>/etc/network/interfaces</code>:   <pre><code>sudo nano /etc/network/interfaces\n</code></pre></li> <li> <p>Example configuration:   <pre><code>auto eth0\niface eth0 inet static\n    address 192.168.1.100\n    netmask 255.255.255.0\n    gateway 192.168.1.1\n    dns-nameservers 1.1.1.1 8.8.8.8\n</code></pre></p> </li> <li> <p>Red Hat/CentOS: Edit the interface configuration file (e.g., <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>):   <pre><code>sudo nano /etc/sysconfig/network-scripts/ifcfg-eth0\n</code></pre></p> </li> <li>Example configuration:   <pre><code>DEVICE=eth0\nBOOTPROTO=static\nONBOOT=yes\nIPADDR=192.168.1.100\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\nDNS1=1.1.1.1\nDNS2=8.8.8.8\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/networking/#configuring-hostname","title":"Configuring Hostname","text":"<ol> <li> <p>View Current Hostname:    <pre><code>hostname\n</code></pre></p> </li> <li> <p>Set Temporary Hostname:    <pre><code>sudo hostnamectl set-hostname &lt;new-hostname&gt;\n</code></pre></p> </li> <li> <p>Edit Hostname Permanently:</p> <ul> <li>Debian/Ubuntu: Edit <code>/etc/hostname</code>:   <pre><code>sudo nano /etc/hostname\n</code></pre></li> <li>Red Hat/CentOS: Edit <code>/etc/hostname</code>:   <pre><code>sudo nano /etc/hostname\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/networking/#configuring-static-routes","title":"Configuring Static Routes","text":"<ol> <li> <p>Add a Static Route:    <pre><code>sudo ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0\n</code></pre></p> </li> <li> <p>Delete a Static Route:    <pre><code>sudo ip route del 192.168.2.0/24\n</code></pre></p> </li> <li> <p>Persistent Static Routes:</p> <ul> <li>Debian/Ubuntu: Edit <code>/etc/network/interfaces</code>:   <pre><code>sudo nano /etc/network/interfaces\n</code></pre></li> <li> <p>Add static route configuration:   <pre><code>up ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0\n</code></pre></p> </li> <li> <p>Red Hat/CentOS: Create a static route file (e.g., <code>/etc/sysconfig/network-scripts/route-eth0</code>):   <pre><code>sudo nano /etc/sysconfig/network-scripts/route-eth0\n</code></pre></p> </li> <li>Add static route configuration:   <pre><code>192.168.2.0/24 via 192.168.1.1 dev eth0\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/networking/#configuring-firewall","title":"Configuring Firewall","text":"<ol> <li> <p>Using <code>iptables</code>:</p> <ul> <li>View current rules:   <pre><code>sudo iptables -L\n</code></pre></li> <li>Allow incoming SSH connections:   <pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n</code></pre></li> <li>Save iptables rules (Debian/Ubuntu):   <pre><code>sudo iptables-save | sudo tee /etc/iptables/rules.v4\n</code></pre></li> <li>Save iptables rules (Red Hat/CentOS):   <pre><code>sudo service iptables save\n</code></pre></li> </ul> </li> <li> <p>Using <code>firewalld</code>:</p> <ul> <li>Start and enable <code>firewalld</code>:   <pre><code>sudo systemctl start firewalld\nsudo systemctl enable firewalld\n</code></pre></li> <li>Allow a service (e.g., SSH):   <pre><code>sudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n</code></pre></li> </ul> </li> <li> <p>Using <code>ufw</code> (Uncomplicated Firewall):</p> <ul> <li>Enable <code>ufw</code>:   <pre><code>sudo ufw enable\n</code></pre></li> <li>Allow SSH connections:   <pre><code>sudo ufw allow ssh\n</code></pre></li> <li>View status:   <pre><code>sudo ufw status\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/networking/networking/#network-troubleshooting","title":"Network Troubleshooting","text":"<ol> <li> <p>Ping a Host:    <pre><code>ping &lt;hostname-or-ip&gt;\n</code></pre></p> </li> <li> <p>Trace Route to a Host:    <pre><code>traceroute &lt;hostname-or-ip&gt;\n</code></pre></p> </li> <li> <p>Check DNS Resolution:    <pre><code>nslookup &lt;hostname&gt;\n</code></pre></p> </li> <li> <p>Check Open Ports:    <pre><code>sudo netstat -tuln\n</code></pre></p> </li> <li> <p>Test Connectivity with <code>curl</code>:    <pre><code>curl -I &lt;url&gt;\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can efficiently configure and manage network settings on a Linux system, ensuring proper connectivity and network performance.</p>"},{"location":"linux/quizes/DNS/","title":"DNS","text":"<p>Linux DNS configuration:</p> <p>Question:</p> <p>You are tasked with configuring DNS on a Linux system. Based on your knowledge of DNS configuration files and commands, answer the following questions:</p>"},{"location":"linux/quizes/DNS/#q1-which-file-is-primarily-used-to-configure-the-systems-dns-resolver","title":"Q1: Which file is primarily used to configure the system's DNS resolver?","text":"<p>A. <code>/etc/hosts</code></p> <p>B. <code>/etc/nsswitch.conf</code></p> <p>C. <code>/etc/resolv.conf</code></p> <p>D. <code>/etc/hostname</code></p>"},{"location":"linux/quizes/DNS/#q2-in-the-etcresolvconf-file-which-directive-is-used-to-specify-the-dns-server","title":"Q2: In the <code>/etc/resolv.conf</code> file, which directive is used to specify the DNS server?","text":"<p>A. <code>search</code></p> <p>B. <code>nameserver</code></p> <p>C. <code>domain</code></p> <p>D. <code>server</code></p>"},{"location":"linux/quizes/DNS/#q3-which-command-would-you-use-to-test-dns-resolution-for-the-domain-examplecom","title":"Q3: Which command would you use to test DNS resolution for the domain <code>example.com</code>?","text":"<p>A. <code>ping example.com</code></p> <p>B. <code>dig example.com</code></p> <p>C. <code>nslookup example.com</code></p> <p>D. <code>host example.com</code></p>"},{"location":"linux/quizes/DNS/#q4-in-the-context-of-dns-what-does-the-term-forwarder-refer-to","title":"Q4: In the context of DNS, what does the term \"forwarder\" refer to?","text":"<p>A. A DNS server that forwards queries to other DNS servers if it cannot resolve them itself.</p> <p>B. A DNS server that caches DNS queries to speed up resolution.</p> <p>C. A DNS record that points to another domain name.</p> <p>D. A DNS server that resolves internal network names.</p>"},{"location":"linux/quizes/DNS/#q5-to-change-the-dns-server-on-a-system-using-networkmanager-which-command-would-you-use","title":"Q5: To change the DNS server on a system using NetworkManager, which command would you use?","text":"<p>A. <code>nmcli dev dns set</code></p> <p>B. <code>nmcli dev set dns</code></p> <p>C. <code>nmcli con mod &lt;connection_name&gt; ipv4.dns &lt;dns_server&gt;</code></p> <p>D. <code>nmcli con set &lt;connection_name&gt; dns &lt;dns_server&gt;</code></p>"},{"location":"linux/quizes/DNS/#answers","title":"Answers:","text":"<p>Q1: Which file is primarily used to configure the system's DNS resolver?</p> <ul> <li> <p>Answer: C. <code>/etc/resolv.conf</code></p> </li> <li> <p>Explanation: The file <code>/etc/resolv.conf</code> is used to configure the system's DNS resolver by specifying the DNS servers and search domain.</p> </li> </ul> <p>Q2: In the <code>/etc/resolv.conf</code> file, which directive is used to specify the DNS server?</p> <ul> <li> <p>Answer: B. <code>nameserver</code></p> </li> <li> <p>Explanation: The <code>nameserver</code> directive in the <code>/etc/resolv.conf</code> file is used to specify the IP address of a DNS server.</p> </li> </ul> <p>Q3: Which command would you use to test DNS resolution for the domain <code>example.com</code>?</p> <ul> <li> <p>Answer: B. <code>dig example.com</code></p> </li> <li> <p>Explanation: The <code>dig</code> command is used to perform DNS lookups and can be used to test DNS resolution.</p> </li> </ul> <p>Q4: In the context of DNS, what does the term \"forwarder\" refer to?</p> <ul> <li> <p>Answer: A. A DNS server that forwards queries to other DNS servers if it cannot resolve them itself.</p> </li> <li> <p>Explanation: A forwarder is a DNS server that forwards queries to other DNS servers if it cannot resolve them locally.</p> </li> </ul> <p>Q5: To change the DNS server on a system using NetworkManager, which command would you use?</p> <ul> <li> <p>Answer: C. <code>nmcli con mod &lt;connection_name&gt; ipv4.dns &lt;dns_server&gt;</code></p> </li> <li> <p>Explanation: The command <code>nmcli con mod &lt;connection_name&gt; ipv4.dns &lt;dns_server&gt;</code> is used to modify the DNS server settings for a specific network connection managed by NetworkManager.</p> </li> </ul>"},{"location":"linux/quizes/Docker/","title":"Docker","text":"<p>Docker Command Line Syntax and Configuration:</p> <p>Question:</p> <p>You are tasked with managing Docker containers and images on a Linux system. Based on your knowledge of Docker command line syntax and configuration, answer the following questions:</p>"},{"location":"linux/quizes/Docker/#q1-which-command-is-used-to-list-all-running-docker-containers","title":"Q1: Which command is used to list all running Docker containers?","text":"<p>A. <code>docker ps</code></p> <p>B. <code>docker ls</code></p> <p>C. <code>docker images</code></p> <p>D. <code>docker containers</code></p>"},{"location":"linux/quizes/Docker/#q2-how-would-you-start-a-docker-container-named-webserver","title":"Q2: How would you start a Docker container named <code>webserver</code>?","text":"<p>A. <code>docker run webserver</code></p> <p>B. <code>docker start webserver</code></p> <p>C. <code>docker launch webserver</code></p> <p>D. <code>docker exec webserver</code></p>"},{"location":"linux/quizes/Docker/#q3-which-command-is-used-to-build-a-docker-image-from-a-dockerfile-located-in-the-current-directory","title":"Q3: Which command is used to build a Docker image from a Dockerfile located in the current directory?","text":"<p>A. <code>docker build .</code></p> <p>B. <code>docker make .</code></p> <p>C. <code>docker create .</code></p> <p>D. <code>docker compile .</code></p>"},{"location":"linux/quizes/Docker/#q4-what-is-the-purpose-of-the-p-flag-in-the-docker-run-command","title":"Q4: What is the purpose of the <code>-p</code> flag in the <code>docker run</code> command?","text":"<p>A. To pull an image from a registry</p> <p>B. To specify a port mapping between the host and the container</p> <p>C. To set the priority of the container process</p> <p>D. To specify the path of the Dockerfile</p>"},{"location":"linux/quizes/Docker/#q5-which-file-is-commonly-used-to-define-multi-container-docker-applications","title":"Q5: Which file is commonly used to define multi-container Docker applications?","text":"<p>A. <code>Dockerfile</code></p> <p>B. <code>docker-compose.yaml</code></p> <p>C. <code>config.json</code></p> <p>D. <code>containers.conf</code></p>"},{"location":"linux/quizes/Docker/#answers","title":"Answers:","text":"<p>Q1: Which command is used to list all running Docker containers?</p> <ul> <li> <p>Answer: A. <code>docker ps</code></p> </li> <li> <p>Explanation: The <code>docker ps</code> command lists all running Docker containers.</p> </li> </ul> <p>Q2: How would you start a Docker container named <code>webserver</code>?</p> <ul> <li> <p>Answer: B. <code>docker start webserver</code></p> </li> <li> <p>Explanation: The <code>docker start</code> command is used to start an existing container named <code>webserver</code>.</p> </li> </ul> <p>Q3: Which command is used to build a Docker image from a Dockerfile located in the current directory?</p> <ul> <li> <p>**Answer: A. <code>docker build .</code></p> </li> <li> <p>Explanation: The <code>docker build .</code> command builds a Docker image from the Dockerfile in the current directory.</p> </li> </ul> <p>Q4: What is the purpose of the <code>-p</code> flag in the <code>docker run</code> command?</p> <ul> <li> <p>Answer: B. To specify a port mapping between the host and the container</p> </li> <li> <p>Explanation: The <code>-p</code> flag in the <code>docker run</code> command specifies a port mapping between the host and the container, allowing access to the container's services from the host.</p> </li> </ul> <p>Q5: Which file is commonly used to define multi-container Docker applications?</p> <ul> <li> <p>Answer: B. <code>docker-compose.yaml</code></p> </li> <li> <p>Explanation: The <code>docker-compose.yaml</code> file is used to define and run multi-container Docker applications using Docker Compose.</p> </li> </ul>"},{"location":"linux/quizes/Kubernetes/","title":"Kubernetes","text":"<p>Question:</p> <p>You are tasked with managing Kubernetes clusters using command line tools. Based on your knowledge of Kubernetes command line syntax, answer the following questions:</p>"},{"location":"linux/quizes/Kubernetes/#q1-which-command-is-used-to-display-the-current-context-and-cluster-information","title":"Q1: Which command is used to display the current context and cluster information?","text":"<p>A. <code>kubectl status</code></p> <p>B. <code>kubectl get context</code></p> <p>C. <code>kubectl cluster-info</code></p> <p>D. <code>kubectl show</code></p>"},{"location":"linux/quizes/Kubernetes/#q2-how-would-you-create-a-deployment-in-kubernetes-using-a-configuration-file-named-deploymentyaml","title":"Q2: How would you create a deployment in Kubernetes using a configuration file named <code>deployment.yaml</code>?","text":"<p>A. <code>kubectl apply -f deployment.yaml</code></p> <p>B. <code>kubectl create -f deployment.yaml</code></p> <p>C. <code>kubectl deploy -f deployment.yaml</code></p> <p>D. <code>kubectl start -f deployment.yaml</code></p>"},{"location":"linux/quizes/Kubernetes/#q3-which-command-would-you-use-to-list-all-the-pods-in-the-default-namespace","title":"Q3: Which command would you use to list all the pods in the <code>default</code> namespace?","text":"<p>A. <code>kubectl get pods --namespace default</code></p> <p>B. <code>kubectl get pods -n default</code></p> <p>C. <code>kubectl get pods</code></p> <p>D. Both A and B</p>"},{"location":"linux/quizes/Kubernetes/#q4-how-can-you-scale-a-deployment-named-nginx-deployment-to-5-replicas","title":"Q4: How can you scale a deployment named <code>nginx-deployment</code> to 5 replicas?","text":"<p>A. <code>kubectl scale deployment nginx-deployment --replicas=5</code></p> <p>B. <code>kubectl scale --replicas=5 deployment/nginx-deployment</code></p> <p>C. <code>kubectl set replicas=5 deployment nginx-deployment</code></p> <p>D. Both A and B</p>"},{"location":"linux/quizes/Kubernetes/#q5-which-command-is-used-to-delete-a-service-named-my-service-in-kubernetes","title":"Q5: Which command is used to delete a service named <code>my-service</code> in Kubernetes?","text":"<p>A. <code>kubectl delete svc my-service</code></p> <p>B. <code>kubectl remove svc my-service</code></p> <p>C. <code>kubectl destroy svc my-service</code></p> <p>D. <code>kubectl delete service my-service</code></p>"},{"location":"linux/quizes/Kubernetes/#answers","title":"Answers:","text":"<p>Q1: Which command is used to display the current context and cluster information?</p> <ul> <li> <p>Answer: C. <code>kubectl cluster-info</code></p> </li> <li> <p>Explanation: The <code>kubectl cluster-info</code> command displays information about the current Kubernetes cluster.</p> </li> </ul> <p>Q2: How would you create a deployment in Kubernetes using a configuration file named <code>deployment.yaml</code>?</p> <ul> <li> <p>Answer: A. <code>kubectl apply -f deployment.yaml</code></p> </li> <li> <p>Explanation: The <code>kubectl apply -f deployment.yaml</code> command creates or updates resources defined in the <code>deployment.yaml</code> file.</p> </li> </ul> <p>Q3: Which command would you use to list all the pods in the <code>default</code> namespace?</p> <ul> <li> <p>Answer: D. Both A and B</p> </li> <li> <p>Explanation: Both <code>kubectl get pods --namespace default</code> and <code>kubectl get pods -n default</code> can be used to list all the pods in the <code>default</code> namespace.</p> </li> </ul> <p>Q4: How can you scale a deployment named <code>nginx-deployment</code> to 5 replicas?</p> <ul> <li> <p>Answer: D. Both A and B</p> </li> <li> <p>Explanation: Both <code>kubectl scale deployment nginx-deployment --replicas=5</code> and <code>kubectl scale --replicas=5 deployment/nginx-deployment</code> can be used to scale the deployment to 5 replicas.</p> </li> </ul> <p>Q5: Which command is used to delete a service named <code>my-service</code> in Kubernetes?</p> <ul> <li> <p>Answer: D. <code>kubectl delete service my-service</code></p> </li> <li> <p>Explanation: The <code>kubectl delete service my-service</code> command deletes the specified service from the Kubernetes cluster.</p> </li> </ul>"},{"location":"linux/quizes/Linux%20File%20Permissions/","title":"Linux File Permissions","text":"<p>Linux File Permissions:</p> <p>Question: </p> <p>You are given the following line from the output of the <code>ls -l</code> command in Linux:</p> <pre><code>-rw-r--r-- 1 user group 1024 May 16 12:34 example.txt\n</code></pre> <p>Based on this information, answer the following questions:</p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#q1-what-are-the-permissions-of-the-file-exampletxt","title":"Q1: What are the permissions of the file <code>example.txt</code>?","text":"<p>A. Read and write for the owner, read for the group and others.</p> <p>B. Read, write, and execute for the owner, read for the group and others.</p> <p>C. Read, write, and execute for the owner, group, and others.</p> <p>D. Read and write for the owner, read and execute for the group and others.</p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#q2-what-command-would-you-use-to-change-the-permissions-of-exampletxt-to-rwxr-xr-","title":"Q2: What command would you use to change the permissions of <code>example.txt</code> to <code>-rwxr-xr--</code>?","text":"<p>A. <code>chmod 755 example.txt</code></p> <p>B. <code>chmod 744 example.txt</code></p> <p>C. <code>chmod 764 example.txt</code></p> <p>D. <code>chmod 754 example.txt</code></p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#q3-what-does-the-1-in-the-output-rw-r-r-1-user-group-1024-may-16-1234-exampletxt-represent","title":"Q3: What does the <code>1</code> in the output <code>-rw-r--r-- 1 user group 1024 May 16 12:34 example.txt</code> represent?","text":"<p>A. The number of hard links to the file.</p> <p>B. The file size in bytes.</p> <p>C. The number of users who have access to the file.</p> <p>D. The inode number of the file.</p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#q4-if-you-want-to-give-the-group-write-permissions-to-the-file-exampletxt-which-command-would-you-use","title":"Q4: If you want to give the group write permissions to the file <code>example.txt</code>, which command would you use?","text":"<p>A. <code>chmod g+w example.txt</code></p> <p>B. <code>chmod g-w example.txt</code></p> <p>C. <code>chmod o+w example.txt</code></p> <p>D. <code>chmod o-w example.txt</code></p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#q5-what-is-the-effect-of-the-following-command-chmod-600-exampletxt","title":"Q5: What is the effect of the following command: <code>chmod 600 example.txt</code>?","text":"<p>A. Sets read and write permissions for the owner only.</p> <p>B. Sets read and write permissions for the owner and group.</p> <p>C. Sets read, write, and execute permissions for the owner only.</p> <p>D. Sets read, write, and execute permissions for the owner and group.</p>"},{"location":"linux/quizes/Linux%20File%20Permissions/#answers","title":"Answers:","text":"<ol> <li>A. Read and write for the owner, read for the group and others.</li> <li>A. <code>chmod 755 example.txt</code></li> <li>A. The number of hard links to the file.</li> <li>A. <code>chmod g+w example.txt</code></li> <li>A. Sets read and write permissions for the owner only.</li> </ol>"},{"location":"linux/quizes/Linux%20File%20Permissions/#answers_1","title":"Answers:","text":"<p>Q1: What are the permissions of the file <code>example.txt</code>?</p> <ul> <li> <p>Answer: A. Read and write for the owner, read for the group and others.</p> </li> <li> <p>Explanation: The permissions <code>-rw-r--r--</code> indicate that the owner has read and write permissions, while the group and others have read permissions only.</p> </li> </ul> <p>Q2: What command would you use to change the permissions of <code>example.txt</code> to <code>-rwxr-xr--</code>?</p> <ul> <li> <p>Answer: D. <code>chmod 754 example.txt</code></p> </li> <li> <p>Explanation: The permissions <code>-rwxr-xr--</code> correspond to the numerical value <code>754</code>. The owner has read, write, and execute permissions (<code>7</code>), the group has read and execute permissions (<code>5</code>), and others have read permissions (<code>4</code>).</p> </li> </ul> <p>Q3: What does the <code>1</code> in the output <code>-rw-r--r-- 1 user group 1024 May 16 12:34 example.txt</code> represent?</p> <ul> <li> <p>Answer: A. The number of hard links to the file.</p> </li> <li> <p>Explanation: The <code>1</code> in the output indicates the number of hard links to the file.</p> </li> </ul> <p>Q4: If you want to give the group write permissions to the file <code>example.txt</code>, which command would you use?</p> <ul> <li> <p>Answer: A. <code>chmod g+w example.txt</code></p> </li> <li> <p>Explanation: The command <code>chmod g+w example.txt</code> adds write permissions for the group.</p> </li> </ul> <p>Q5: What is the effect of the following command: <code>chmod 600 example.txt</code>?</p> <ul> <li> <p>Answer: A. Sets read and write permissions for the owner only.</p> </li> <li> <p>Explanation: The permissions <code>600</code> mean that the owner has read and write permissions (<code>6</code>), while the group and others have no permissions (<code>0</code> each).</p> </li> </ul>"},{"location":"linux/quizes/Networking/","title":"Networking","text":"<p>Linux Networking Configuration:</p> <p>Question:</p> <p>You are tasked with configuring network settings on a Linux system. Based on your knowledge of Linux networking configuration files and commands, answer the following questions:</p>"},{"location":"linux/quizes/Networking/#q1-which-file-is-primarily-used-to-configure-network-interfaces-on-a-debian-based-linux-system","title":"Q1: Which file is primarily used to configure network interfaces on a Debian-based Linux system?","text":"<p>A. <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p> <p>B. <code>/etc/network/interfaces</code></p> <p>C. <code>/etc/netplan/config.yaml</code></p> <p>D. <code>/etc/sysconfig/network</code></p>"},{"location":"linux/quizes/Networking/#q2-which-command-would-you-use-to-display-the-current-network-interfaces-and-their-configurations","title":"Q2: Which command would you use to display the current network interfaces and their configurations?","text":"<p>A. <code>ifconfig</code></p> <p>B. <code>netstat</code></p> <p>C. <code>ip addr show</code></p> <p>D. <code>route</code></p>"},{"location":"linux/quizes/Networking/#q3-how-would-you-restart-the-networking-service-on-a-system-using-systemd","title":"Q3: How would you restart the networking service on a system using <code>systemd</code>?","text":"<p>A. <code>service network restart</code></p> <p>B. <code>/etc/init.d/networking restart</code></p> <p>C. <code>systemctl restart networking</code></p> <p>D. <code>network restart</code></p>"},{"location":"linux/quizes/Networking/#q4-what-command-can-be-used-to-view-the-routing-table-on-a-linux-system","title":"Q4: What command can be used to view the routing table on a Linux system?","text":"<p>A. <code>netstat -r</code></p> <p>B. <code>route</code></p> <p>C. <code>ip route</code></p> <p>D. <code>all of the above</code></p>"},{"location":"linux/quizes/Networking/#q5-to-configure-a-static-ip-address-on-a-centosrhel-system-which-file-would-you-typically-modify","title":"Q5: To configure a static IP address on a CentOS/RHEL system, which file would you typically modify?","text":"<p>A. <code>/etc/network/interfaces</code></p> <p>B. <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p> <p>C. <code>/etc/resolv.conf</code></p> <p>D. <code>/etc/hostname</code></p>"},{"location":"linux/quizes/Networking/#answers","title":"Answers:","text":"<p>Q1: Which file is primarily used to configure network interfaces on a Debian-based Linux system?</p> <ul> <li> <p>Answer: B. <code>/etc/network/interfaces</code></p> </li> <li> <p>Explanation: On Debian-based systems, the <code>/etc/network/interfaces</code> file is used to configure network interfaces.</p> </li> </ul> <p>Q2: Which command would you use to display the current network interfaces and their configurations?</p> <ul> <li> <p>Answer: C. <code>ip addr show</code></p> </li> <li> <p>Explanation: The <code>ip addr show</code> command is used to display network interfaces and their configurations. Although <code>ifconfig</code> can also be used, it is deprecated in favour of the <code>ip</code> command.</p> </li> </ul> <p>Q3: How would you restart the networking service on a system using <code>systemd</code>?</p> <ul> <li> <p>Answer: C. <code>systemctl restart networking</code></p> </li> <li> <p>Explanation: The <code>systemctl restart networking</code> command is used to restart the networking service on systems using <code>systemd</code>.</p> </li> </ul> <p>Q4: What command can be used to view the routing table on a Linux system?</p> <ul> <li> <p>Answer: D. <code>all of the above</code></p> </li> <li> <p>Explanation: The commands <code>netstat -r</code>, <code>route</code>, and <code>ip route</code> can all be used to view the routing table on a Linux system.</p> </li> </ul> <p>Q5: To configure a static IP address on a CentOS/RHEL system, which file would you typically modify?</p> <ul> <li> <p>Answer: B. <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p> </li> <li> <p>Explanation: On CentOS/RHEL systems, network interface configuration is typically done by modifying the appropriate file in the <code>/etc/sysconfig/network-scripts/</code> directory, such as <code>ifcfg-eth0</code>.</p> </li> </ul>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/","title":"Stateless Linux Systems:","text":"<p>Stateless Linux Systems:</p> <p>Question:</p> <p>You are working with stateless Linux systems where persistent state information is not stored on the local machine. Based on your knowledge of stateless Linux systems, answer the following questions:</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#q1-what-is-a-key-characteristic-of-a-stateless-linux-system","title":"Q1: What is a key characteristic of a stateless Linux system?","text":"<p>A. It stores all user data locally.</p> <p>B. It does not retain state information across reboots.</p> <p>C. It requires local disk storage for operation.</p> <p>D. It always uses a graphical user interface (GUI).</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#q2-which-technology-is-often-used-to-provide-a-stateless-environment-for-linux-systems","title":"Q2: Which technology is often used to provide a stateless environment for Linux systems?","text":"<p>A. Docker</p> <p>B. VirtualBox</p> <p>C. Ansible</p> <p>D. Network File System (NFS)</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#q3-in-a-stateless-linux-system-where-is-user-data-typically-stored","title":"Q3: In a stateless Linux system, where is user data typically stored?","text":"<p>A. Locally on the user's machine</p> <p>B. On a remote server</p> <p>C. In the /var directory</p> <p>D. In the /tmp directory</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#q4-which-of-the-following-best-describes-the-purpose-of-using-a-stateless-linux-system-in-a-corporate-environment","title":"Q4: Which of the following best describes the purpose of using a stateless Linux system in a corporate environment?","text":"<p>A. To ensure that all software is installed locally on each machine</p> <p>B. To simplify system maintenance and updates by using a centralised management system</p> <p>C. To enable users to customise their local machine configurations</p> <p>D. To reduce network traffic by storing all data locally</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#q5-how-can-stateless-linux-systems-benefit-from-using-configuration-management-tools-like-ansible-or-puppet","title":"Q5: How can stateless Linux systems benefit from using configuration management tools like Ansible or Puppet?","text":"<p>A. By ensuring consistent configuration across all systems</p> <p>B. By storing all user data in local databases</p> <p>C. By providing high availability through clustering</p> <p>D. By enabling graphical user interfaces for all users</p>"},{"location":"linux/quizes/Stateless%20Linux%20Systems%3A/#answers","title":"Answers:","text":"<p>Q1: What is a key characteristic of a stateless Linux system?</p> <ul> <li> <p>Answer: B. It does not retain state information across reboots.</p> </li> <li> <p>Explanation: A stateless Linux system does not retain state information across reboots. This means that any changes made during a session are lost when the system is restarted.</p> </li> </ul> <p>Q2: Which technology is often used to provide a stateless environment for Linux systems?</p> <ul> <li> <p>Answer: D. Network File System (NFS)</p> </li> <li> <p>Explanation: NFS is often used to provide a stateless environment by storing user data and system configurations on a remote server, ensuring that data is not stored locally on the user's machine.</p> </li> </ul> <p>Q3: In a stateless Linux system, where is user data typically stored?</p> <ul> <li> <p>Answer: B. On a remote server</p> </li> <li> <p>Explanation: In a stateless Linux system, user data is typically stored on a remote server to ensure that no data is retained locally on the user's machine.</p> </li> </ul> <p>Q4: Which of the following best describes the purpose of using a stateless Linux system in a corporate environment?</p> <ul> <li> <p>Answer: B. To simplify system maintenance and updates by using a centralised management system</p> </li> <li> <p>Explanation: Stateless Linux systems simplify system maintenance and updates by using centralised management, ensuring that all systems can be updated and maintained uniformly without local state information.</p> </li> </ul> <p>Q5: How can stateless Linux systems benefit from using configuration management tools like Ansible or Puppet?</p> <ul> <li> <p>Answer: A. By ensuring consistent configuration across all systems</p> </li> <li> <p>Explanation: Configuration management tools like Ansible or Puppet help ensure consistent configuration across all systems, which is particularly important for maintaining the uniformity of stateless Linux systems.</p> </li> </ul>"},{"location":"linux/quizes/Users/","title":"Users","text":"<p>Linux User Configuration:</p> <p>Question:</p> <p>You are tasked with configuring user accounts on a Linux system. Based on your knowledge of Linux user configuration files and commands, answer the following questions:</p>"},{"location":"linux/quizes/Users/#q1-which-command-is-used-to-add-a-new-user-on-a-linux-system","title":"Q1: Which command is used to add a new user on a Linux system?","text":"<p>A. <code>useradd</code></p> <p>B. <code>adduser</code></p> <p>C. <code>newuser</code></p> <p>D. <code>createuser</code></p>"},{"location":"linux/quizes/Users/#q2-what-file-contains-user-account-information-such-as-username-user-id-uid-and-home-directory","title":"Q2: What file contains user account information such as username, user ID (UID), and home directory?","text":"<p>A. <code>/etc/group</code></p> <p>B. <code>/etc/shadow</code></p> <p>C. <code>/etc/passwd</code></p> <p>D. <code>/etc/login.defs</code></p>"},{"location":"linux/quizes/Users/#q3-which-command-can-be-used-to-change-a-users-password","title":"Q3: Which command can be used to change a user's password?","text":"<p>A. <code>passwd</code></p> <p>B. <code>chpasswd</code></p> <p>C. <code>usermod</code></p> <p>D. <code>chage</code></p>"},{"location":"linux/quizes/Users/#q4-where-are-user-passwords-stored-in-a-hashed-format-on-most-linux-systems","title":"Q4: Where are user passwords stored in a hashed format on most Linux systems?","text":"<p>A. <code>/etc/passwd</code></p> <p>B. <code>/etc/shadow</code></p> <p>C. <code>/etc/security/passwd</code></p> <p>D. <code>/etc/user</code></p>"},{"location":"linux/quizes/Users/#q5-what-is-the-purpose-of-the-etcskel-directory","title":"Q5: What is the purpose of the <code>/etc/skel</code> directory?","text":"<p>A. To store user passwords in a secure manner.</p> <p>B. To contain default files and directories that are copied to a new user's home directory when the user is created.</p> <p>C. To store system-wide configuration files.</p> <p>D. To contain the list of users with administrative privileges.</p>"},{"location":"linux/quizes/Users/#answers","title":"Answers:","text":"<p>Q1: Which command is used to add a new user on a Linux system?</p> <ul> <li> <p>Answer: A. <code>useradd</code></p> </li> <li> <p>Explanation: The <code>useradd</code> command is used to create a new user account on a Linux system.</p> </li> </ul> <p>Q2: What file contains user account information such as username, user ID (UID), and home directory?</p> <ul> <li> <p>Answer: C. <code>/etc/passwd</code></p> </li> <li> <p>Explanation: The <code>/etc/passwd</code> file contains information about user accounts, including the username, UID, and home directory.</p> </li> </ul> <p>Q3: Which command can be used to change a user's password?</p> <ul> <li> <p>Answer: A. <code>passwd</code></p> </li> <li> <p>Explanation: The <code>passwd</code> command is used to change a user's password.</p> </li> </ul> <p>Q4: Where are user passwords stored in a hashed format on most Linux systems?</p> <ul> <li> <p>Answer: B. <code>/etc/shadow</code></p> </li> <li> <p>Explanation: The <code>/etc/shadow</code> file contains user passwords in a hashed format for security purposes.</p> </li> </ul> <p>Q5: What is the purpose of the <code>/etc/skel</code> directory?</p> <ul> <li> <p>Answer: B. To contain default files and directories that are copied to a new user's home directory when the user is created.</p> </li> <li> <p>Explanation: The <code>/etc/skel</code> directory holds default configuration files and directories that are copied to the home directory of new users when their accounts are created.</p> </li> </ul>"},{"location":"linux/running/linux-process/","title":"Linux process","text":""},{"location":"linux/running/linux-process/#linux-process-management-study-sheet","title":"Linux Process Management Study Sheet","text":"<p>Purpose: To provide a quick reference for managing processes on a Linux system.</p>"},{"location":"linux/running/linux-process/#viewing-processes","title":"Viewing Processes","text":"<ol> <li> <p>List Running Processes:     <pre><code>ps aux\n</code></pre></p> <ul> <li>Common columns:</li> <li><code>USER</code>: User who owns the process.</li> <li><code>PID</code>: Process ID.</li> <li><code>%CPU</code>: CPU usage.</li> <li><code>%MEM</code>: Memory usage.</li> <li><code>COMMAND</code>: Command that started the process.</li> </ul> </li> <li> <p>Interactive Process Viewer:     <pre><code>top\n</code></pre></p> <ul> <li>Press <code>q</code> to quit.</li> <li><code>htop</code> (an enhanced version of <code>top</code>):   <pre><code>sudo apt install htop  # Debian/Ubuntu\nsudo yum install htop  # Red Hat/CentOS\nhtop\n</code></pre></li> <li>Use arrow keys to navigate, <code>F10</code> to quit.</li> </ul> </li> <li> <p>Tree View of Processes:     <pre><code>pstree\n</code></pre></p> <ul> <li>Include PIDs:   <pre><code>pstree -p\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/linux-process/#managing-processes","title":"Managing Processes","text":"<ol> <li> <p>Start a Process:     <pre><code>&lt;command&gt;\n</code></pre></p> <ul> <li>Start in the background:   <pre><code>&lt;command&gt; &amp;\n</code></pre></li> </ul> </li> <li> <p>Foreground and Background Processes:</p> <ul> <li>Send a running process to the background:   <pre><code>&lt;Ctrl+Z&gt;\nbg %&lt;job-number&gt;\n</code></pre></li> <li>Bring a background process to the foreground:   <pre><code>fg %&lt;job-number&gt;\n</code></pre></li> <li>List jobs:   <pre><code>jobs\n</code></pre></li> </ul> </li> <li> <p>Kill a Process:</p> <ul> <li>Gracefully terminate (SIGTERM):   <pre><code>kill &lt;PID&gt;\n</code></pre></li> <li>Forcefully terminate (SIGKILL):   <pre><code>kill -9 &lt;PID&gt;\n</code></pre></li> <li>Kill by process name:   <pre><code>pkill &lt;process-name&gt;\n</code></pre></li> <li>Kill all processes owned by a user:   <pre><code>pkill -u &lt;username&gt;\n</code></pre></li> </ul> </li> <li> <p>Sending Signals to Processes:</p> <ul> <li>List all signals:   <pre><code>kill -l\n</code></pre></li> <li>Send a specific signal (e.g., SIGHUP):   <pre><code>kill -HUP &lt;PID&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/linux-process/#monitoring-and-controlling-resource-usage","title":"Monitoring and Controlling Resource Usage","text":"<ol> <li> <p>Limit CPU Usage:</p> <ul> <li>Use <code>cpulimit</code> to restrict CPU usage:   <pre><code>sudo apt install cpulimit  # Debian/Ubuntu\nsudo yum install epel-release &amp;&amp; sudo yum install cpulimit  # Red Hat/CentOS\nsudo cpulimit -p &lt;PID&gt; -l &lt;percentage&gt;\n</code></pre></li> </ul> </li> <li> <p>Limit Memory Usage:</p> <ul> <li>Use <code>cgroups</code> to restrict memory usage:   <pre><code>sudo cgcreate -g memory:/mygroup\nsudo cgset -r memory.limit_in_bytes=100M mygroup\nsudo cgexec -g memory:/mygroup &lt;command&gt;\n</code></pre></li> </ul> </li> <li> <p>Monitor Process Resource Usage:</p> <ul> <li>Check CPU and memory usage of a process:   <pre><code>top -p &lt;PID&gt;\n</code></pre></li> <li>Use <code>pidstat</code> for detailed statistics:   <pre><code>sudo apt install sysstat  # Debian/Ubuntu\nsudo yum install sysstat  # Red Hat/CentOS\npidstat -p &lt;PID&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/linux-process/#process-scheduling","title":"Process Scheduling","text":"<ol> <li> <p>Change Process Priority:</p> <ul> <li>View current priority (nice value):   <pre><code>ps -l -p &lt;PID&gt;\n</code></pre></li> <li>Start a process with a specific nice value:   <pre><code>nice -n &lt;nice-value&gt; &lt;command&gt;\n</code></pre></li> <li>Change the priority of an existing process:   <pre><code>renice &lt;nice-value&gt; -p &lt;PID&gt;\n</code></pre></li> </ul> </li> <li> <p>Real-time Process Monitoring:</p> <ul> <li>Use <code>watch</code> to execute a command periodically:   <pre><code>watch -n &lt;interval&gt; &lt;command&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/linux-process/#process-management-tools","title":"Process Management Tools","text":"<ol> <li> <p>strace: Trace system calls and signals.    <pre><code>strace -p &lt;PID&gt;\n</code></pre></p> </li> <li> <p>lsof: List open files associated with processes.    <pre><code>lsof -p &lt;PID&gt;\n</code></pre></p> </li> <li> <p>pgrep: Find processes by name.    <pre><code>pgrep &lt;process-name&gt;\n</code></pre></p> </li> <li> <p>pkill: Send signals to processes by name.    <pre><code>pkill &lt;process-name&gt;\n</code></pre></p> </li> </ol> <p>By using this study sheet, new starters can efficiently manage processes on a Linux system, ensuring proper control over system resources and processes.</p>"},{"location":"linux/running/system-monitoring/","title":"System monitoring","text":""},{"location":"linux/running/system-monitoring/#linux-system-monitoring-study-sheet","title":"Linux System Monitoring Study Sheet","text":"<p>Purpose: To provide a quick reference for monitoring system performance and resource usage on a Linux system.</p>"},{"location":"linux/running/system-monitoring/#basic-system-monitoring","title":"Basic System Monitoring","text":"<ol> <li> <p>System Uptime:     <pre><code>uptime\n</code></pre></p> <ul> <li>Displays system uptime, number of users, and load averages.</li> </ul> </li> <li> <p>System Load and CPU Usage:</p> <ul> <li>Use <code>top</code> to monitor real-time system load and CPU usage:   <pre><code>top\n</code></pre></li> <li>Enhanced version of <code>top</code>:   <pre><code>htop\n</code></pre></li> <li>Display CPU information:   <pre><code>lscpu\n</code></pre></li> </ul> </li> <li> <p>Memory Usage:</p> <ul> <li>Display memory usage:   <pre><code>free -h\n</code></pre></li> <li>Display memory information:   <pre><code>vmstat\n</code></pre></li> </ul> </li> <li> <p>Disk Usage:</p> <ul> <li>Display disk usage:   <pre><code>df -h\n</code></pre></li> <li>Display disk space usage by directory:   <pre><code>du -h --max-depth=1 /path/to/directory\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/system-monitoring/#advanced-system-monitoring","title":"Advanced System Monitoring","text":"<ol> <li> <p>Detailed CPU and Memory Usage:</p> <ul> <li>Use <code>pidstat</code> for per-process CPU and memory usage:   <pre><code>sudo apt install sysstat  # Debian/Ubuntu\nsudo yum install sysstat  # Red Hat/CentOS\npidstat\n</code></pre></li> <li>Example for monitoring a specific process:   <pre><code>pidstat -p &lt;PID&gt;\n</code></pre></li> </ul> </li> <li> <p>I/O Statistics:</p> <ul> <li>Use <code>iostat</code> to monitor I/O device load:   <pre><code>iostat\n</code></pre></li> <li>Example for monitoring every 5 seconds:   <pre><code>iostat -x 5\n</code></pre></li> </ul> </li> <li> <p>Network Statistics:</p> <ul> <li>Use <code>netstat</code> to display network connections and statistics:   <pre><code>netstat -tuln\n</code></pre></li> <li>Use <code>ss</code> as an alternative to <code>netstat</code>:   <pre><code>ss -tuln\n</code></pre></li> <li>Display network interface statistics:   <pre><code>ifconfig\n</code></pre></li> <li>Use <code>ip</code> as an alternative to <code>ifconfig</code>:   <pre><code>ip a\n</code></pre></li> </ul> </li> <li> <p>Disk I/O Monitoring:</p> <ul> <li>Use <code>iotop</code> to monitor disk I/O:   <pre><code>sudo apt install iotop  # Debian/Ubuntu\nsudo yum install iotop  # Red Hat/CentOS\nsudo iotop\n</code></pre></li> </ul> </li> <li> <p>System Logs:</p> <ul> <li>View system logs:   <pre><code>sudo journalctl -xe\n</code></pre></li> <li>View kernel ring buffer:   <pre><code>dmesg\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/system-monitoring/#monitoring-tools","title":"Monitoring Tools","text":"<ol> <li> <p>sar: System activity report.</p> <ul> <li>Install <code>sysstat</code> package:   <pre><code>sudo apt install sysstat  # Debian/Ubuntu\nsudo yum install sysstat  # Red Hat/CentOS\n</code></pre></li> <li>Enable data collection:   <pre><code>sudo systemctl enable sysstat\nsudo systemctl start sysstat\n</code></pre></li> <li>Display CPU usage:   <pre><code>sar -u 1 3\n</code></pre></li> <li>Display memory usage:   <pre><code>sar -r 1 3\n</code></pre></li> </ul> </li> <li> <p>nmon: Interactive system performance monitoring tool.</p> <ul> <li>Install <code>nmon</code>:   <pre><code>sudo apt install nmon  # Debian/Ubuntu\nsudo yum install nmon  # Red Hat/CentOS\n</code></pre></li> <li>Start <code>nmon</code>:   <pre><code>nmon\n</code></pre></li> </ul> </li> <li> <p>glances: Cross-platform monitoring tool.</p> <ul> <li>Install <code>glances</code>:   <pre><code>sudo apt install glances  # Debian/Ubuntu\nsudo yum install glances  # Red Hat/CentOS\n</code></pre></li> <li>Start <code>glances</code>:   <pre><code>glances\n</code></pre></li> </ul> </li> <li> <p>Collectd: System statistics collection daemon.</p> <ul> <li>Install <code>collectd</code>:   <pre><code>sudo apt install collectd  # Debian/Ubuntu\nsudo yum install collectd  # Red Hat/CentOS\n</code></pre></li> <li>Start <code>collectd</code>:   <pre><code>sudo systemctl start collectd\nsudo systemctl enable collectd\n</code></pre></li> </ul> </li> <li> <p>Prometheus and Grafana: Advanced monitoring and alerting toolkit.</p> <ul> <li>Prometheus:<ul> <li>Install and configure Prometheus.</li> </ul> </li> <li>Grafana:<ul> <li>Install and configure Grafana for data visualization.</li> </ul> </li> </ul> </li> </ol> <p>By using this study sheet, new starters can efficiently monitor system performance and resource usage on a Linux system, ensuring optimal operation and quick troubleshooting.</p>"},{"location":"linux/running/top/","title":"top","text":""},{"location":"linux/running/top/#explain-the-output-of-top","title":"Explain the output of top","text":"<p>The <code>top</code> command in Unix-based operating systems provides a dynamic, real-time view of the system's processes, including their CPU and memory usage. Here's an explanation of the various sections and columns typically displayed by the <code>top</code> command:</p> <p>Here's an example of what the output of <code>top</code> might look like:</p> <pre><code>top - 15:32:18 up 10 days,  3:45,  3 users,  load average: 0.05, 0.03, 0.00\nTasks: 116 total,   1 running, 115 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  2048576 total,   132456 free,   854312 used,  1061808 buff/cache\nKiB Swap:  2048572 total,  2048572 free,        0 used.   753256 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 alice     20   0  162528   2148   1348 S   0.5  0.1   0:02.45 top\n 5678 bob       20   0  404432  12048   8980 S   0.3  0.6   1:13.67 firefox\n 9012 charlie   20   0  304732   7820   5256 S   0.1  0.4   0:33.12 python\n</code></pre>"},{"location":"linux/running/top/#header-section","title":"Header Section","text":"<p>The header section of <code>top</code> provides an overview of the system's current state.</p> <ol> <li>Uptime and Load Average:</li> <li><code>uptime</code>: Shows how long the system has been running.</li> <li> <p><code>load average</code>: Displays the average system load over the last 1, 5, and 15 minutes. These numbers indicate how many processes are waiting for CPU time.</p> </li> <li> <p>Tasks:</p> </li> <li> <p>Displays the total number of tasks (processes) and their states:</p> <ul> <li><code>total</code>: Total number of tasks.</li> <li><code>running</code>: Number of tasks currently running.</li> <li><code>sleeping</code>: Number of tasks sleeping (idle).</li> <li><code>stopped</code>: Number of stopped tasks.</li> <li><code>zombie</code>: Number of zombie tasks (terminated but not reaped by their parent).</li> </ul> </li> <li> <p>CPU(s):</p> </li> <li> <p>Shows the percentage of CPU usage broken down into different categories:</p> <ul> <li><code>us</code>: User space (non-kernel code) processes.</li> <li><code>sy</code>: System (kernel code) processes.</li> <li><code>ni</code>: Processes with changed nice value.</li> <li><code>id</code>: Idle CPU percentage.</li> <li><code>wa</code>: Time waiting for I/O completion.</li> <li><code>hi</code>: Hardware interrupts.</li> <li><code>si</code>: Software interrupts.</li> <li><code>st</code>: Time stolen from a virtual machine.</li> </ul> </li> <li> <p>Memory:</p> </li> <li><code>Mem</code>: Shows the total, used, free, shared, buffer/cache, and available memory.</li> <li><code>Swap</code>: Shows the total, used, and free swap space.</li> </ol>"},{"location":"linux/running/top/#task-list-section","title":"Task List Section","text":"<p>The task list section displays information about individual processes. Common columns include:</p> <ol> <li>PID: Process ID, a unique identifier for each process.</li> <li>USER: The username of the process owner.</li> <li>PR: Priority of the process.</li> <li>NI: Nice value of the process (affects priority).</li> <li>VIRT: Total virtual memory used by the process.</li> <li>RES: Resident memory (physical memory) used by the process.</li> <li>SHR: Shared memory used by the process.</li> <li>S: Process status (e.g., R for running, S for sleeping, Z for zombie).</li> <li>%CPU: Percentage of CPU usage by the process.</li> <li>%MEM: Percentage of memory usage by the process.</li> <li>TIME+: Total CPU time the process has used since it started.</li> <li>COMMAND: The command or name of the process.</li> </ol>"},{"location":"linux/running/top/#example-output","title":"Example Output","text":"<p>Here's an example of what the output of <code>top</code> might look like:</p> <pre><code>top - 15:32:18 up 10 days,  3:45,  3 users,  load average: 0.05, 0.03, 0.00\nTasks: 116 total,   1 running, 115 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  2048576 total,   132456 free,   854312 used,  1061808 buff/cache\nKiB Swap:  2048572 total,  2048572 free,        0 used.   753256 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 1234 alice     20   0  162528   2148   1348 S   0.5  0.1   0:02.45 top\n 5678 bob       20   0  404432  12048   8980 S   0.3  0.6   1:13.67 firefox\n 9012 charlie   20   0  304732   7820   5256 S   0.1  0.4   0:33.12 python\n</code></pre>"},{"location":"linux/running/top/#detailed-explanation-of-the-example","title":"Detailed Explanation of the Example","text":"<ul> <li>System Uptime and Load Average:</li> <li>The system has been up for 10 days and 3 hours and 45 minutes.</li> <li> <p>The load averages are 0.05 (1 minute), 0.03 (5 minutes), and 0.00 (15 minutes), indicating a lightly loaded system.</p> </li> <li> <p>Tasks:</p> </li> <li> <p>There are 116 total processes, with 1 running, 115 sleeping, and no stopped or zombie processes.</p> </li> <li> <p>CPU Usage:</p> </li> <li> <p>0.2% of CPU time is spent on user processes, 0.1% on system processes, and 99.7% of the CPU is idle.</p> </li> <li> <p>Memory Usage:</p> </li> <li>The system has a total of 2048576 KiB of memory, with 132456 KiB free, 854312 KiB used, and 1061808 KiB in buffer/cache.</li> <li> <p>The swap space is not used in this example.</p> </li> <li> <p>Process Details:</p> </li> <li>PID 1234 (owned by user \"alice\") is the <code>top</code> process itself, using 0.5% CPU and 0.1% memory.</li> <li>PID 5678 (owned by user \"bob\") is <code>firefox</code>, using 0.3% CPU and 0.6% memory.</li> <li>PID 9012 (owned by user \"charlie\") is <code>python</code>, using 0.1% CPU and 0.4% memory.</li> </ul> <p>Understanding the output of the <code>top</code> command is essential for system administrators and developers to monitor system performance, diagnose issues, and optimise resource usage.</p>"},{"location":"linux/running/top/#trouble-shooting-high-wa","title":"Trouble Shooting: high wa","text":"<pre><code>top - up 545 days, 18:18, 1 user, load average: 1.72, 1.77, 1.46\nTasks: 82 total, 1 running, 81 sleeping, 0 stopped, 0 zombie\nCpu(s): 3.3%us, 1.0%sy, 0.0%ni, 0.0%id, 95.7%wa, 0.0%hi, 0.0%si, 0.0%st\nMem: 1024012k total, 946852k used, 77160k free, 148k buffers\nSwap: 0k total, 0k used, 0k free, 63920k cached\n\nPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND\n1464 0 16 0 75268 4096 2024 S 1.3 0.4 543:55.07 webd0\n1503 0 16 0 78516 4996 2188 S 1.3 0.5 8002:59 fcpd0\n1568 0 16 0 91552 7212 3800 S 0.7 0.7 2419:37 snmpd\n4332 6000 16 0 2816 1292 1036 R 0.7 0.1 0:00.13 top\n2559 0 16 0 33976 3276 2028 S 0.3 0.3 0:21.70 sshd\n</code></pre> <p>System Uptime and Load</p> <ul> <li>The system has been running for an extended period of 545 days.</li> <li>The load averages are 1.72 (1 minute), 1.77 (5 minutes), and 1.46 (15 minutes). These values indicate a moderately loaded system, with the 1-minute and 5-minute averages slightly higher than the 15-minute average, suggesting recent increased activity.</li> </ul> <p>Tasks and CPU Usage</p> <ul> <li>The system is managing 82 total tasks, with only 1 running and 81 sleeping. There are no stopped or zombie processes.</li> <li>CPU utilisation shows 3.3% user processes and 1.0% system processes, while an overwhelming 95.7% of CPU time is spent waiting for I/O operations. This high I/O wait time indicates potential bottlenecks in disk or network I/O, severely impacting system performance.</li> </ul> <p>Memory and Swap Usage</p> <ul> <li>The system has 1024012 KiB of total memory, with 946852 KiB used and 77160 KiB free, showing high memory utilisation.</li> <li>There is no swap space configured or used, which might be a concern if the system runs out of physical memory.</li> <li>A small amount of memory (148 KiB) is allocated for buffers, and 63920 KiB is cached, indicating some level of optimisation for repeated data access.</li> </ul> <p>Top Processes</p> <ul> <li>The <code>webd0</code> and <code>fcpd0</code> processes are the top CPU consumers, each using 1.3% CPU. Notably, <code>fcpd0</code> has accumulated significant CPU time (8002:59), suggesting a long-running or resource-intensive process.</li> <li>The <code>snmpd</code> process is also a notable CPU consumer with 0.7% usage and a high total CPU time of 2419:37, indicating it has been active for a considerable duration.</li> <li>The <code>top</code> command itself is consuming a minor amount of CPU (0.7%) while providing real-time system monitoring.</li> <li>The <code>sshd</code> process is using minimal CPU (0.3%) and memory, indicating it is not heavily impacting system resources.</li> </ul>"},{"location":"linux/running/top/#key-findings","title":"Key Findings","text":"<ol> <li>High I/O Wait Time: The system's performance is significantly impacted by I/O wait, with 95.7% of CPU time in a waiting state. This suggests potential issues with disk or network performance that need to be investigated and addressed to optimise system efficiency.</li> <li>Extended Uptime and Load: The system has been running for a prolonged period, with moderate load averages. Although the load is manageable, continuous monitoring is essential to prevent any degradation over time.</li> <li>Memory Utilisation: High memory usage with no swap space configured could lead to potential memory exhaustion. Configuring swap space could provide a buffer against unexpected memory demands.</li> <li>Process Analysis: The <code>webd0</code> and <code>fcpd0</code> processes are consistent CPU consumers, with <code>fcpd0</code> particularly noteworthy for its extensive CPU time usage. The high activity of the <code>snmpd</code> process also warrants further investigation to ensure it is functioning as intended.</li> </ol>"},{"location":"linux/running/top/#recommendations","title":"Recommendations","text":"<ul> <li>Investigate and Mitigate I/O Bottlenecks: Perform a detailed analysis of disk and network I/O to identify and resolve bottlenecks. This may involve hardware upgrades or optimising existing resources.</li> <li>Configure Swap Space: Adding swap space can help prevent system crashes due to memory exhaustion and provide additional flexibility for handling memory spikes.</li> <li>Monitor and Optimise Long-Running Processes: Review the <code>fcpd0</code> and <code>snmpd</code> processes to ensure they are operating efficiently and not consuming unnecessary resources. Consider optimising or upgrading these processes if needed.</li> </ul>"},{"location":"linux/running/top/#alert-levels","title":"Alert Levels","text":"<p>As a Site Reliability Engineer (SRE), assessing the criticality of the observations from the <code>top</code> command output requires a balanced consideration of the potential impact on system performance and stability. Here\u2019s a suggested alert level based on the key findings:</p> <ol> <li>Critical (P1)</li> <li>High (P2)</li> <li>Moderate (P3)</li> <li>Low (P4)</li> </ol>"},{"location":"linux/running/top/#assessment-and-alert-level","title":"Assessment and Alert Level","text":"<ol> <li> <p>High I/O Wait Time (95.7% I/O Wait) - Critical (P1)</p> <ul> <li>Justification: This is the most alarming metric, as such a high I/O wait time suggests severe performance issues related to disk or network I/O. If the system continues to experience this level of I/O wait, it could lead to significant performance degradation, affecting application responsiveness and user experience.</li> <li>Action: Immediate investigation and remediation are required. This might involve checking disk health, examining network throughput, or identifying processes causing excessive I/O load.</li> </ul> </li> <li> <p>Memory Utilisation - Moderate (P3)</p> <ul> <li>Justification: While memory usage is high, there is still some free memory available, and the system is not currently using swap space. However, the absence of swap space poses a risk if memory demands suddenly increase.</li> <li>Action: Monitor memory usage closely and consider configuring swap space to provide a buffer against potential memory exhaustion.</li> </ul> </li> <li> <p>Extended Uptime and Load Averages - Low (P4)</p> <ul> <li>Justification: The system has been running for a long time with moderate load averages. While the load is slightly elevated, it is not immediately concerning. However, continuous monitoring is recommended.</li> <li>Action: Regularly review load averages and ensure they remain within acceptable limits. Plan for routine maintenance and potential system reboots if necessary to prevent long-term degradation.</li> </ul> </li> <li> <p>Long-Running Processes (<code>fcpd0</code> and <code>snmpd</code>) - Moderate (P3)</p> <ul> <li>Justification: These processes are consuming significant CPU time and should be reviewed to ensure they are not causing unnecessary load. While not immediately critical, inefficiencies in these processes could lead to higher resource consumption over time.</li> <li>Action: Investigate these processes to ensure they are optimised. Look for opportunities to reduce their CPU usage or determine if they can be reconfigured or updated.</li> </ul> </li> </ol>"},{"location":"linux/running/top/#summary","title":"Summary","text":"<p>The primary concern is the critical I/O wait time, which warrants an immediate and high-priority alert (P1). The memory utilisation and long-running processes, while noteworthy, do not pose an immediate threat and are assigned a moderate priority (P3). The system's extended uptime and load averages are considered low priority (P4) but should be monitored regularly to ensure continued stability.</p> <p>By categorising these issues with appropriate alert levels, you can prioritise responses and allocate resources effectively to maintain system performance and reliability.</p>"},{"location":"linux/running/troubleshooting/","title":"Troubleshooting","text":""},{"location":"linux/running/troubleshooting/#debuggingtroubleshooting-skills-study-sheet","title":"Debugging/Troubleshooting Skills Study Sheet","text":"<p>Purpose: To provide a quick reference for debugging and troubleshooting at the application, infrastructure/system, and Linux levels.</p>"},{"location":"linux/running/troubleshooting/#application-level-debugging","title":"Application Level Debugging","text":"<ol> <li> <p>Identify Symptoms:</p> <ul> <li>Check logs:    <pre><code>tail -f /var/log/app.log\n</code></pre></li> <li>Look for error messages or stack traces.</li> </ul> </li> <li> <p>Check Application Status:</p> <ul> <li>Verify if the application is running:   <pre><code>ps aux | grep &lt;application-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Restart the Application:</p> <ul> <li>Use system service manager (e.g., <code>systemctl</code>):   <pre><code>sudo systemctl restart &lt;application-name&gt;\n</code></pre></li> <li>Check status:   <pre><code>sudo systemctl status &lt;application-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Inspect Logs:</p> <ul> <li>Application logs:   <pre><code>tail -n 100 /var/log/&lt;application&gt;.log\n</code></pre></li> <li>System logs:   <pre><code>journalctl -u &lt;application-name&gt;\n</code></pre></li> </ul> </li> <li> <p>Trace Issues:</p> <ul> <li>Use <code>strace</code> to trace system calls:   <pre><code>strace -p &lt;pid&gt;\n</code></pre></li> </ul> </li> <li> <p>Check Dependencies:</p> <ul> <li>Verify all dependencies are installed and properly configured.</li> </ul> </li> <li> <p>Network Issues:</p> <ul> <li>Check network connectivity if the application relies on network services.   <pre><code>ping &lt;service-host&gt;\ntelnet &lt;service-host&gt; &lt;port&gt;\n</code></pre></li> </ul> </li> <li> <p>Resource Usage:</p> <ul> <li>Check resource usage (CPU, memory):   <pre><code>top\nhtop\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/troubleshooting/#infrastructuresystem-level-troubleshooting","title":"Infrastructure/System Level Troubleshooting","text":"<ol> <li> <p>IO Issues:</p> <ul> <li>Check disk usage:   <pre><code>df -h\n</code></pre></li> <li>Monitor disk IO:   <pre><code>iostat -x 1\n</code></pre></li> </ul> </li> <li> <p>Network/Connectivity Issues:</p> <ul> <li>Check network interfaces:   <pre><code>ip a\n</code></pre></li> <li>Test connectivity:   <pre><code>ping &lt;hostname&gt;\ntraceroute &lt;hostname&gt;\n</code></pre></li> <li>Inspect network traffic:   <pre><code>tcpdump -i eth0\n</code></pre></li> </ul> </li> <li> <p>Resource Exhaustion:</p> <ul> <li>Check file descriptors usage:   <pre><code>lsof | wc -l\n</code></pre></li> <li>Increase file descriptor limits if necessary:   <pre><code>ulimit -n 4096\n</code></pre></li> </ul> </li> <li> <p>CPU and Memory Usage:</p> <ul> <li>Monitor CPU usage:   <pre><code>top\n</code></pre></li> <li>Check memory usage:   <pre><code>free -m\nvmstat 1\n</code></pre></li> </ul> </li> <li> <p>Check System Logs:</p> <ul> <li>System logs:   <pre><code>dmesg\ntail -f /var/log/syslog\n</code></pre></li> <li>Check for hardware errors, kernel messages, etc.</li> </ul> </li> </ol>"},{"location":"linux/running/troubleshooting/#linux-level-troubleshooting","title":"Linux Level Troubleshooting","text":"<ol> <li> <p>Processes and Threads:</p> <ul> <li>List all processes:   <pre><code>ps aux\n</code></pre></li> <li>Check specific process details:   <pre><code>ps -ef | grep &lt;process-name&gt;\n</code></pre></li> <li>Monitor threads:   <pre><code>top -H -p &lt;pid&gt;\n</code></pre></li> </ul> </li> <li> <p>Memory Usage/Allocation:</p> <ul> <li>Check memory usage:   <pre><code>free -m\n</code></pre></li> <li>Detailed memory info:   <pre><code>cat /proc/meminfo\n</code></pre></li> <li>Check memory usage by process:   <pre><code>pmap -x &lt;pid&gt;\n</code></pre></li> </ul> </li> <li> <p>Disk Usage:</p> <ul> <li>Check disk usage:   <pre><code>df -h\n</code></pre></li> <li>Check inode usage:   <pre><code>df -i\n</code></pre></li> <li>Find large files:   <pre><code>find / -type f -size +100M\n</code></pre></li> </ul> </li> <li> <p>Performance Monitoring:</p> <ul> <li>Real-time performance monitoring:   <pre><code>top\nhtop\n</code></pre></li> <li>System performance statistics:   <pre><code>sar -u 1 10\n</code></pre></li> </ul> </li> <li> <p>Kernel Logs:</p> <ul> <li>Check kernel ring buffer:   <pre><code>dmesg\n</code></pre></li> <li>Monitor kernel logs:   <pre><code>tail -f /var/log/kern.log\n</code></pre></li> </ul> </li> <li> <p>System Resource Limits:</p> <ul> <li>Check resource limits:   <pre><code>ulimit -a\n</code></pre></li> <li>Increase limits if necessary:   <pre><code>ulimit -n 4096\n</code></pre></li> </ul> </li> </ol>"},{"location":"linux/running/troubleshooting/#general-troubleshooting-tips","title":"General Troubleshooting Tips","text":"<ol> <li> <p>Document Everything:</p> <ul> <li>Keep detailed notes on what was checked and any changes made.</li> </ul> </li> <li> <p>Use a Systematic Approach:</p> <ul> <li>Follow a logical and structured troubleshooting process to avoid missing steps.</li> </ul> </li> <li> <p>Leverage Tools and Utilities:</p> <ul> <li>Use appropriate tools for each layer of troubleshooting (e.g., <code>top</code>, <code>htop</code>, <code>strace</code>, <code>tcpdump</code>).</li> </ul> </li> <li> <p>Consult Documentation:</p> <ul> <li>Refer to application and system documentation for specific error codes and troubleshooting steps.</li> </ul> </li> </ol> <p>By using this study sheet, new starters can effectively diagnose and resolve issues at the application, infrastructure/system, and Linux levels, ensuring smooth operation and minimal downtime.</p>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/","title":"Aggregate Error Count in Log Messages","text":""},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#problem-statement","title":"Problem Statement","text":"<p>You are given a list of log entries where each log entry contains a timestamp, a severity level (INFO, WARNING, ERROR), and a message. Your task is to write a Python function to parse the logs and count the number of <code>ERROR</code> messages, aggregating them based on the error message content.</p>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#function-signature","title":"Function Signature","text":"<pre><code>def count_aggregated_errors(logs: List[str]) -&gt; Dict[str, int]:\n    pass\n</code></pre>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#input","title":"Input","text":"<ul> <li><code>logs</code>: A list of strings, each string representing a log entry in the format: <code>\"[timestamp] [severity] message\"</code>.</li> </ul>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#output","title":"Output","text":"<ul> <li>Return a dictionary with keys as unique error messages and values as the count of those messages.</li> </ul>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#example","title":"Example","text":"<pre><code>logs = [\n    \"[2023-05-20 12:00:00] INFO User logged in\",\n    \"[2023-05-20 12:01:00] WARNING Disk space low\",\n    \"[2023-05-20 12:02:00] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:02:10] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:03:00] INFO User logged out\",\n    \"[2023-05-20 12:04:00] ERROR Failed to load resource\",\n    \"[2023-05-20 12:04:05] ERROR Unable to connect to database\"\n]\n\nresult = count_aggregated_errors(logs)\n# result should be: {'Unable to connect to database': 3, 'Failed to load resource': 1}\n</code></pre>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#python-solution","title":"Python Solution","text":"<p>To tackle this challenge, you can utilize Python's <code>collections.Counter</code> to efficiently count occurrences of each unique error message.</p>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#python-code","title":"Python Code","text":"<pre><code>from typing import List, Dict\nfrom collections import Counter\n\ndef count_aggregated_errors(logs: List[str]) -&gt; Dict[str, int]:\n    error_messages = Counter()\n\n    for log in logs:\n        parts = log.split(' ', 3)  # Split into three parts to isolate the message\n        if parts[1] == \"ERROR\":\n            message = parts[3].strip()  # Get the actual message content\n            error_messages[message] += 1\n\n    return dict(error_messages)\n\n# Example usage\nlogs = [\n    \"[2023-05-20 12:00:00] INFO User logged in\",\n    \"[2023-05-20 12:01:00] WARNING Disk space low\",\n    \"[2023-05-20 12:02:00] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:02:10] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:03:00] INFO User logged out\",\n    \"[2023-05-20 12:04:00] ERROR Failed to load resource\",\n    \"[2023-05-20 12:04:05] ERROR Unable to connect to database\"\n]\n\nprint(count_aggregated_errors(logs))\n# Output: {'Unable to connect to database': 3, 'Failed to load resource': 1}\n</code></pre>"},{"location":"python/challenges/Aggregate%20Error%20Count%20in%20Log%20Messages/#explanation","title":"Explanation","text":"<ol> <li>Counter Initialization: <code>error_messages</code> is initialized as a <code>Counter</code> object, which helps in automatically handling the counting of unique messages.</li> <li>Log Parsing: Each log entry is split only three times (<code>log.split(' ', 3)</code>) to ensure that the full error message is captured without being split further. This captures the timestamp, severity, and the full message.</li> <li>Message Counting: Only entries with a severity of \"ERROR\" are considered. The error message (<code>parts[3]</code>) is stripped of leading and trailing spaces and added to the <code>Counter</code>.</li> <li>Return Result: The <code>Counter</code> object, which contains the counts of each unique error message, is converted to a dictionary and returned.</li> </ol> <p>This approach efficiently processes the log entries and provides a detailed count of error messages, making it easy to identify common issues recorded in the logs.</p>"},{"location":"python/challenges/Binary%20Search/","title":"Challenge: Binary Search","text":""},{"location":"python/challenges/Binary%20Search/#problem-statement","title":"Problem Statement","text":"<p>You are given a sorted list of integers and a target value. Your task is to implement a function that performs a binary search to find the index of the target value in the list. If the target value is not present in the list, return <code>-1</code>.</p>"},{"location":"python/challenges/Binary%20Search/#function-signature","title":"Function Signature","text":"<pre><code>def binary_search(arr: List[int], target: int) -&gt; int:\n    pass\n</code></pre>"},{"location":"python/challenges/Binary%20Search/#input","title":"Input","text":"<ul> <li><code>arr</code> (1 \u2264 |arr| \u2264 10^5): A list of integers sorted in ascending order.</li> <li><code>target</code> (\u221210^9 \u2264 target \u2264 10^9): An integer target value to search for in the list.</li> </ul>"},{"location":"python/challenges/Binary%20Search/#output","title":"Output","text":"<ul> <li>Return the index of <code>target</code> in the list if it exists, otherwise return <code>-1</code>.</li> </ul>"},{"location":"python/challenges/Binary%20Search/#example","title":"Example","text":"<pre><code>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 5\nresult = binary_search(arr, target)\n# result should be: 4\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 10\nresult = binary_search(arr, target)\n# result should be: -1\n</code></pre>"},{"location":"python/challenges/Binary%20Search/#constraints","title":"Constraints","text":"<ul> <li>The list is sorted in ascending order.</li> <li>The length of the list is between 1 and 100,000.</li> </ul>"},{"location":"python/challenges/Binary%20Search/#reference-solution","title":"Reference Solution","text":"<p>To solve this problem using binary search, we can follow these steps:</p> <ol> <li>Initialize two pointers: <code>left</code> to the start of the list and <code>right</code> to the end of the list.</li> <li>Calculate the middle index of the list.</li> <li>Compare the middle element with the target value.</li> <li>If the middle element is equal to the target, return the middle index.</li> <li>If the middle element is less than the target, move the left pointer to <code>mid + 1</code>.</li> <li>If the middle element is greater than the target, move the right pointer to <code>mid - 1</code>.</li> <li>Repeat steps 2-3 until the target is found or the search space is exhausted (i.e., <code>left</code> exceeds <code>right</code>).</li> <li>If the target is not found, return <code>-1</code>.</li> </ol>"},{"location":"python/challenges/Binary%20Search/#reference-solution-code","title":"Reference Solution Code","text":"<pre><code>from typing import List\n\ndef binary_search(arr: List[int], target: int) -&gt; int:\n    left, right = 0, len(arr) - 1\n\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 5\nprint(binary_search(arr, target))  # Output: 4\n\ntarget = 10\nprint(binary_search(arr, target))  # Output: -1\n</code></pre>"},{"location":"python/challenges/Binary%20Search/#explanation","title":"Explanation","text":"<ol> <li>Initialization: Start with <code>left</code> at the beginning (index 0) and <code>right</code> at the end of the list (index <code>len(arr) - 1</code>).</li> <li>Middle Calculation: Calculate the middle index as <code>(left + right) // 2</code>.</li> <li>Comparison:</li> <li>If the middle element equals the target, return the middle index.</li> <li>If the middle element is less than the target, adjust <code>left</code> to <code>mid + 1</code> (search in the right half).</li> <li>If the middle element is greater than the target, adjust <code>right</code> to <code>mid - 1</code> (search in the left half).</li> <li>Repeat: Continue the process until <code>left</code> exceeds <code>right</code>.</li> <li>Not Found: If the loop exits without finding the target, return <code>-1</code>.</li> </ol> <p>Binary search is efficient with a time complexity of O(\\log n), making it suitable for large input sizes up to 100,000 elements.</p>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/","title":"Intersection of Two Arrays","text":""},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#problem-statement","title":"Problem Statement","text":"<p>Given two arrays, <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays. The result can be in any order.</p>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#function-signature","title":"Function Signature","text":"<pre><code>def intersect(nums1: List[int], nums2: List[int]) -&gt; List[int]:\n    pass\n</code></pre>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#input","title":"Input","text":"<ul> <li><code>nums1</code> and <code>nums2</code> (1 \u2264 |nums1|, |nums2| \u2264 1000): Two arrays of integers.</li> </ul>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#output","title":"Output","text":"<ul> <li>Return an array of integers representing the intersection of <code>nums1</code> and <code>nums2</code>.</li> </ul>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#example","title":"Example","text":"<pre><code>nums1 = [1, 2, 2, 1]\nnums2 = [2, 2]\nresult = intersect(nums1, nums2)\n# result should be: [2, 2]\n\nnums1 = [4, 9, 5]\nnums2 = [9, 4, 9, 8, 4]\nresult = intersect(nums1, nums2)\n# result should be: [4, 9] or [9, 4]\n</code></pre>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#constraints","title":"Constraints","text":"<ul> <li>The intersection must include all duplicate values present in both arrays.</li> <li>The order of elements in the result does not matter.</li> </ul>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#reference-solution","title":"Reference Solution","text":"<p>To solve this problem, we can use a hashmap (dictionary) to count the occurrences of each element in one of the arrays, and then iterate through the other array to find common elements.</p>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#steps","title":"Steps","text":"<ol> <li>Create a dictionary to count the occurrences of each element in <code>nums1</code>.</li> <li>Iterate through <code>nums2</code> and check if the element exists in the dictionary with a count greater than 0.</li> <li>If it exists, add the element to the result and decrement the count in the dictionary.</li> </ol>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#reference-solution-code","title":"Reference Solution Code","text":"<pre><code>from typing import List\nfrom collections import Counter\n\ndef intersect(nums1: List[int], nums2: List[int]) -&gt; List[int]:\n    # Count the occurrences of each element in nums1\n    counts = Counter(nums1)\n\n    result = []\n\n    # Iterate through nums2 and find common elements\n    for num in nums2:\n        if counts[num] &gt; 0:\n            result.append(num)\n            counts[num] -= 1\n\n    return result\n\n# Example usage\nnums1 = [1, 2, 2, 1]\nnums2 = [2, 2]\nprint(intersect(nums1, nums2))  # Output: [2, 2]\n\nnums1 = [4, 9, 5]\nnums2 = [9, 4, 9, 8, 4]\nprint(intersect(nums1, nums2))  # Output: [4, 9] or [9, 4]\n</code></pre>"},{"location":"python/challenges/Intersection%20of%20Two%20Arrays/#explanation","title":"Explanation","text":"<ol> <li>Counting Elements in <code>nums1</code>: We use <code>Counter</code> from the <code>collections</code> module to create a dictionary that counts the occurrences of each element in <code>nums1</code>.</li> <li>Finding Common Elements: We iterate through <code>nums2</code>, and for each element, we check if it is present in the <code>counts</code> dictionary with a count greater than 0.</li> <li>If it is, we append the element to the <code>result</code> list and decrement the count in the dictionary.</li> <li>Return Result: The <code>result</code> list will contain the intersection of the two arrays, including duplicate elements as many times as they appear in both arrays.</li> </ol> <p>This approach ensures that the solution is efficient, with a time complexity of O(n + m), where n and m are the lengths of <code>nums1</code> and <code>nums2</code>, respectively. This is due to the linear scans required for counting and finding intersections.</p>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/","title":"Matching Substrings in a String","text":""},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#problem-statement","title":"Problem Statement","text":"<p>You are given a string <code>s</code> and a list of substrings <code>patterns</code>. Your task is to implement a function that finds all occurrences of each substring in <code>patterns</code> within the string <code>s</code>. For each pattern, return a list of starting indices where the pattern is found in <code>s</code>. If a pattern is not found, return an empty list for that pattern.</p>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#function-signature","title":"Function Signature","text":"<pre><code>def find_substring_occurrences(s: str, patterns: List[str]) -&gt; Dict[str, List[int]]:\n    pass\n</code></pre>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#input","title":"Input","text":"<ul> <li><code>s</code> (1 \u2264 |s| \u2264 10^4): A string consisting of lowercase English letters.</li> <li><code>patterns</code> (1 \u2264 |patterns| \u2264 10^3): A list of strings where each string is a substring pattern consisting of lowercase English letters. Each pattern has length between 1 and 100 inclusive.</li> </ul>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#output","title":"Output","text":"<ul> <li>A dictionary where each key is a pattern from the <code>patterns</code> list and the corresponding value is a list of starting indices (0-based) in <code>s</code> where the pattern occurs. The indices in the list should be in ascending order.</li> </ul>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#example","title":"Example","text":"<pre><code>s = \"ababcabc\"\npatterns = [\"ab\", \"abc\", \"bca\", \"d\"]\n\nresult = find_substring_occurrences(s, patterns)\n# result should be: {\"ab\": [0, 2], \"abc\": [2, 5], \"bca\": [1], \"d\": []}\n</code></pre>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#constraints","title":"Constraints","text":"<ul> <li>The length of <code>s</code> is between 1 and 10,000.</li> <li>The length of each pattern is between 1 and 100.</li> <li>The total number of patterns is between 1 and 1,000.</li> </ul>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#reference-solution","title":"Reference Solution","text":"<pre><code>from typing import List, Dict\n\ndef find_substring_occurrences(s: str, patterns: List[str]) -&gt; Dict[str, List[int]]:\n    result = {}\n\n    for pattern in patterns:\n        pattern_len = len(pattern)\n        indices = []\n        for i in range(len(s) - pattern_len + 1):\n            if s[i:i + pattern_len] == pattern:\n                indices.append(i)\n        result[pattern] = indices\n\n    return result\n\n# Example usage\ns = \"ababcabc\"\npatterns = [\"ab\", \"abc\", \"bca\", \"d\"]\nprint(find_substring_occurrences(s, patterns))\n</code></pre>"},{"location":"python/challenges/Matching%20Substrings%20in%20a%20String/#explanation","title":"Explanation","text":"<ol> <li>Initialization: Create an empty dictionary <code>result</code> to store the output.</li> <li>Pattern Matching: For each pattern in <code>patterns</code>, determine the length of the pattern.</li> <li>Sliding Window: Use a sliding window approach to check each substring of <code>s</code> of length equal to the pattern length. If a match is found, append the starting index to the <code>indices</code> list.</li> <li>Store Results: After checking all possible starting indices in <code>s</code> for the current pattern, store the list of indices in the <code>result</code> dictionary with the pattern as the key.</li> <li>Return Results: After processing all patterns, return the <code>result</code> dictionary.</li> </ol> <p>This solution iterates over the string <code>s</code> for each pattern, making it efficient enough given the constraints.</p>"},{"location":"python/challenges/Palindromic%20Substring/","title":"Longest Palindromic Substring","text":""},{"location":"python/challenges/Palindromic%20Substring/#problem-statement","title":"Problem Statement","text":"<p>Given a string <code>s</code>, find the longest palindromic substring in <code>s</code>. A palindrome is a string that reads the same backward as forward.</p>"},{"location":"python/challenges/Palindromic%20Substring/#function-signature","title":"Function Signature","text":"<pre><code>def longest_palindromic_substring(s: str) -&gt; str:\n    pass\n</code></pre>"},{"location":"python/challenges/Palindromic%20Substring/#input","title":"Input","text":"<ul> <li><code>s</code> (1 \u2264 |s| \u2264 1000): A string consisting of lowercase and uppercase English letters.</li> </ul>"},{"location":"python/challenges/Palindromic%20Substring/#output","title":"Output","text":"<ul> <li>Return the longest palindromic substring in <code>s</code>. If there are multiple longest palindromic substrings of the same length, return the first one that appears.</li> </ul>"},{"location":"python/challenges/Palindromic%20Substring/#example","title":"Example","text":"<pre><code>s = \"babad\"\nresult = longest_palindromic_substring(s)\n# result should be: \"bab\" or \"aba\"\n\ns = \"cbbd\"\nresult = longest_palindromic_substring(s)\n# result should be: \"bb\"\n</code></pre>"},{"location":"python/challenges/Palindromic%20Substring/#constraints","title":"Constraints","text":"<ul> <li>The length of the string is between 1 and 1000.</li> </ul>"},{"location":"python/challenges/Palindromic%20Substring/#reference-solution","title":"Reference Solution","text":"<p>To solve this problem, we can use dynamic programming. We'll create a 2D array <code>dp</code> where <code>dp[i][j]</code> will be <code>True</code> if the substring <code>s[i:j+1]</code> is a palindrome, and <code>False</code> otherwise.</p>"},{"location":"python/challenges/Palindromic%20Substring/#steps","title":"Steps","text":"<ol> <li>Initialize a 2D array <code>dp</code> with <code>False</code> values.</li> <li>All substrings of length 1 are palindromes.</li> <li>Check substrings of length 2. If the characters are the same, mark them as palindromes.</li> <li>For substrings longer than 2, use the following relation:</li> <li><code>dp[i][j] = (s[i] == s[j]) and dp[i+1][j-1]</code></li> <li>Keep track of the longest palindrome found.</li> </ol>"},{"location":"python/challenges/Palindromic%20Substring/#reference-solution-code","title":"Reference Solution Code","text":"<pre><code>def longest_palindromic_substring(s: str) -&gt; str:\n    n = len(s)\n    if n == 0:\n        return \"\"\n\n    # Initialize the DP table\n    dp = [[False] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    start = 0\n    max_length = 1\n\n    # Check substrings of length 2\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = True\n            start = i\n            max_length = 2\n\n    # Check substrings longer than 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n\n    return s[start:start + max_length]\n\n# Example usage\ns = \"babad\"\nprint(longest_palindromic_substring(s))  # Output: \"bab\" or \"aba\"\n\ns = \"cbbd\"\nprint(longest_palindromic_substring(s))  # Output: \"bb\"\n</code></pre>"},{"location":"python/challenges/Palindromic%20Substring/#explanation","title":"Explanation","text":"<ol> <li>Initialization: We initialize a 2D list <code>dp</code> with <code>False</code>. The size of <code>dp</code> is <code>n x n</code>, where <code>n</code> is the length of the input string <code>s</code>.</li> <li>Single Character Palindromes: All substrings of length 1 are palindromes, so we set <code>dp[i][i]</code> to <code>True</code> for all <code>i</code>.</li> <li>Two Character Palindromes: For substrings of length 2, we check if the characters are the same. If they are, we set <code>dp[i][i+1]</code> to <code>True</code>.</li> <li>Longer Substrings: For substrings longer than 2 characters, we use the relation <code>dp[i][j] = (s[i] == s[j]) and dp[i+1][j-1]</code> to determine if <code>s[i:j+1]</code> is a palindrome.</li> <li>Tracking the Longest Palindrome: We keep track of the starting index and length of the longest palindromic substring found.</li> </ol> <p>By the end of the process, <code>dp</code> will contain information about all palindromic substrings, and we can extract the longest one using the recorded starting index and length.</p>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/","title":"Parse Logs and Count Events by Severity Level","text":""},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#problem-statement","title":"Problem Statement","text":"<p>You are given a list of log entries, where each log entry contains a timestamp and a severity level (INFO, WARNING, ERROR). Your task is to parse the logs and count the number of events for each severity level.</p>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#function-signature","title":"Function Signature","text":"<pre><code>def count_events_by_severity(logs: List[str]) -&gt; Dict[str, int]:\n    pass\n</code></pre>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#input","title":"Input","text":"<ul> <li><code>logs</code>: A list of strings, where each string represents a log entry in the format: <code>\"[timestamp] [severity] message\"</code>.</li> <li><code>timestamp</code> is a string representing the time of the event.</li> <li><code>severity</code> is one of <code>INFO</code>, <code>WARNING</code>, or <code>ERROR</code>.</li> <li><code>message</code> is a string representing the event message.</li> </ul>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#output","title":"Output","text":"<ul> <li>Return a dictionary with keys as severity levels (<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>) and values as the count of events for each severity level.</li> </ul>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#example","title":"Example","text":"<pre><code>logs = [\n    \"[2023-05-20 12:00:00] INFO User logged in\",\n    \"[2023-05-20 12:01:00] WARNING Disk space low\",\n    \"[2023-05-20 12:02:00] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:03:00] INFO User logged out\"\n]\n\nresult = count_events_by_severity(logs)\n# result should be: {'INFO': 2, 'WARNING': 1, 'ERROR': 1}\n</code></pre>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#constraints","title":"Constraints","text":"<ul> <li>The number of log entries will be between 1 and 10^5.</li> <li>Each log entry will follow the specified format.</li> </ul>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#reference-solution","title":"Reference Solution","text":"<p>To solve this problem, we can iterate through the list of log entries, parse each entry to extract the severity level, and maintain a count of each severity level using a dictionary.</p>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#steps","title":"Steps","text":"<ol> <li>Initialize a dictionary to hold the counts for <code>INFO</code>, <code>WARNING</code>, and <code>ERROR</code>.</li> <li>Iterate through each log entry in the input list.</li> <li>For each log entry, split the string to extract the severity level.</li> <li>Update the count for the extracted severity level in the dictionary.</li> <li>Return the dictionary with the counts of each severity level.</li> </ol>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#reference-solution-code","title":"Reference Solution Code","text":"<pre><code>from typing import List, Dict\n\ndef count_events_by_severity(logs: List[str]) -&gt; Dict[str, int]:\n    severity_count = {\n        'INFO': 0,\n        'WARNING': 0,\n        'ERROR': 0\n    }\n\n    for log in logs:\n        # Assuming the log format is: \"[timestamp] [severity] message\"\n        parts = log.split()\n        severity = parts[1]  # severity is the second part of the split string\n\n        if severity in severity_count:\n            severity_count[severity] += 1\n\n    return severity_count\n\n# Example usage\nlogs = [\n    \"[2023-05-20 12:00:00] INFO User logged in\",\n    \"[2023-05-20 12:01:00] WARNING Disk space low\",\n    \"[2023-05-20 12:02:00] ERROR Unable to connect to database\",\n    \"[2023-05-20 12:03:00] INFO User logged out\"\n]\n\nprint(count_events_by_severity(logs))  # Output: {'INFO': 2, 'WARNING': 1, 'ERROR': 1}\n</code></pre>"},{"location":"python/challenges/Parse%20Logs%20and%20Count%20Events%20by%20Severity%20Level/#explanation","title":"Explanation","text":"<ol> <li>Initialization: We start by initializing a dictionary <code>severity_count</code> to keep track of the counts of <code>INFO</code>, <code>WARNING</code>, and <code>ERROR</code> events.</li> <li>Parsing Logs: For each log entry in the list, we split the string to extract the severity level. The severity level is always the second part of the split string (<code>parts[1]</code>).</li> <li>Updating Counts: We check if the extracted severity level is one of the keys in our dictionary. If it is, we increment the corresponding count.</li> <li>Return Result: After processing all log entries, we return the <code>severity_count</code> dictionary, which contains the counts of each severity level.</li> </ol> <p>This approach ensures that we efficiently count the severity levels with a time complexity of O(n), where n is the number of log entries.</p>"},{"location":"python/challenges/Priority%20Queue%20Operations/","title":"Priority Queue Operations","text":""},{"location":"python/challenges/Priority%20Queue%20Operations/#problem-statement","title":"Problem Statement","text":"<p>You are required to implement a simple priority queue using a list of operations. A priority queue is a data structure where each element has a priority assigned to it. Elements with higher priority are dequeued before elements with lower priority. If two elements have the same priority, they are dequeued in the order they were enqueued.</p> <p>You need to implement a class <code>PriorityQueue</code> with the following methods:</p> <ol> <li><code>insert(element: int, priority: int) -&gt; None</code>: Inserts an element with the given priority into the priority queue.</li> <li><code>extract_max() -&gt; int</code>: Removes and returns the element with the highest priority. If two elements have the same priority, return the one that was inserted first. If the queue is empty, return -1.</li> <li><code>peek() -&gt; int</code>: Returns the element with the highest priority without removing it from the queue. If the queue is empty, return -1.</li> </ol>"},{"location":"python/challenges/Priority%20Queue%20Operations/#input","title":"Input","text":"<ul> <li>A list of operations, where each operation is either:</li> <li><code>[\"insert\", element, priority]</code>: Insert the element with the given priority.</li> <li><code>[\"extract_max\"]</code>: Remove and return the element with the highest priority.</li> <li><code>[\"peek\"]</code>: Return the element with the highest priority without removing it.</li> </ul>"},{"location":"python/challenges/Priority%20Queue%20Operations/#output","title":"Output","text":"<ul> <li>For <code>extract_max</code> and <code>peek</code> operations, return the respective results in a list in the order they were performed.</li> </ul>"},{"location":"python/challenges/Priority%20Queue%20Operations/#example","title":"Example","text":"<pre><code>operations = [\n    [\"insert\", 10, 2],\n    [\"insert\", 5, 1],\n    [\"insert\", 15, 3],\n    [\"extract_max\"],\n    [\"peek\"],\n    [\"extract_max\"],\n    [\"extract_max\"],\n    [\"peek\"]\n]\n\nresult = process_operations(operations)\n# result should be: [15, 10, 10, 5, -1]\n</code></pre>"},{"location":"python/challenges/Priority%20Queue%20Operations/#constraints","title":"Constraints","text":"<ul> <li>The number of operations will be between 1 and 10^5.</li> <li>The value of <code>element</code> and <code>priority</code> will be integers between -10^9 and 10^9.</li> </ul>"},{"location":"python/challenges/Priority%20Queue%20Operations/#reference-solution","title":"Reference Solution","text":"<pre><code>import heapq\nfrom typing import List, Union\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.counter = 0  # To keep track of the order of insertion\n\n    def insert(self, element: int, priority: int) -&gt; None:\n        heapq.heappush(self.heap, (-priority, self.counter, element))\n        self.counter += 1\n\n    def extract_max(self) -&gt; int:\n        if not self.heap:\n            return -1\n        return heapq.heappop(self.heap)[2]\n\n    def peek(self) -&gt; int:\n        if not self.heap:\n            return -1\n        return self.heap[0][2]\n\ndef process_operations(operations: List[List[Union[str, int]]]) -&gt; List[int]:\n    pq = PriorityQueue()\n    results = []\n\n    for operation in operations:\n        if operation[0] == \"insert\":\n            pq.insert(operation[1], operation[2])\n        elif operation[0] == \"extract_max\":\n            results.append(pq.extract_max())\n        elif operation[0] == \"peek\":\n            results.append(pq.peek())\n\n    return results\n\n# Example usage\noperations = [\n    [\"insert\", 10, 2],\n    [\"insert\", 5, 1],\n    [\"insert\", 15, 3],\n    [\"extract_max\"],\n    [\"peek\"],\n    [\"extract_max\"],\n    [\"extract_max\"],\n    [\"peek\"]\n]\n\nprint(process_operations(operations))  # Output: [15, 10, 10, 5, -1]\n</code></pre>"},{"location":"python/challenges/Priority%20Queue%20Operations/#explanation","title":"Explanation","text":"<ol> <li>PriorityQueue Class:</li> <li><code>__init__</code>: Initialize an empty heap and a counter to keep track of the insertion order.</li> <li><code>insert</code>: Push a tuple containing negative priority (to simulate max-heap), counter, and element into the heap.</li> <li><code>extract_max</code>: Pop and return the element with the highest priority from the heap. Return -1 if the heap is empty.</li> <li> <p><code>peek</code>: Return the element with the highest priority without removing it from the heap. Return -1 if the heap is empty.</p> </li> <li> <p>process_operations Function:</p> </li> <li>Instantiate the <code>PriorityQueue</code> class.</li> <li>Iterate through the operations, calling the appropriate methods on the priority queue and collecting the results for <code>extract_max</code> and <code>peek</code> operations.</li> </ol>"},{"location":"python/challenges/Puzzle%209/","title":"Puzzle 3x3","text":""},{"location":"python/challenges/Puzzle%209/#problem-statement","title":"Problem Statement","text":"<p>You are given a 3x3 grid of numbers. Your task is to find the missing number (represented as <code>0</code>) such that the sum of the numbers in each row, column, and both diagonals equals the same value. This puzzle is known as a \"magic square.\"</p>"},{"location":"python/challenges/Puzzle%209/#function-signature","title":"Function Signature","text":"<pre><code>def solve_magic_square(grid: List[List[int]]) -&gt; int:\n    pass\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#input","title":"Input","text":"<ul> <li><code>grid</code>: A 3x3 list of integers where one cell contains <code>0</code>, representing the missing number.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#output","title":"Output","text":"<ul> <li>Return the value of the missing number that makes the grid a magic square.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#example","title":"Example","text":"<pre><code>grid = [\n    [8, 1, 6],\n    [3, 0, 7],\n    [4, 9, 2]\n]\n\nresult = solve_magic_square(grid)\n# result should be: 5\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#constraints","title":"Constraints","text":"<ul> <li>The grid will always be a 3x3 grid.</li> <li>Exactly one cell in the grid will be <code>0</code>.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#reference-solution","title":"Reference Solution","text":"<p>To solve this problem, we need to understand the properties of a magic square: - The sum of the numbers in each row, column, and both diagonals must be the same. - For a 3x3 magic square using numbers 1 to 9, this sum is always 15.</p> <p>Here's the step-by-step approach to solve this:</p> <ol> <li>Calculate the expected sum of each row, column, and diagonal, which is 15.</li> <li>Find the row, column, and both diagonals that contain the missing number <code>0</code>.</li> <li>Calculate the actual sums of the row, column, and diagonals where <code>0</code> is located.</li> <li>Determine the missing number by comparing the actual sums to the expected sum (15).</li> </ol>"},{"location":"python/challenges/Puzzle%209/#reference-solution-code","title":"Reference Solution Code","text":"<pre><code>from typing import List\n\ndef solve_magic_square(grid: List[List[int]]) -&gt; int:\n    n = 3\n    expected_sum = 15\n\n    row, col = -1, -1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                row, col = i, j\n                break\n        if row != -1:\n            break\n\n    row_sum = sum(grid[row])\n    col_sum = sum(grid[i][col] for i in range(n))\n\n    diag1_sum = sum(grid[i][i] for i in range(n)) if row == col else expected_sum\n    diag2_sum = sum(grid[i][n - 1 - i] for i in range(n)) if row == n - 1 - col else expected_sum\n\n    missing_number = expected_sum - row_sum + grid[row][col]\n\n    return missing_number\n\n# Example usage\ngrid = [\n    [8, 1, 6],\n    [3, 0, 7],\n    [4, 9, 2]\n]\n\nprint(solve_magic_square(grid))  # Output: 5\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#explanation","title":"Explanation","text":"<ol> <li>Identify the Position of <code>0</code>: Iterate through the grid to find the position <code>(row, col)</code> of the missing number.</li> <li>Calculate Row and Column Sums: Compute the sum of the elements in the row and column containing <code>0</code>.</li> <li>Calculate Diagonal Sums: Check if <code>0</code> is part of either diagonal. If it is, compute the diagonal sums.</li> <li>Determine Missing Number: The missing number is the difference between the expected sum (15) and the actual sum of the row (or column, since both must be the same in a magic square).</li> </ol> <p>This approach ensures that the grid becomes a magic square by correctly computing the missing number.</p>"},{"location":"python/challenges/Puzzle%209/#another-version","title":"Another Version","text":""},{"location":"python/challenges/Puzzle%209/#problem-statement_1","title":"Problem Statement","text":"<p>You are given a 3x3 grid where each cell contains an integer from 1 to 9 or the value 0, which represents a missing number. The grid is supposed to be a magic square when the missing number is filled in. Your task is to find the missing number so that the sum of the numbers in each row, column, and both diagonals equals the same value.</p>"},{"location":"python/challenges/Puzzle%209/#function-signature_1","title":"Function Signature","text":"<pre><code>def solve_magic_square(grid: List[List[int]]) -&gt; int:\n    pass\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#input_1","title":"Input","text":"<ul> <li><code>grid</code>: A 3x3 list of integers where one cell contains <code>0</code>, representing the missing number.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#output_1","title":"Output","text":"<ul> <li>Return the value of the missing number that makes the grid a magic square.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#example_1","title":"Example","text":"<pre><code>grid = [\n    [8, 1, 6],\n    [3, 0, 7],\n    [4, 9, 2]\n]\n\nresult = solve_magic_square(grid)\n# result should be: 5\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#constraints_1","title":"Constraints","text":"<ul> <li>The grid will always be a 3x3 grid.</li> <li>Exactly one cell in the grid will be <code>0</code>.</li> </ul>"},{"location":"python/challenges/Puzzle%209/#reference-solution_1","title":"Reference Solution","text":"<p>To solve this problem, we need to ensure that the sum of the numbers in each row, column, and diagonal is equal. For a 3x3 magic square, this sum is always 15.</p>"},{"location":"python/challenges/Puzzle%209/#step-by-step-approach","title":"Step-by-Step Approach","text":"<ol> <li>Calculate the sum of the numbers in each row, column, and diagonal.</li> <li>Find the row, column, and diagonal where the missing number (0) is located.</li> <li>Calculate the actual sums of the row, column, and diagonals where 0 is located.</li> <li>Determine the missing number by comparing the actual sums to the expected sum (15).</li> </ol>"},{"location":"python/challenges/Puzzle%209/#reference-solution-code_1","title":"Reference Solution Code","text":"<pre><code>from typing import List\n\ndef solve_magic_square(grid: List[List[int]]) -&gt; int:\n    n = 3\n    expected_sum = 15\n\n    # Find the position of the missing number (0)\n    row, col = -1, -1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                row, col = i, j\n                break\n        if row != -1:\n            break\n\n    # Calculate the sum of the row, column, and diagonals containing the missing number\n    row_sum = sum(grid[row])\n    col_sum = sum(grid[i][col] for i in range(n))\n\n    diag1_sum = sum(grid[i][i] for i in range(n)) if row == col else expected_sum\n    diag2_sum = sum(grid[i][n - 1 - i] for i in range(n)) if row == n - 1 - col else expected_sum\n\n    # The missing number should balance the sums to reach the expected sum\n    if row == col:\n        missing_number = expected_sum - diag1_sum + 0\n    elif row == n - 1 - col:\n        missing_number = expected_sum - diag2_sum + 0\n    else:\n        missing_number = expected_sum - row_sum + 0\n\n    # Return the missing number\n    return missing_number\n\n# Example usage\ngrid = [\n    [8, 1, 6],\n    [3, 0, 7],\n    [4, 9, 2]\n]\n\nprint(solve_magic_square(grid))  # Output: 5\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#explanation_1","title":"Explanation","text":"<ol> <li>Identify the Position of <code>0</code>: Iterate through the grid to find the position <code>(row, col)</code> of the missing number.</li> <li>Calculate Row and Column Sums: Compute the sum of the elements in the row and column containing <code>0</code>.</li> <li>Calculate Diagonal Sums: Check if <code>0</code> is part of either diagonal. If it is, compute the diagonal sums.</li> <li>Determine Missing Number: The missing number is the difference between the expected sum (15) and the actual sum of the row (or column, or diagonal) where <code>0</code> is located.</li> </ol> <p>By ensuring that all rows, columns, and diagonals sum up to the expected value (15), the function correctly finds the missing number that turns the grid into a magic square.</p>"},{"location":"python/challenges/Puzzle%209/#simple-solution","title":"Simple Solution","text":"<p>Certainly! Below is a Python solution implementing the streamlined approach of summing the visible numbers in the grid and subtracting from 45 to find the missing number. This method takes advantage of the specific characteristics of a 3x3 magic square where the numbers 1 through 9 are used exactly once.</p> <pre><code>from typing import List\n\ndef solve_magic_square(grid: List[List[int]]) -&gt; int:\n    total_sum = 45  # Sum of numbers 1 through 9\n    current_sum = 0  # Variable to hold the sum of the numbers in the grid\n\n    # Iterate through each cell in the grid\n    for row in grid:\n        for num in row:\n            current_sum += num  # Add each number to current_sum\n\n    # The missing number is the difference between total_sum and current_sum\n    missing_number = total_sum - current_sum\n\n    return missing_number\n\n# Example usage\ngrid = [\n    [8, 1, 6],\n    [3, 0, 7],\n    [4, 9, 2]\n]\n\nprint(solve_magic_square(grid))  # Output should be 5\n</code></pre>"},{"location":"python/challenges/Puzzle%209/#explanation-of-the-code","title":"Explanation of the Code","text":"<ol> <li> <p>Initialize Constants and Variables:</p> <ul> <li><code>total_sum</code> is set to 45, the sum of numbers from 1 to 9.</li> <li><code>current_sum</code> is initialized to 0 to accumulate the sum of the visible numbers in the grid.</li> </ul> </li> <li> <p>Loop Through the Grid:</p> <ul> <li>Two nested loops iterate through each cell in the 3x3 grid.</li> <li>Each number found is added to <code>current_sum</code>.</li> </ul> </li> <li> <p>Calculate the Missing Number:</p> <ul> <li>Subtract <code>current_sum</code> from <code>total_sum</code> to find the missing number.</li> <li>Return the missing number.</li> </ul> </li> </ol> <p>This simple Python function efficiently calculates the missing number using basic arithmetic, making it highly efficient for solving this type of magic square puzzle.</p>"},{"location":"python/challenges/Puzzle%209/#simpler","title":"Simpler","text":"<p>Yes, Python provides concise ways to sum all the numbers in a matrix. One common approach is to use list comprehension along with the <code>sum()</code> function. Here's how you can sum all the numbers in a matrix using this approach:</p> <pre><code>def sum_matrix(matrix: List[List[int]]) -&gt; int:\n    return sum(sum(row) for row in matrix)\n</code></pre> <p>In this code: - <code>sum(row) for row in matrix</code> iterates through each row in the matrix and calculates the sum of each row. - The outer <code>sum()</code> function then adds up these row sums to get the total sum of all the numbers in the matrix.</p> <p>This method is concise and Pythonic, making it a simple and elegant solution for summing all the numbers in a matrix.</p>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/","title":"Sum of Two Numbers","text":""},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#problem-statement","title":"Problem Statement","text":"<p>You are given two integers, <code>a</code> and <code>b</code>. Your task is to implement a function that returns their sum.</p>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#function-signature","title":"Function Signature","text":"<pre><code>def sum_two_numbers(a: int, b: int) -&gt; int:\n    pass\n</code></pre>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#input","title":"Input","text":"<ul> <li><code>a</code> and <code>b</code> (\u221210^3 \u2264 a, b \u2264 10^3): Two integers.</li> </ul>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#output","title":"Output","text":"<ul> <li>Return the sum of <code>a</code> and <code>b</code>.</li> </ul>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#example","title":"Example","text":"<pre><code>a = 3\nb = 5\nresult = sum_two_numbers(a, b)\n# result should be: 8\n\na = -3\nb = 2\nresult = sum_two_numbers(a, b)\n# result should be: -1\n</code></pre>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#constraints","title":"Constraints","text":"<ul> <li>Both integers will be within the range [-1000, 1000].</li> </ul>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#reference-solution","title":"Reference Solution","text":"<pre><code>def sum_two_numbers(a: int, b: int) -&gt; int:\n    return a + b\n\n# Example usage\na = 3\nb = 5\nprint(sum_two_numbers(a, b))  # Output: 8\n\na = -3\nb = 2\nprint(sum_two_numbers(a, b))  # Output: -1\n</code></pre>"},{"location":"python/challenges/Sum%20of%20Two%20Numbers/#explanation","title":"Explanation","text":"<ol> <li>Function Definition: Define the function <code>sum_two_numbers</code> that takes two integers <code>a</code> and <code>b</code> as arguments.</li> <li>Return Sum: Return the sum of <code>a</code> and <code>b</code>.</li> </ol> <p>This is a straightforward problem designed to test basic understanding of function implementation and arithmetic operations in Python.</p>"},{"location":"python/cookbook/module-1/","title":"Basic Coding","text":"<p>A set of reference examples that cover the expected knowledge areas and types of questions you might encounter. Each example will focus on basic operations with numbers, string manipulation, and array handling. These solutions are designed to be concise and efficient, ideally matching the requirement to be solvable within 10 minutes.</p>"},{"location":"python/cookbook/module-1/#1-number-operations-and-conditional-logic","title":"1: Number Operations and Conditional Logic","text":"<p>Problem: Write a function that accepts an integer and returns the sum of its digits only if the number is even. If the number is odd, return the product of its digits.</p> <pre><code>def process_number(n):\n    digits = [int(d) for d in str(abs(n))]  # Convert the number to a list of its digits\n    if n % 2 == 0:\n        return sum(digits)\n    else:\n        product = 1\n        for d in digits:\n            product *= d\n        return product\n\n# Example usage:\nprint(process_number(1234))  # Output will be the sum of the digits: 10\nprint(process_number(1235))  # Output will be the product of the digits: 30\n</code></pre>"},{"location":"python/cookbook/module-1/#2-string-manipulation","title":"2: String Manipulation","text":"<p>Problem: Given a string, split it into substrings at every comma, reverse each substring, and join them back into a single string with commas.</p> <pre><code>def reverse_substrings(s):\n    substrings = s.split(',')  # Split the string into substrings on commas\n    reversed_substrings = [sub[::-1] for sub in substrings]  # Reverse each substring\n    return ','.join(reversed_substrings)  # Join them back into a single string\n\n# Example usage:\nprint(reverse_substrings(\"hello,world,python\"))  # Output: \"olleh,dlrow,nohtyp\"\n</code></pre>"},{"location":"python/cookbook/module-1/#3-array-manipulation","title":"3: Array Manipulation","text":"<p>Problem: Given an array of integers, return a new array where each element at index <code>i</code> is the sum of the original element and its neighbors. Use 0 for non-existing neighbors.</p> <pre><code>def sum_neighbors(arr):\n    n = len(arr)\n    result = []\n    for i in range(n):\n        left = arr[i - 1] if i &gt; 0 else 0\n        right = arr[i + 1] if i &lt; n - 1 else 0\n        result.append(left + arr[i] + right)\n    return result\n\n# Example usage:\nprint(sum_neighbors([1, 2, 3, 4]))  # Output: [3, 6, 9, 7]\n</code></pre>"},{"location":"python/cookbook/module-1/#4-conditional-array-iteration","title":"4: Conditional Array Iteration","text":"<p>Problem: Iterate through an array and create a new list containing only the odd numbers multiplied by their index.</p> <pre><code>def odd_multiplied_by_index(arr):\n    result = [num * i for i, num in enumerate(arr) if num % 2 != 0]\n    return result\n\n# Example usage:\nprint(odd_multiplied_by_index([10, 21, 32, 43, 54]))  # Output: [21, 129]\n</code></pre>"},{"location":"python/cookbook/module-1/#5-filter-and-transform","title":"5: Filter and Transform","text":"<p>Problem: Given a list of integers, return a new list containing only the even numbers, each multiplied by 2.</p> <pre><code>def filter_and_transform(arr):\n    filtered = [x * 2 for x in arr if x % 2 == 0]\n    return filtered\n\n# Example usage:\nprint(filter_and_transform([1, 2, 3, 4, 5, 6]))  # Output: [4, 8, 12]\n</code></pre>"},{"location":"python/cookbook/module-1/#6-basic-string-operations","title":"6: Basic String Operations","text":"<p>Problem: Given a string, return a new string where each character is replaced by its corresponding ordinal value separated by dashes.</p> <pre><code>def char_to_ordinal(s):\n    return '-'.join(str(ord(c)) for c in s)\n\n# Example usage:\nprint(char_to_ordinal(\"abc\"))  # Output: \"97-98-99\"\n</code></pre>"},{"location":"python/cookbook/module-1/#7-array-rotation","title":"7: Array Rotation","text":"<p>Problem: Rotate an array to the right by one position. The last element should wrap around to the front.</p> <pre><code>def rotate_array(arr):\n    if len(arr) &gt; 1:\n        return [arr[-1]] + arr[:-1]\n    return arr\n\n# Example usage:\nprint(rotate_array([1, 2, 3, 4]))  # Output: [4, 1, 2, 3]\n</code></pre>"},{"location":"python/cookbook/module-1/#8-conditional-string-splitting","title":"8: Conditional String Splitting","text":"<p>Problem: Given a sentence, split it into words and return a list containing only the words that are longer than 3 characters.</p> <pre><code>def filter_long_words(sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) &gt; 3]\n\n# Example usage:\nprint(filter_long_words(\"The quick brown fox jumps over the lazy dog\"))  # Output: ['quick', 'brown', 'jumps', 'over', 'lazy']\n</code></pre>"},{"location":"python/cookbook/module-1/#9-summing-specific-array-elements","title":"9: Summing Specific Array Elements","text":"<p>Problem: Given an array of integers, sum only the positive numbers.</p> <pre><code>def sum_positive_numbers(arr):\n    return sum(x for x in arr if x &gt; 0)\n\n# Example usage:\nprint(sum_positive_numbers([-1, 2, 3, -4, 5]))  # Output: 10\n</code></pre>"},{"location":"python/cookbook/module-1/#10-modify-elements-based-on-condition","title":"10: Modify Elements Based on Condition","text":"<p>Problem: Given a list of integers, return a new list where each element is increased by 10% if the element is even, or decreased by 10% if the element is odd.</p> <pre><code>def adjust_numbers(arr):\n    return [x * 1.1 if x % 2 == 0 else x * 0.9 for x in arr]\n\n# Example usage:\nprint(adjust_numbers([10, 21, 32, 43, 54]))  # Output: [11.0, 18.9, 35.2, 38.7, 59.4]\n</code></pre>"},{"location":"python/cookbook/module-1/#11-count-specific-characters","title":"11: Count Specific Characters","text":"<p>Problem: Given a string, count the number of vowels in it.</p> <pre><code>def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)\n\n# Example usage:\nprint(count_vowels(\"Hello World\"))  # Output: 3\n</code></pre>"},{"location":"python/cookbook/module-1/#12-find-maximum-in-array-segments","title":"12: Find Maximum in Array Segments","text":"<p>Problem: Given an array of integers, find the maximum number in each consecutive subarray of size 3.</p> <pre><code>def max_in_subarrays(arr, k=3):\n    return [max(arr[i:i+k]) for i in range(len(arr)-k+1)]\n\n# Example usage:\nprint(max_in_subarrays([1, 2, 3, 4, 5, 6, 7]))  # Output: [3, 4, 5, 6, 7]\n</code></pre>"},{"location":"python/cookbook/module-1/#13-alternating-sum","title":"13: Alternating Sum","text":"<p>Problem: Calculate the alternating sum of an array's elements (subtract odd-indexed elements from even-indexed ones).</p> <pre><code>def alternating_sum(arr):\n    return sum(arr[i] if i % 2 == 0 else -arr[i] for i in range(len(arr)))\n\n# Example usage:\nprint(alternating_sum([10, 20, 30, 40, 50]))  # Output: 10 (10 - 20 + 30 - 40 + 50)\n</code></pre>"},{"location":"python/cookbook/module-1/#14-normalize-text","title":"14: Normalize Text","text":"<p>Problem: Normalize a given string by lowercasing it and removing all non-alphanumeric characters.</p> <pre><code>def normalize_text(s):\n    return ''.join(c.lower() for c in s if c.isalnum())\n\n# Example usage:\nprint(normalize_text(\"Hello, World!\"))  # Output: \"helloworld\"\n</code></pre>"},{"location":"python/cookbook/module-1/#15-increment-dictionary-values","title":"15: Increment Dictionary Values","text":"<p>Problem: Given a dictionary, increment each value by 1.</p> <pre><code>def increment_values(d):\n    return {k: v + 1 for k, v in d.items()}\n\n# Example usage:\nprint(increment_values({'a': 1, 'b': 2, 'c': 3}))  # Output: {'a': 2, 'b': 3, 'c': 4}\n</code></pre>"},{"location":"python/cookbook/module-1/#16-generate-ranges","title":"16: Generate Ranges","text":"<p>Problem: Given a number, generate a list of tuples representing ranges from 0 to that number, incrementing by 1 each time.</p> <pre><code>def generate_ranges(n):\n    return [(i, i+1) for i in range(n)]\n\n# Example usage:\nprint(generate_ranges(5))  # Output: [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]\n</code></pre>"},{"location":"python/cookbook/module-1/#17-string-character-swap","title":"17: String Character Swap","text":"<p>Problem: Swap the first and last characters of a string.</p> <pre><code>def swap_first_last(s):\n    if len(s) &gt; 1:\n        return s[-1] + s[1:-1] + s[0]\n    return s\n\n# Example usage:\nprint(swap_first_last(\"hello\"))  # Output: \"oellh\"\n</code></pre>"},{"location":"python/cookbook/module-1/#18-prime-check","title":"18: Prime Check","text":"<p>Problem: Write a function to check if a given number is prime.</p> <pre><code>def is_prime(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Example usage:\nprint(is_prime(29))  # Output: True\nprint(is_prime(10))  # Output: False\n</code></pre>"},{"location":"python/cookbook/module-1/#19-concatenate-and-sort-array","title":"19: Concatenate and Sort Array","text":"<p>Problem: Given two arrays, concatenate them and then sort the resulting array.</p> <pre><code>def concatenate_and_sort(arr1, arr2):\n    combined = arr1 + arr2\n    return sorted(combined)\n\n# Example usage:\nprint(concatenate_and_sort([5, 3, 1], [2, 4, 6]))  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"python/cookbook/module-1/#20-capitalize-first-letters","title":"20: Capitalize First Letters","text":"<p>Problem: Given a sentence, capitalize the first letter of each word.</p> <pre><code>def capitalize_words(sentence):\n    return ' '.join(word.capitalize() for word in sentence.split())\n\n# Example usage:\nprint(capitalize_words(\"hello world\"))  # Output: \"Hello World\"\n</code></pre>"},{"location":"python/cookbook/module-1/#21-sum-of-even-indices","title":"21: Sum of Even Indices","text":"<p>Problem: Calculate the sum of elements at even indices in an array.</p> <pre><code>def sum_even_indices(arr):\n    return sum(arr[i] for i in range(len(arr)) if i % 2 == 0)\n\n# Example usage:\nprint(sum_even_indices([10, 15, 20, 25, 30]))  # Output: 60 (10 + 20 + 30)\n</code></pre>"},{"location":"python/cookbook/module-1/#22-reverse-each-word","title":"22: Reverse Each Word","text":"<p>Problem: Given a sentence, reverse each word in the sentence.</p> <pre><code>def reverse_each_word(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\n# Example usage:\nprint(reverse_each_word(\"Hello world\"))  # Output: \"olleH dlrow\"\n</code></pre>"},{"location":"python/cookbook/module-1/#23-remove-duplicates-from-list","title":"23: Remove Duplicates from List","text":"<p>Problem: Write a function to remove all duplicates from a list and return a list of only unique elements.</p> <pre><code>def remove_duplicates(arr):\n    unique_elements = list(dict.fromkeys(arr))  # Using dict to preserve order\n    return unique_elements\n\n# Example usage:\nprint(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"python/cookbook/module-1/#24-find-longest-word","title":"24: Find Longest Word","text":"<p>Problem: From a list of words, find the longest word.</p> <pre><code>def find_longest_word(words):\n    return max(words, key=len)\n\n# Example usage:\nprint(find_longest_word([\"apple\", \"banana\", \"cherry\"]))  # Output: \"banana\"\n</code></pre>"},{"location":"python/cookbook/module-1/#25-calculate-fibonacci-number","title":"25: Calculate Fibonacci Number","text":"<p>Problem: Write a function that returns the nth Fibonacci number.</p> <pre><code>def fibonacci(n):\n    if n &lt;= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Example usage:\nprint(fibonacci(10))  # Output: 55 (The 10th Fibonacci number)\n</code></pre>"},{"location":"python/cookbook/module-1/#26-count-specific-characters-in-string","title":"26: Count Specific Characters in String","text":"<p>Problem: Count how many times a specific character appears in a string.</p> <pre><code>def count_char(s, char):\n    return s.count(char)\n\n# Example usage:\nprint(count_char(\"hello world\", 'l'))  # Output: 3\n</code></pre>"},{"location":"python/cookbook/module-1/#27-remove-specific-element","title":"27: Remove Specific Element","text":"<p>Problem: Write a function to remove all occurrences of a specific element from a list.</p> <pre><code>def remove_element(arr, element):\n    return [x for x in arr if x != element]\n\n# Example usage:\nprint(remove_element([1, 2, 3, 2, 4, 2, 5], 2))  # Output: [1, 3, 4, 5]\n</code></pre>"},{"location":"python/cookbook/module-1/#28-find-minimum-and-maximum","title":"28: Find Minimum and Maximum","text":"<p>Problem: Create a function that returns both the minimum and maximum number from a list.</p> <pre><code>def find_min_max(arr):\n    return min(arr), max(arr)\n\n# Example usage:\nprint(find_min_max([3, 1, 4, 1, 5, 9, 2, 6]))  # Output: (1, 9)\n</code></pre>"},{"location":"python/cookbook/module-1/#29-check-for-anagrams","title":"29: Check for Anagrams","text":"<p>Problem: Determine if two strings are anagrams of each other.</p> <pre><code>def are_anagrams(str1, str2):\n    return sorted(str1) == sorted(str2)\n\n# Example usage:\nprint(are_anagrams(\"listen\", \"silent\"))  # Output: True\n</code></pre>"},{"location":"python/cookbook/module-1/#30-merge-and-square-list-elements","title":"30: Merge and Square List Elements","text":"<p>Problem: Given two lists of numbers, merge them and return a new list where each element is squared.</p> <pre><code>def merge_and_square(list1, list2):\n    merged_list = list1 + list2\n    return [x**2 for x in merged_list]\n\n# Example usage:\nprint(merge_and_square([1, 2], [3, 4]))  # Output: [1, 4, 9, 16]\n</code></pre>"},{"location":"python/cookbook/module-1/#31-validate-ip-address","title":"31: Validate IP Address","text":"<p>Problem: Write a function to validate if a given string is a valid IPv4 address.</p> <pre><code>def is_valid_ip(ip):\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit() or not 0 &lt;= int(part) &lt;= 255 or (part[0] == '0' and len(part) &gt; 1):\n            return False\n    return True\n\n# Example usage:\nprint(is_valid_ip(\"192.168.1.1\"))  # Output: True\nprint(is_valid_ip(\"256.100.50.25\"))  # Output: False\n</code></pre>"},{"location":"python/cookbook/module-1/#32-sum-of-squares","title":"32: Sum of Squares","text":"<p>Problem: Given a list of integers, compute the sum of the squares of each number.</p> <pre><code>def sum_of_squares(nums):\n    return sum(x**2 for x in nums)\n\n# Example usage:\nprint(sum_of_squares([1, 2, 3, 4]))  # Output: 30 (1 + 4 + 9 + 16)\n</code></pre>"},{"location":"python/cookbook/module-1/#33-toggle-case","title":"33: Toggle Case","text":"<p>Problem: Write a function that converts all uppercase letters to lowercase and vice versa in a string.</p> <pre><code>def toggle_case(s):\n    return s.swapcase()\n\n# Example usage:\nprint(toggle_case(\"Hello World\"))  # Output: \"hELLO wORLD\"\n</code></pre>"},{"location":"python/cookbook/module-1/#34-list-of-multiples","title":"34: List of Multiples","text":"<p>Problem: Create a list of the first n multiples of a given number x.</p> <pre><code>def list_of_multiples(x, n):\n    return [x * i for i in range(1, n + 1)]\n\n# Example usage:\nprint(list_of_multiples(7, 5))  # Output: [7, 14, 21, 28, 35]\n</code></pre>"},{"location":"python/cookbook/module-1/#35-valid-parentheses","title":"35: Valid Parentheses","text":"<p>Problem: Check if a string containing only '(', ')', '{', '}', '[' and ']' is valid. The string is valid if all types of brackets are closed in the correct order.</p> <pre><code>def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n\n# Example usage:\nprint(is_valid(\"()[]{}\"))  # Output: True\nprint(is_valid(\"(]\"))  # Output: False\n</code></pre>"},{"location":"python/cookbook/module-1/#36-filter-non-positive-numbers","title":"36: Filter Non-Positive Numbers","text":"<p>Problem: Given a list of integers, return a new list containing only the positive numbers.</p> <pre><code>def filter_positive(nums):\n    return [num for num in nums if num &gt; 0]\n\n# Example usage:\nprint(filter_positive([-1, 2, -3, 4, -5, 6]))  # Output: [2, 4, 6]\n</code></pre>"},{"location":"python/cookbook/module-1/#37-convert-hex-to-decimal","title":"37: Convert Hex to Decimal","text":"<p>Problem: Write a function to convert a hexadecimal string to its decimal equivalent.</p> <pre><code>def hex_to_decimal(hex_string):\n    return int(hex_string, 16)\n\n# Example usage:\nprint(hex_to_decimal(\"1A\"))  # Output: 26\nprint(hex_to_decimal(\"FF\"))  # Output: 255\n</code></pre>"},{"location":"python/cookbook/module-1/#38-interleave-lists","title":"38: Interleave Lists","text":"<p>Problem: Given two lists of equal length, create a new list by interleaving their elements.</p> <pre><code>def interleave_lists(list1, list2):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, b])\n    return result\n\n# Example usage:\nprint(interleave_lists([1, 2, 3], ['a', 'b', 'c']))  # Output: [1, 'a', 2, 'b', 3, 'c']\n</code></pre> <p>These examples provide a thorough exploration of basic and intermediate programming tasks that are typically found in coding assessments. They are intended to strengthen your problem-solving skills through varied challenges, ensuring you are well-prepared for any basic coding module.</p>"},{"location":"python/cookbook/module-2/","title":"Data Manipulation","text":"<p>Here are comprehensive reference examples that encompass the key skills and techniques you are expected to demonstrate. These examples will cover the operations on numbers, strings, and arrays as specified in the module details.</p>"},{"location":"python/cookbook/module-2/#1-manipulating-strings-and-numbers","title":"1: Manipulating Strings and Numbers","text":"<p>Task: Write a function that takes a string representing a long number and reverses the digits of the number in each comma-separated segment.</p> <p>Python Code: <pre><code>def reverse_segments(number_str):\n    segments = number_str.split(',')\n    reversed_segments = [segment[::-1] for segment in segments]\n    return ','.join(reversed_segments)\n\n# Example usage:\ninput_str = \"12345,67890\"\nprint(reverse_segments(input_str))  # Outputs: \"54321,09876\"\n</code></pre></p>"},{"location":"python/cookbook/module-2/#2-array-manipulation","title":"2: Array Manipulation","text":"<p>Task: Write a function that accepts an array of integers and modifies each element by adding its index value, then reverses the array.</p> <p>Python Code: <pre><code>def modify_and_reverse_array(arr):\n    modified_array = [arr[i] + i for i in range(len(arr))]\n    return modified_array[::-1]\n\n# Example usage:\narr = [10, 20, 30, 40, 50]\nprint(modify_and_reverse_array(arr))  # Outputs: [54, 43, 32, 21, 10]\n</code></pre></p>"},{"location":"python/cookbook/module-2/#3-combining-string-and-array-operations","title":"3: Combining String and Array Operations","text":"<p>Task: Write a function that takes a sentence, splits it into words, reverses each word, and concatenates them into a new string with spaces in between.</p> <p>Python Code: <pre><code>def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\n# Example usage:\nsentence = \"hello world\"\nprint(reverse_words(sentence))  # Outputs: \"olleh dlrow\"\n</code></pre></p>"},{"location":"python/cookbook/module-2/#4-nested-loop-array-manipulation","title":"4: Nested Loop Array Manipulation","text":"<p>Task: Write a function that takes an array of non-negative integers, where each integer is less than 10, and converts it into a single integer where each array element contributes a digit.</p> <p>Python Code: <pre><code>def array_to_number(digits):\n    number = 0\n    for digit in digits:\n        number = number * 10 + digit\n    return number\n\n# Example usage:\ndigits = [1, 2, 3, 4, 5]\nprint(array_to_number(digits))  # Outputs: 12345\n</code></pre></p>"},{"location":"python/cookbook/module-2/#5-complex-data-manipulation-with-nested-loops","title":"5: Complex Data Manipulation with Nested Loops","text":"<p>Task: Write a function that takes a list of strings and finds the string which, when reversed, is lexicographically smallest.</p> <p>Python Code: <pre><code>def find_min_reversed_lex(strings):\n    reversed_strings = [s[::-1] for s in strings]\n    return min(reversed_strings)\n\n# Example usage:\nstrings = [\"banana\", \"apple\", \"orange\"]\nprint(find_min_reversed_lex(strings))  # Outputs: \"elppa\"\n</code></pre></p>"},{"location":"python/cookbook/module-2/#6-splitting-numbers-into-digits-and-basic-operations","title":"6:  Splitting Numbers into Digits and Basic Operations:","text":"<pre><code># Example 1: Splitting numbers into digits and performing basic operations\nnumber = 12345\ndigits = [int(digit) for digit in str(number)]\nsum_of_digits = sum(digits)\nproduct_of_digits = 1\nfor digit in digits:\n    product_of_digits *= digit\n</code></pre>"},{"location":"python/cookbook/module-2/#7-basic-string-manipulation","title":"7:  Basic String Manipulation:","text":"<pre><code># Example 2: Basic string manipulation - splitting a string into substrings\ntext = \"hello world\"\nwords = text.split()  # Split the string into individual words\n# Comparing strings\nif \"hello\" == words[0]:\n    print(\"The first word is 'hello'.\")\n</code></pre>"},{"location":"python/cookbook/module-2/#8-modifying-elements-of-a-string","title":"8:  Modifying Elements of a String:","text":"<pre><code># Example 3: Modifying elements of a string\nstring = \"python\"\n# Concatenating strings\nnew_string = string + \" is fun\"\n# Reversing strings\nreversed_string = string[::-1]\n</code></pre>"},{"location":"python/cookbook/module-2/#9-basic-array-manipulation","title":"9:  Basic Array Manipulation:","text":"<pre><code># Example 4: Basic array manipulation\nnumbers = [1, 2, 3, 4, 5]\n# Iterating over an array\nfor num in numbers:\n    print(num)\n# Modifying elements of an array\nsquared_numbers = [num ** 2 for num in numbers]\n# Reversing an array\nreversed_numbers = numbers[::-1]\n# Concatenating two arrays\ncombined_array = numbers + squared_numbers\n</code></pre>"},{"location":"python/cookbook/module-2/#10-combination-of-basic-concepts","title":"10:  Combination of Basic Concepts:","text":"<pre><code># Example 5: Combination of basic concepts\nsentence = \"hello world\"\n# Splitting a string into substrings, modifying each substring, and comparing\nwords = sentence.split()\nmodified_words = [word.upper() for word in words]\nif modified_words[0] == \"HELLO\":\n    print(\"The first word is 'HELLO'.\")\n</code></pre>"},{"location":"python/cookbook/module-2/#11-combination-of-basic-concepts-with-nested-loops","title":"11:  Combination of Basic Concepts with Nested Loops:","text":"<pre><code># Example 6: Combination of basic concepts with nested loops\ntext = \"abc def\"\n# Splitting a string into substrings and modifying each substring\nmodified_text = \"\"\nfor char in text:\n    if char.isalpha():\n        modified_text += char.upper()\n    else:\n        modified_text += char\n# Comparing each modified substring with other substrings\nfor i in range(len(modified_text)):\n    for j in range(i + 1, len(modified_text)):\n        if modified_text[i] == modified_text[j]:\n            print(f\"The character '{modified_text[i]}' appears more than once.\")\n</code></pre>"},{"location":"python/cookbook/module-2/#12-iterating-over-an-array-and-modifying-elements","title":"12:  Iterating over an Array and Modifying Elements:","text":"<pre><code># Example 7: Iterating over an array to split into two arrays, modifying the second array, and appending it to the first array\noriginal_array = [1, 2, 3, 4, 5]\n# Splitting an array into two arrays\nfirst_half = original_array[:len(original_array) // 2]\nsecond_half = original_array[len(original_array) // 2:]\n# Modifying the second array\nmodified_second_half = [num * 2 for num in second_half]\n# Appending the modified second array to the first array\ncombined_array = first_half + modified_second_half\n</code></pre>"},{"location":"python/cookbook/module-2/#13-combination-of-basic-concepts-with-string-comparison","title":"13: Combination of Basic Concepts with String Comparison:","text":"<pre><code># Example 8: Combination of basic concepts with string comparison\ntext = \"hello world\"\n# Splitting a string into substrings, modifying each substring, and comparing with other substrings\nwords = text.split()\nfor i in range(len(words)):\n    modified_word = words[i].upper()\n    for j in range(len(words)):\n        if i != j and modified_word == words[j].upper():\n            print(f\"The word '{modified_word}' appears more than once.\")\n</code></pre>"},{"location":"python/cookbook/module-2/#14-iterating-over-an-array-modifying-elements-and-reversing","title":"14:  Iterating over an Array, Modifying Elements, and Reversing:","text":"<pre><code># Example 9: Iterating over an array, modifying elements, and reversing the array\nnumbers = [1, 2, 3, 4, 5]\n# Iterating over an array and modifying elements\nmodified_numbers = [num + 10 for num in numbers]\n# Reversing the modified array\nreversed_modified_numbers = modified_numbers[::-1]\n</code></pre>"},{"location":"python/cookbook/module-2/#15-combination-of-string-and-array-manipulation","title":"15:  Combination of String and Array Manipulation:","text":"<pre><code># Example 10: Combination of string and array manipulation\nsentence = \"hello world\"\n# Splitting a string into substrings and modifying each substring\nwords = sentence.split()\n# Modifying each word and concatenating into a new sentence\nnew_sentence = \" \".join([word.upper() for word in words])\n</code></pre>"},{"location":"python/cookbook/module-2/#16-combination-of-basic-concepts-with-string-concatenation","title":"16:  Combination of Basic Concepts with String Concatenation:","text":"<pre><code># Example 11: Combination of basic concepts with string concatenation\nstring1 = \"hello\"\nstring2 = \"world\"\n# Concatenating strings and modifying the result\nconcatenated_string = string1 + string2\nmodified_string = concatenated_string.upper()\n</code></pre>"},{"location":"python/cookbook/module-2/#17-iterating-over-an-array-reversing-and-concatenating","title":"17:  Iterating over an Array, Reversing, and Concatenating:","text":"<pre><code># Example 12: Iterating over an array, reversing, and concatenating arrays\noriginal_array = [1, 2, 3, 4, 5]\n# Iterating over an array and modifying elements\nsquared_numbers = [num ** 2 for num in original_array]\n# Reversing the modified array\nreversed_squared_numbers = squared_numbers[::-1]\n# Concatenating the original and reversed arrays\ncombined_array = original_array + reversed_squared_numbers\n</code></pre>"},{"location":"python/cookbook/module-2/#18-combination-of-string-and-array-manipulation-with-nested-loops","title":"18:  Combination of String and Array Manipulation with Nested Loops:","text":"<pre><code># Example 13: Combination of string and array manipulation with nested loops\ntext = \"hello world\"\nnumbers = [1, 2, 3, 4, 5]\n# Splitting a string into substrings and modifying each substring\nwords = text.split()\n# Iterating over an array and modifying elements, then concatenating with each word\nmodified_text = \"\"\nfor word in words:\n    for num in numbers:\n        modified_text += word + str(num)\n</code></pre>"},{"location":"python/cookbook/module-2/#19-combination-of-string-and-array-manipulation-with-comparison","title":"19:  Combination of String and Array Manipulation with Comparison:","text":"<pre><code># Example 14: Combination of string and array manipulation with comparison\ntext = \"python is awesome\"\nvowels = \"aeiou\"\n# Splitting a string into substrings and modifying each substring\nwords = text.split()\n# Counting vowels in each word and comparing with a threshold\nfor word in words:\n    vowel_count = sum(1 for char in word if char in vowels)\n    if vowel_count &gt; len(word) // 2:\n        print(f\"The word '{word}' has more vowels than consonants.\")\n</code></pre>"},{"location":"python/cookbook/module-2/#20-advanced-array-manipulation-with-list-comprehensions","title":"20:  Advanced Array Manipulation with List Comprehensions:","text":"<pre><code># Example 15: Advanced array manipulation with list comprehensions\nnumbers = [1, 2, 3, 4, 5]\n# Generating a new array by performing operations on each element\nmodified_numbers = [num * 2 if num % 2 == 0 else num for num in numbers]\n</code></pre>"},{"location":"python/cookbook/module-2/#21-combination-of-string-and-array-manipulation-with-reversing","title":"21:  Combination of String and Array Manipulation with Reversing:","text":"<pre><code># Example 16: Combination of string and array manipulation with reversing\ntext = \"hello world\"\n# Splitting a string into substrings and modifying each substring\nwords = text.split()\n# Reversing each word and concatenating into a new string\nreversed_text = \" \".join(word[::-1] for word in words)\n</code></pre> <p>These examples offer additional scenarios for practicing data manipulation techniques, combining multiple concepts, and solving problems efficiently within the constraints specified for Module 2 of the assessment.</p> <p>Each of these examples tackles key concepts listed in the module specifications, such as working with basic data operations, using loops effectively, and handling string and array manipulations without resorting to advanced algorithms or optimizations. These tasks are designed to be solved within the time constraints provided, focusing on clarity and efficiency in implementation.</p>"},{"location":"python/cookbook/module-3/","title":"Implementation Efficiency","text":"<p>Let's develop some reference examples that cover the essential skills and concepts you should master. This module requires efficient code implementation, manipulation of multidimensional arrays, and usage of hashmaps. Here are comprehensive examples to guide you:</p>"},{"location":"python/cookbook/module-3/#1-transposing-a-2d-array","title":"1: Transposing a 2D Array","text":"<p>Transposing a matrix involves swapping its rows with columns. This is a common task that involves manipulating multidimensional arrays.</p> <pre><code>def transpose(matrix):\n    # Use list comprehension to create the transposed matrix\n    return [list(row) for row in zip(*matrix)]\n\n# Example usage\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\ntransposed_matrix = transpose(matrix)\nprint(\"Original Matrix:\")\nfor row in matrix:\n    print(row)\nprint(\"\\nTransposed Matrix:\")\nfor row in transposed_matrix:\n    print(row)\n</code></pre>"},{"location":"python/cookbook/module-3/#2-efficiently-searching-in-a-matrix","title":"2: Efficiently Searching in a Matrix","text":"<p>Let\u2019s say you need to search for a specific value in a sorted matrix where each row and column is sorted in ascending order. This requires efficient traversal to ensure optimal search time.</p> <pre><code>def search_sorted_matrix(matrix, target):\n    if not matrix or not matrix[0]:\n        return False\n    # Start from the top-right corner\n    row, col = 0, len(matrix[0]) - 1\n    while row &lt; len(matrix) and col &gt;= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] &gt; target:\n            col -= 1  # Move left\n        else:\n            row += 1  # Move down\n    return False\n\n# Example usage\nmatrix = [\n    [1, 4, 7, 11],\n    [2, 5, 8, 12],\n    [3, 6, 9, 16]\n]\ntarget = 5\nprint(\"Target found:\", search_sorted_matrix(matrix, target))\n</code></pre>"},{"location":"python/cookbook/module-3/#3-using-hashmaps-for-counting-frequencies","title":"3: Using HashMaps for Counting Frequencies","text":"<p>Hashmaps (dictionaries in Python) are ideal for counting occurrences of elements in an iterable due to their average O(1) time complexity for lookup and insert operations.</p> <pre><code>def count_frequencies(arr):\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return counts\n\n# Example usage\narr = [2, 3, 2, 4, 3, 3, 4]\nfrequency = count_frequencies(arr)\nprint(\"Frequencies:\")\nfor key, value in frequency.items():\n    print(f\"{key}: {value}\")\n</code></pre>"},{"location":"python/cookbook/module-3/#4-merging-intervals","title":"4: Merging Intervals","text":"<p>This is a common interview problem that tests your ability to manipulate data structures and implement sorting with a custom comparator.</p> <pre><code>def merge_intervals(intervals):\n    if not intervals:\n        return []\n    # First sort the intervals based on the start times\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n    for current_start, current_end in intervals[1:]:\n        last_end = merged[-1][1]\n        if current_start &lt;= last_end:\n            merged[-1][1] = max(last_end, current_end)  # Merge the current interval\n        else:\n            merged.append([current_start, current_end])\n    return merged\n\n# Example usage\nintervals = [[1, 3], [2, 6], [8, 10], [15, 18]]\nmerged_intervals = merge_intervals(intervals)\nprint(\"Merged Intervals:\")\nfor interval in merged_intervals:\n    print(interval)\n</code></pre>"},{"location":"python/cookbook/module-3/#5-multidimensional-arrays","title":"5: multidimensional arrays","text":"<p>Problem Statement:</p> <p>Write a Python function <code>efficient_solution(matrix)</code> that efficiently manipulates multidimensional arrays and utilizes hashmaps to store data. The function should perform a specific operation on a given 2D matrix, adhering to execution time limits.</p> <p>Problem:</p> <p>Given a matrix <code>matrix</code>, represented as a list of lists where each inner list represents a row, the function should transpose the matrix, swapping rows and columns.</p> <p>Solution:</p> <pre><code>def efficient_solution(matrix):\n    # Get dimensions of the matrix\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Transpose the matrix\n    transposed_matrix = [[0 for _ in range(rows)] for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            transposed_matrix[j][i] = matrix[i][j]\n\n    return transposed_matrix\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(efficient_solution(matrix))\n</code></pre> <p>Explanation:</p> <ul> <li>The function <code>efficient_solution</code> efficiently transposes the given matrix by iterating over each element and swapping rows with columns.</li> <li>It utilizes nested loops to iterate over the elements of the matrix, ensuring that each element is transposed correctly to its corresponding position in the new transposed matrix.</li> <li>The transposed matrix is stored in a new list of lists, preserving the original dimensions of the matrix.</li> <li>By using efficient nested loops, the function achieves the required operation within the specified time limits.</li> </ul> <p>Additional Notes:</p> <ul> <li>The function efficiently manipulates the multidimensional array, ensuring that the operation is performed in a timely manner.</li> <li>It demonstrates the use of nested loops to iterate over elements within nested arrays in a given order, essential for efficient manipulation of multidimensional arrays.</li> <li>Additionally, the function does not rely on external libraries, maximizing efficiency and adhering to the requirement of implementing solutions using built-in functionality.</li> <li>This example problem showcases the candidate's ability to translate step-by-step instructions into efficient code, a crucial skill for solving implementation challenges effectively.</li> </ul>"},{"location":"python/cookbook/module-3/#6-string-comparator","title":"6: String Comparator","text":"<p>Problem Statement:</p> <p>Write a Python function <code>efficient_solution(strings)</code> that efficiently implements a specific comparator for strings. The function should compare strings based on a custom criterion and return the sorted list of strings.</p> <p>Problem:</p> <p>Given a list of strings <code>strings</code>, the function should sort the strings based on their lengths in ascending order. If two strings have the same length, they should be sorted alphabetically.</p> <p>Solution:</p> <pre><code>def efficient_solution(strings):\n    # Custom comparator function to sort strings\n    def custom_compare(s):\n        return (len(s), s)\n\n    # Sort the strings using the custom comparator\n    sorted_strings = sorted(strings, key=custom_compare)\n\n    return sorted_strings\n\n# Example usage:\nstrings = [\"banana\", \"apple\", \"orange\", \"kiwi\", \"grape\"]\nprint(efficient_solution(strings))\n</code></pre> <p>Explanation:</p> <ul> <li>The function <code>efficient_solution</code> efficiently sorts the given list of strings based on a custom criterion.</li> <li>It defines a nested function <code>custom_compare</code> that returns a tuple containing the length of the string and the string itself.</li> <li>The <code>sorted</code> function is used to sort the list of strings, with the <code>key</code> parameter set to the custom comparator function <code>custom_compare</code>.</li> <li>By using a custom comparator, the function achieves the required sorting based on the specified criteria efficiently.</li> </ul> <p>Additional Notes:</p> <ul> <li>The function demonstrates the implementation of a specific comparator for strings, allowing for custom sorting based on various criteria.</li> <li>It utilizes the <code>sorted</code> function with a custom key function to perform the sorting operation efficiently.</li> <li>This example problem highlights the candidate's ability to implement custom sorting logic and efficiently manipulate data structures like lists of strings.</li> <li>The function can be easily adapted to implement different comparators for strings, depending on the specific requirements of the problem.</li> <li>Efficient sorting algorithms ensure that the function performs well within the specified execution time limits, even for large lists of strings.</li> </ul>"},{"location":"python/cookbook/module-3/#7-array-merge","title":"7: Array Merge","text":"<p>Problem Statement:</p> <p>Write a Python function <code>efficient_solution(merged_arrays)</code> that efficiently implements a specific merge function for arrays. The function should merge a list of sorted arrays into a single sorted array.</p> <p>Problem:</p> <p>Given a list of sorted arrays <code>merged_arrays</code>, the function should merge them into a single sorted array in ascending order.</p> <p>Solution:</p> <pre><code>def efficient_solution(merged_arrays):\n    import heapq\n\n    # Initialize an empty heap\n    heap = []\n\n    # Merge arrays into a single sorted array using heapq\n    for arr in merged_arrays:\n        for num in arr:\n            heapq.heappush(heap, num)\n\n    # Extract elements from the heap to form the sorted array\n    sorted_array = []\n    while heap:\n        sorted_array.append(heapq.heappop(heap))\n\n    return sorted_array\n\n# Example usage:\nmerged_arrays = [[1, 3, 5], [2, 4, 6], [0, 7, 8]]\nprint(efficient_solution(merged_arrays))\n</code></pre> <p>Explanation:</p> <ul> <li>The function <code>efficient_solution</code> efficiently merges the sorted arrays into a single sorted array using a heap data structure.</li> <li>It utilizes the <code>heapq</code> module, which provides heap-based operations, to efficiently merge the arrays.</li> <li>The function iterates over each array in the input list <code>merged_arrays</code> and adds its elements to the heap using <code>heapq.heappush</code>.</li> <li>Once all elements are added to the heap, the function extracts them one by one using <code>heapq.heappop</code>, ensuring that the resulting array is sorted.</li> <li>By leveraging the heap data structure, the function achieves efficient merging of arrays and sorting of elements.</li> </ul> <p>Additional Notes:</p> <ul> <li>The function demonstrates the use of a heap data structure to efficiently merge sorted arrays into a single sorted array.</li> <li>It leverages the <code>heapq</code> module's functions to perform heap-based operations, ensuring efficient merging and sorting.</li> <li>This example problem showcases the candidate's ability to implement specific merge functions for arrays, essential for various algorithmic challenges.</li> <li>Efficient heap-based merging ensures that the function performs well within the specified execution time limits, even for large input arrays.</li> <li>The function's modular design allows for easy adaptation to handle different types of input arrays and sorting criteria.</li> </ul>"},{"location":"python/cookbook/module-3/#8-intruction-processing","title":"8: Intruction Processing","text":"<p>Problem Statement:</p> <p>Write a Python function <code>efficient_solution(instructions)</code> that efficiently translates step-by-step instructions into code. The function should perform a specific task based on the provided instructions, adhering to execution time limits.</p> <p>Problem:</p> <p>Given a list of instructions <code>instructions</code>, where each instruction is represented as a tuple <code>(operation, operand)</code>, the function should perform the specified operations on a list of integers and return the final result.</p> <p>Solution:</p> <pre><code>def efficient_solution(instructions):\n    result = []\n\n    for operation, operand in instructions:\n        if operation == 'ADD':\n            result.append(operand)\n        elif operation == 'REMOVE':\n            if operand in result:\n                result.remove(operand)\n        elif operation == 'MULTIPLY':\n            result = [num * operand for num in result]\n        elif operation == 'CLEAR':\n            result = []\n\n    return result\n\n# Example usage:\ninstructions = [('ADD', 5), ('ADD', 3), ('MULTIPLY', 2), ('REMOVE', 5), ('CLEAR')]\nprint(efficient_solution(instructions))\n</code></pre> <p>Explanation:</p> <ul> <li>The function <code>efficient_solution</code> efficiently processes the list of instructions and performs the specified operations on a list of integers.</li> <li>It iterates over each instruction in the input list <code>instructions</code> and applies the corresponding operation to the list <code>result</code>.</li> <li>Depending on the operation specified in each instruction, the function either adds, removes, multiplies, or clears elements from the result list.</li> <li>By efficiently processing each instruction and performing the required operations, the function produces the final result within the specified execution time limits.</li> </ul> <p>Additional Notes:</p> <ul> <li>The function demonstrates the ability to translate step-by-step instructions into code efficiently, essential for solving implementation challenges.</li> <li>It uses conditional statements to handle different types of operations specified in the instructions, ensuring accurate execution.</li> <li>This example problem showcases the candidate's proficiency in implementing specific tasks based on provided instructions, a fundamental skill for algorithmic problem-solving.</li> <li>Efficient handling of instructions ensures that the function performs well within the specified execution time limits, even for complex instruction sets.</li> <li>The function's modular structure allows for easy extension and modification to handle different types of operations and instruction formats.</li> </ul>"},{"location":"python/cookbook/module-3/#9-array","title":"9: Array","text":"<p>Problem Statement:</p> <p>Write a Python function <code>efficient_solution(data)</code> that efficiently manipulates multidimensional arrays and utilizes hashmaps to store data. The function should perform a specific operation on a given 2D matrix, adhering to execution time limits.</p> <p>Problem:</p> <p>Given a matrix <code>data</code>, represented as a list of lists where each inner list represents a row, the function should calculate the sum of each row and return a hashmap where the keys are the row indices and the values are the sums of the corresponding rows.</p> <p>Solution:</p> <pre><code>def efficient_solution(data):\n    sums = {}\n\n    # Calculate sum of each row\n    for i, row in enumerate(data):\n        row_sum = sum(row)\n        sums[i] = row_sum\n\n    return sums\n\n# Example usage:\ndata = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(efficient_solution(data))\n</code></pre> <p>Explanation:</p> <ul> <li>The function <code>efficient_solution</code> efficiently calculates the sum of each row in the given matrix and stores the results in a hashmap.</li> <li>It iterates over each row in the input matrix <code>data</code> using a for loop and calculates the sum of elements in each row using the <code>sum</code> function.</li> <li>The row index <code>i</code> is used as the key in the hashmap, and the corresponding sum of the row is stored as the value.</li> <li>By efficiently processing each row and storing the sums in a hashmap, the function produces the desired output within the specified execution time limits.</li> </ul> <p>Additional Notes:</p> <ul> <li>The function demonstrates the efficient manipulation of multidimensional arrays and the use of hashmaps to store data.</li> <li>It utilizes a simple for loop to iterate over each row of the matrix and calculates the sum of elements in each row using the <code>sum</code> function.</li> <li>This example problem highlights the candidate's ability to perform specific operations on multidimensional arrays while adhering to execution time constraints.</li> <li>Efficient calculation and storage of row sums ensure that the function performs well even for large input matrices, meeting the requirements of implementation efficiency.</li> <li>The function's modular design allows for easy adaptation to handle different types of operations on 2D matrices and variations in input data structures.</li> </ul> <p>These examples demonstrate essential skills for Module 3, including efficient data manipulation, usage of advanced data structures, and complex problem-solving techniques. Practice and understand these patterns to enhance your problem-solving skills for the assessment.</p>"},{"location":"python/cookbook/module-4/","title":"Problem Solving","text":"<p>Comprehensive examples for each of the key techniques mentioned in the document: Greedy algorithms, Divide and Conquer, Two Pointers, and the use of hashmaps. These examples will focus on applying these techniques to solve common types of problems efficiently.</p>"},{"location":"python/cookbook/module-4/#1-greedy-algorithm-example-minimum-coins-for-change","title":"1. Greedy Algorithm Example: Minimum Coins for Change","text":"<p>Problem Statement: Given an array of coin denominations and a total amount, find the minimum number of coins needed to make up that amount.</p> <p>Python Solution: <pre><code>def minCoins(coins, amount):\n    coins.sort(reverse=True)\n    count = 0\n    for coin in coins:\n        count += amount // coin\n        amount %= coin\n        if amount == 0:\n            break\n    return count if amount == 0 else -1\n\n# Example usage\ncoins = [1, 5, 10, 25]\namount = 63\nprint(minCoins(coins, amount))  # Output will depend on the input values\n</code></pre></p>"},{"location":"python/cookbook/module-4/#2-divide-and-conquer-example-maximum-subarray-sum","title":"2. Divide and Conquer Example: Maximum Subarray Sum","text":"<p>Problem Statement: Find the maximum sum of a contiguous subarray in an array of integers.</p> <p>Python Solution: <pre><code>def maxSubArraySum(arr, left, right):\n    if left == right:\n        return arr[left]\n\n    mid = (left + right) // 2\n    max_left_sum = maxSubArraySum(arr, left, mid)\n    max_right_sum = maxSubArraySum(arr, mid+1, right)\n    max_cross_sum = crossSum(arr, left, mid, right)\n\n    return max(max_left_sum, max_right_sum, max_cross_sum)\n\ndef crossSum(arr, left, mid, right):\n    sum = 0\n    left_sum = float('-inf')\n    for i in range(mid, left-1, -1):\n        sum += arr[i]\n        if sum &gt; left_sum:\n            left_sum = sum\n\n    sum = 0\n    right_sum = float('-inf')\n    for i in range(mid+1, right+1):\n        sum += arr[i]\n        if sum &gt; right_sum:\n            right_sum = sum\n\n    return left_sum + right_sum\n\n# Example usage\narr = [-2, -5, 6, -2, -3, 1, 5, -6]\nprint(maxSubArraySum(arr, 0, len(arr) - 1))  # Output: 7\n</code></pre></p>"},{"location":"python/cookbook/module-4/#3-two-pointers-example-pair-with-target-sum","title":"3. Two Pointers Example: Pair with Target Sum","text":"<p>Problem Statement: Given a sorted array and a target sum, find if there is a pair in the array whose sum is equal to the target sum.</p> <p>Python Solution: <pre><code>def twoPointerSum(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt; right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return (left, right)\n        elif current_sum &lt; target:\n            left += 1\n        else:\n            right -= 1\n    return None\n\n# Example usage\narr = [1, 2, 4, 5, 7]\ntarget = 9\nprint(twoPointerSum(arr, target))  # Output: (2, 3)\n</code></pre></p>"},{"location":"python/cookbook/module-4/#4-using-hashmaps-example-count-distinct-elements","title":"4. Using Hashmaps Example: Count Distinct Elements","text":"<p>Problem Statement: Count the number of distinct elements in an array.</p> <p>Python Solution: <pre><code>def countDistinct(arr):\n    seen = set()\n    for num in arr:\n        seen.add(num)\n    return len(seen)\n\n# Example usage\narr = [1, 2, 2, 3, 4, 4, 4, 5]\nprint(countDistinct(arr))  # Output: 5\n</code></pre></p>"},{"location":"python/cookbook/module-4/#5-subarray-sum-equals-k","title":"5. Subarray Sum Equals K","text":"<p>Problem Statement: Given an array of integers <code>nums</code> and an integer <code>k</code>, return the total number of continuous subarrays whose sum equals to <code>k</code>.</p> <p>Example: <pre><code>Input: nums = [1,1,1], k = 2\nOutput: 2\nExplanation: The subarrays [1,1] and [1,1] have sum equals to 2.\n</code></pre></p> <p>Solution: <pre><code>def subarray_sum(nums, k):\n    count = 0\n    sum_freq = {0: 1}\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        complement = cur_sum - k\n        if complement in sum_freq:\n            count += sum_freq[complement]\n        sum_freq[cur_sum] = sum_freq.get(cur_sum, 0) + 1\n\n    return count\n\n# Test the solution\nnums = [1, 1, 1]\nk = 2\nprint(subarray_sum(nums, k))  # Output: 2\n</code></pre></p> <p>This problem can be solved using a hashmap to store the cumulative sums encountered so far. We check if the complement of the current sum (i.e., <code>cur_sum - k</code>) exists in the hashmap, indicating the presence of a subarray with sum <code>k</code>.</p> <p>This example demonstrates the application of a hashmap to optimize the solution for finding subarrays with a specific sum.</p> <p>By practising similar problems and understanding the application of algorithms like greedy, divide and conquer, and two pointers, you can better prepare for the assessment's problem-solving challenges.</p> <p>Certainly! Let's explore another problem-solving example for Module 4:</p>"},{"location":"python/cookbook/module-4/#6-longest-substring-without-repeating-characters","title":"6: Longest Substring Without Repeating Characters","text":"<p>Problem Statement: Given a string <code>s</code>, find the length of the longest substring without repeating characters.</p> <p>Example: <pre><code>Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The longest substring without repeating characters is \"abc\", which has a length of 3.\n</code></pre></p> <p>Solution: <pre><code>def longest_substring(s):\n    max_length = 0\n    start = 0\n    char_index = {}  # Store the index of each character\n\n    for end, char in enumerate(s):\n        if char in char_index and char_index[char] &gt;= start:\n            start = char_index[char] + 1\n        char_index[char] = end\n        max_length = max(max_length, end - start + 1)\n\n    return max_length\n\n# Test the solution\ns = \"abcabcbb\"\nprint(longest_substring(s))  # Output: 3\n</code></pre></p> <p>In this problem, we use the two-pointer technique along with a hashmap to efficiently find the longest substring without repeating characters. The <code>start</code> pointer indicates the start of the current substring, and we update it when encountering a repeating character. The <code>char_index</code> hashmap stores the most recent index of each character encountered.</p> <p>This example showcases the application of two pointers and a hashmap to optimize the solution for finding the longest substring without repeating characters.</p>"},{"location":"python/cookbook/module-4/#7-minimum-window-substring","title":"7: Minimum Window Substring","text":"<p>Problem Statement: Given two strings <code>s</code> and <code>t</code>, return the minimum window in <code>s</code> which contains all the characters in <code>t</code>. If there is no such window in <code>s</code> that covers all characters in <code>t</code>, return an empty string <code>\"\"</code>.</p> <p>Example: <pre><code>Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" contains all characters \"A\", \"B\", and \"C\".\n</code></pre></p> <p>Solution: <pre><code>from collections import Counter\n\ndef min_window(s, t):\n    if not s or not t:\n        return \"\"\n\n    target_counts = Counter(t)\n    required = len(target_counts)\n    left, right = 0, 0\n    formed = 0\n    window_counts = {}\n    ans = float(\"inf\"), None, None\n\n    while right &lt; len(s):\n        char = s[right]\n        window_counts[char] = window_counts.get(char, 0) + 1\n        if char in target_counts and window_counts[char] == target_counts[char]:\n            formed += 1\n        while formed == required:\n            if right - left + 1 &lt; ans[0]:\n                ans = right - left + 1, left, right\n            char = s[left]\n            window_counts[char] -= 1\n            if char in target_counts and window_counts[char] &lt; target_counts[char]:\n                formed -= 1\n            left += 1\n        right += 1\n\n    return \"\" if ans[0] == float(\"inf\") else s[ans[1]: ans[2] + 1]\n\n# Test the solution\ns = \"ADOBECODEBANC\"\nt = \"ABC\"\nprint(min_window(s, t))  # Output: \"BANC\"\n</code></pre></p> <p>This problem involves finding the minimum window substring in <code>s</code> that contains all characters of <code>t</code>. We use a sliding window approach where we maintain a window containing the characters of <code>s</code> and move the <code>left</code> and <code>right</code> pointers to adjust the window until we find the minimum window containing all characters of <code>t</code>.</p>"},{"location":"python/cookbook/module-4/#8-coin-change","title":"8: Coin Change","text":"<p>Problem Statement: You are given coins of different denominations and a total amount of money <code>amount</code>. Write a function to compute the minimum number of coins needed to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p> <p>Example: <pre><code>Input: coins = [1, 2, 5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n</code></pre></p> <p>Solution: <pre><code>def coin_change(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n\n    return dp[amount] if dp[amount] != float(\"inf\") else -1\n\n# Test the solution\ncoins = [1, 2, 5]\namount = 11\nprint(coin_change(coins, amount))  # Output: 3\n</code></pre></p> <p>In this problem, we use dynamic programming to find the minimum number of coins needed to make up the given amount. We iterate over each coin denomination and update the minimum number of coins needed for each amount from <code>1</code> to <code>amount</code>.</p> <p>By practising problems like these and understanding how to implement appropriate algorithms like dynamic programming, you'll be better prepared to optimize solutions for similar challenges in the assessment.</p>"},{"location":"python/cookbook/module-4/#9-container-with-most-water","title":"9: Container With Most Water","text":"<p>Problem Statement: Given <code>n</code> non-negative integers <code>a1, a2, ..., an</code>, where each represents a point at coordinate <code>(i, ai)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of the line <code>i</code> are at <code>(i, ai)</code> and <code>(i, 0)</code>. Find two lines, which, together with the x-axis, form a container such that the container contains the most water.</p> <p>Example: <pre><code>Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The maximum area of water (highlighted in blue) the container can contain is 49, obtained by selecting the heights of 8 and 7 (distance between them is 7).\n</code></pre></p> <p>Solution: <pre><code>def max_area(height):\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n\n    while left &lt; right:\n        width = right - left\n        current_area = min(height[left], height[right]) * width\n        max_area = max(max_area, current_area)\n\n        if height[left] &lt; height[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_area\n\n# Test the solution\nheight = [1, 8, 6, 2, 5, 4, 8, 3, 7]\nprint(max_area(height))  # Output: 49\n</code></pre></p> <p>In this problem, we use a two-pointer approach to find the maximum area of water that can be contained by the container formed by the vertical lines. We start with two pointers at the beginning and end of the array and gradually move them towards each other, calculating the area at each step and updating the maximum area found so far.</p>"},{"location":"python/cookbook/module-4/#10-longest-palindromic-substring","title":"10: Longest Palindromic Substring","text":"<p>Problem Statement: Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p>Example: <pre><code>Input: s = \"babad\"\nOutput: \"bab\" or \"aba\"\nExplanation: Either \"bab\" or \"aba\" is the longest palindromic substring.\n</code></pre></p> <p>Solution: <pre><code>def longest_palindrome(s):\n    if len(s) &lt; 2:\n        return s\n\n    start = 0\n    max_length = 1\n\n    for i in range(len(s)):\n        # Check for odd-length palindromes\n        left, right = i, i\n        while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n            if right - left + 1 &gt; max_length:\n                start = left\n                max_length = right - left + 1\n            left -= 1\n            right += 1\n\n        # Check for even-length palindromes\n        left, right = i, i + 1\n        while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n            if right - left + 1 &gt; max_length:\n                start = left\n                max_length = right - left + 1\n            left -= 1\n            right += 1\n\n    return s[start:start + max_length]\n\n# Test the solution\ns = \"babad\"\nprint(longest_palindrome(s))  # Output: \"bab\" or \"aba\"\n</code></pre></p> <p>In this problem, we use the technique of expanding around the center to find the longest palindromic substring. We iterate over each character in the string and treat it as the center of a potential palindrome, expanding outward to check if the substring formed is a palindrome. We repeat this process for both odd-length and even-length palindromes.</p> <p>Sure! Let's explore another problem-solving example focusing on implementing an appropriate algorithm:</p>"},{"location":"python/cookbook/module-4/#11-merge-intervals","title":"11: Merge Intervals","text":"<p>Problem Statement: Given a collection of intervals, merge overlapping intervals.</p> <p>Example: <pre><code>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: The intervals [1,3] and [2,6] are overlapping, so they are merged into [1,6].\n</code></pre></p> <p>Solution: <pre><code>def merge_intervals(intervals):\n    if not intervals:\n        return []\n\n    intervals.sort(key=lambda x: x[0])  # Sort intervals based on the start time\n    merged = [intervals[0]]\n\n    for interval in intervals[1:]:\n        if interval[0] &lt;= merged[-1][1]:  # Overlapping intervals\n            merged[-1][1] = max(merged[-1][1], interval[1])\n        else:\n            merged.append(interval)\n\n    return merged\n\n# Test the solution\nintervals = [[1, 3], [2, 6], [8, 10], [15, 18]]\nprint(merge_intervals(intervals))  # Output: [[1,6],[8,10],[15,18]]\n</code></pre></p> <p>In this problem, we first sort the intervals based on their start times. Then, we iterate through the sorted intervals and merge overlapping intervals as necessary. If an interval overlaps with the last interval in the merged list, we update the end time of the last interval accordingly. Otherwise, we add the interval to the merged list.</p> <p>Certainly! Let's explore another problem-solving example focusing on implementing an appropriate algorithm:</p>"},{"location":"python/cookbook/module-4/#12-three-sum","title":"12: Three Sum","text":"<p>Problem Statement: Given an array <code>nums</code> of n integers, find all unique triplets in the array which gives the sum of zero.</p> <p>Example: <pre><code>Input: nums = [-1, 0, 1, 2, -1, -4]\nOutput: [[-1, -1, 2], [-1, 0, 1]]\nExplanation: The triplets [-1, -1, 2] and [-1, 0, 1] sum up to zero.\n</code></pre></p> <p>Solution: <pre><code>def three_sum(nums):\n    nums.sort()\n    result = []\n    n = len(nums)\n\n    for i in range(n - 2):\n        if i &gt; 0 and nums[i] == nums[i - 1]:  # Skip duplicates\n            continue\n        left = i + 1\n        right = n - 1\n        while left &lt; right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                while left &lt; right and nums[left] == nums[left + 1]:  # Skip duplicates\n                    left += 1\n                while left &lt; right and nums[right] == nums[right - 1]:  # Skip duplicates\n                    right -= 1\n                left += 1\n                right -= 1\n            elif total &lt; 0:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n\n# Test the solution\nnums = [-1, 0, 1, 2, -1, -4]\nprint(three_sum(nums))  # Output: [[-1, -1, 2], [-1, 0, 1]]\n</code></pre></p> <p>In this problem, we first sort the array <code>nums</code> to facilitate the two-pointer approach. Then, we iterate through the array and use two pointers to find the triplets whose sum is zero. We skip duplicate elements to avoid duplicate triplets in the result.</p>"},{"location":"python/cookbook/module-4/#13-word-break","title":"13: Word Break","text":"<p>Problem Statement: Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, determine if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Example: <pre><code>Input: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: True\nExplanation: \"leetcode\" can be segmented into \"leet code\".\n</code></pre></p> <p>Solution: <pre><code>def word_break(s, wordDict):\n    word_set = set(wordDict)\n    n = len(s)\n    dp = [False] * (n + 1)\n    dp[0] = True\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n\n    return dp[n]\n\n# Test the solution\ns = \"leetcode\"\nwordDict = [\"leet\", \"code\"]\nprint(word_break(s, wordDict))  # Output: True\n</code></pre></p> <p>In this problem, we use dynamic programming to determine if the given string <code>s</code> can be segmented into words from the dictionary <code>wordDict</code>. We iterate through each position in the string and check if the substring ending at that position can be segmented into words from the dictionary.</p> <p>By practising problems like these and understanding how to implement appropriate algorithms like dynamic programming for word segmentation, you'll be better prepared to optimize solutions for similar challenges in the assessment.</p>"},{"location":"python/cookbook/module-4/#14-top-k-frequent-elements","title":"14: Top K Frequent Elements","text":"<p>Problem Statement: Given a non-empty array of integers <code>nums</code>, return the k most frequent elements.</p> <p>Example: <pre><code>Input: nums = [1, 1, 1, 2, 2, 3], k = 2\nOutput: [1, 2]\nExplanation: The elements 1 and 2 are the most frequent. \n</code></pre></p> <p>Solution: <pre><code>from collections import Counter\nimport heapq\n\ndef top_k_frequent(nums, k):\n    count = Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n# Test the solution\nnums = [1, 1, 1, 2, 2, 3]\nk = 2\nprint(top_k_frequent(nums, k))  # Output: [1, 2]\n</code></pre></p> <p>In this problem, we use a combination of Counter and heapq to efficiently find the k most frequent elements in the given array <code>nums</code>. We first count the frequency of each element using Counter, then create a max heap (using a min heap with negative frequencies) to store the elements based on their frequencies. Finally, we pop k elements from the heap to get the k most frequent elements.</p> <p>By practising problems like these and understanding how to implement appropriate algorithms like heap-based solutions for finding top-k frequent elements, you'll be better prepared to optimize solutions for similar challenges in the assessment.</p> <p>These examples cover the fundamental techniques you should be familiar with for our assessment. They emphasize problem solving and efficient implementation, which are crucial for performing well in this module.</p>"},{"location":"python/string%20manipulation/Alternating%20Characters/","title":"Alternating Characters","text":""},{"location":"python/string%20manipulation/Alternating%20Characters/#problem-statement","title":"Problem Statement","text":"<p>You are given a string containing characters 'A' and 'B' only. Your task is to change it into a string such that there are no matching adjacent characters. To do this, you are allowed to delete zero or more characters in the string.</p>"},{"location":"python/string%20manipulation/Alternating%20Characters/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing only characters 'A' and 'B'. The length of  S  will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Alternating%20Characters/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the minimum number of deletions required to make the string alternate.</li> </ul>"},{"location":"python/string%20manipulation/Alternating%20Characters/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only characters 'A' and 'B'.</li> </ul>"},{"location":"python/string%20manipulation/Alternating%20Characters/#example","title":"Example","text":"<p>Input  <pre><code>AABAAB\n</code></pre></p> <p>Output  <pre><code>2\n</code></pre></p>"},{"location":"python/string%20manipulation/Alternating%20Characters/#explanation","title":"Explanation","text":"<p>In the input string \"AABAAB\": - The first and second 'A' are the same and adjacent, so we can delete one 'A' to make it \"ABAAB\". - The fourth and fifth 'A' are the same and adjacent, so we can delete one 'A' to make it \"ABAB\". - The string \"ABAB\" has no matching adjacent characters.</p>"},{"location":"python/string%20manipulation/Alternating%20Characters/#function-signature","title":"Function Signature","text":"<pre><code>def alternating_characters(S: str) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>AAAA\n</code></pre></p> <p>Sample Output 1 <pre><code>3\n</code></pre></p> <p>Sample Input 2 <pre><code>BBBBB\n</code></pre></p> <p>Sample Output 2 <pre><code>4\n</code></pre></p> <p>Sample Input 3 <pre><code>ABABABAB\n</code></pre></p> <p>Sample Output 3 <pre><code>0\n</code></pre></p>"},{"location":"python/string%20manipulation/Alternating%20Characters/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Alternating Characters\" problem:</p> <pre><code>def alternating_characters(S: str) -&gt; int:\n    deletions = 0\n    for i in range(1, len(S)):\n        if S[i] == S[i - 1]:\n            deletions += 1\n    return deletions\n\n# Test cases\nprint(alternating_characters(\"AABAAB\"))  # Output: 2\nprint(alternating_characters(\"AAAA\"))    # Output: 3\nprint(alternating_characters(\"BBBBB\"))   # Output: 4\nprint(alternating_characters(\"ABABABAB\"))  # Output: 0\n</code></pre>"},{"location":"python/string%20manipulation/Alternating%20Characters/#explanation_1","title":"Explanation","text":"<ol> <li>Initial Setup: Initialize a counter <code>deletions</code> to zero.</li> <li>Traverse the String: Iterate through the string starting from the second character.</li> <li>Count Deletions:</li> <li>If the current character is the same as the previous character, increment the <code>deletions</code> counter.</li> <li>Return Result: Return the total count of deletions required to make the string alternate.</li> </ol> <p>This solution efficiently counts the minimum number of deletions needed to ensure no matching adjacent characters.</p>"},{"location":"python/string%20manipulation/Anagram%20Difference/","title":"Anagram Difference","text":""},{"location":"python/string%20manipulation/Anagram%20Difference/#problem-statement","title":"Problem Statement","text":"<p>You are given two strings,  A  and  B , both consisting of lowercase English letters. Your task is to determine the minimum number of character deletions required to make  A  and  B  anagrams of each other.</p>"},{"location":"python/string%20manipulation/Anagram%20Difference/#input-format","title":"Input Format","text":"<ul> <li>Two strings  A  and  B , each containing only lowercase English letters. The length of each string will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Anagram%20Difference/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the minimum number of deletions required to make  A  and  B  anagrams.</li> </ul>"},{"location":"python/string%20manipulation/Anagram%20Difference/#constraints","title":"Constraints","text":"<ul> <li>Both  A  and  B  will contain only lowercase English letters.</li> </ul>"},{"location":"python/string%20manipulation/Anagram%20Difference/#example","title":"Example","text":"<p>Input  <pre><code>A: cde\nB: abc\n</code></pre></p> <p>Output  <pre><code>4\n</code></pre></p>"},{"location":"python/string%20manipulation/Anagram%20Difference/#explanation","title":"Explanation","text":"<p>In the input strings: - To make \"cde\" and \"abc\" anagrams, we need to delete:   - 'c' from \"cde\"   - 'd' and 'e' from \"cde\"   - 'a' and 'b' from \"abc\" - Total deletions = 4.</p>"},{"location":"python/string%20manipulation/Anagram%20Difference/#function-signature","title":"Function Signature","text":"<pre><code>def make_anagram(A: str, B: str) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>A: hello\nB: billion\n</code></pre></p> <p>Sample Output 1 <pre><code>6\n</code></pre></p> <p>Sample Input 2 <pre><code>A: abc\nB: cde\n</code></pre></p> <p>Sample Output 2 <pre><code>4\n</code></pre></p>"},{"location":"python/string%20manipulation/Anagram%20Difference/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Anagram Difference\" problem:</p> <pre><code>from collections import Counter\n\ndef make_anagram(A: str, B: str) -&gt; int:\n    # Count the frequency of each character in both strings\n    count_A = Counter(A)\n    count_B = Counter(B)\n\n    # Initialize the number of deletions required\n    deletions = 0\n\n    # Find the characters that need to be deleted from A\n    for char in count_A:\n        if char in count_B:\n            deletions += abs(count_A[char] - count_B[char])\n        else:\n            deletions += count_A[char]\n\n    # Find the characters that need to be deleted from B\n    for char in count_B:\n        if char not in count_A:\n            deletions += count_B[char]\n\n    return deletions\n\n# Test cases\nprint(make_anagram(\"cde\", \"abc\"))    # Output: 4\nprint(make_anagram(\"hello\", \"billion\"))  # Output: 6\nprint(make_anagram(\"abc\", \"cde\"))    # Output: 4\n</code></pre>"},{"location":"python/string%20manipulation/Anagram%20Difference/#explanation_1","title":"Explanation","text":"<ol> <li>Count Frequencies: Use the <code>Counter</code> from the <code>collections</code> module to count the frequency of each character in both strings  A  and  B .</li> <li>Initialize Deletions: Initialize a variable <code>deletions</code> to count the number of deletions required.</li> <li>Compare Frequencies:</li> <li>For each character in  A , check if it exists in  B :<ul> <li>If it exists, add the absolute difference of their counts to <code>deletions</code>.</li> <li>If it doesn't exist, add the count of the character in  A  to <code>deletions</code>.</li> </ul> </li> <li>For each character in  B  that is not in  A , add the count of the character in  B  to <code>deletions</code>.</li> <li>Return Result: Return the total count of deletions required.</li> </ol> <p>This solution ensures that the minimum number of deletions needed to make the two strings anagrams of each other is correctly calculated.</p>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/","title":"Count Palindromic Subsequences","text":""},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#problem-statement","title":"Problem Statement","text":"<p>Given a string  S , count the number of palindromic subsequences in  S . A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindromic subsequence reads the same backward as forward.</p>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing only lowercase English letters. The length of  S  will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the number of palindromic subsequences in the string.</li> </ul>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only lowercase English letters.</li> </ul>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#example","title":"Example","text":"<p>Input  <pre><code>abc\n</code></pre></p> <p>Output  <pre><code>3\n</code></pre></p>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#explanation","title":"Explanation","text":"<p>In the input string \"abc\": - The palindromic subsequences are \"a\", \"b\", and \"c\". Thus, the output is 3.</p>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#function-signature","title":"Function Signature","text":"<pre><code>def count_palindromic_subsequences(S: str) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>aaa\n</code></pre></p> <p>Sample Output 1 <pre><code>6\n</code></pre></p> <p>Sample Input 2 <pre><code>abcb\n</code></pre></p> <p>Sample Output 2 <pre><code>6\n</code></pre></p>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Count Palindromic Subsequences\" problem:</p> <pre><code>def count_palindromic_subsequences(S: str) -&gt; int:\n    MOD = 10**9 + 7\n    n = len(S)\n\n    # dp[i][j] will be storing the count of palindromic subsequences in the substring S[i:j+1]\n    dp = [[0] * n for _ in range(n)]\n\n    # Every single character is a palindromic subsequence\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table\n    for length in range(2, n + 1):  # length of the substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if S[i] == S[j]:\n                dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % MOD\n            else:\n                dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]) % MOD\n\n    # The result is the number of palindromic subsequences in the whole string\n    return dp[0][n - 1]\n\n# Test cases\nassert count_palindromic_subsequences(\"abc\") == 3\nassert count_palindromic_subsequences(\"aaa\") == 6\nassert count_palindromic_subsequences(\"abcb\") == 6\nassert count_palindromic_subsequences(\"aabaa\") == 15\nassert count_palindromic_subsequences(\"abacdfgdcaba\") == 25\n\nprint(\"All tests passed!\")\n</code></pre>"},{"location":"python/string%20manipulation/Count%20Palindromic%20Subsequences/#explanation_1","title":"Explanation","text":"<ol> <li>Dynamic Programming Table: Use a 2D array <code>dp</code> where <code>dp[i][j]</code> represents the count of palindromic subsequences in the substring  S[i:j+1] .</li> <li>Base Case: Every single character is a palindromic subsequence. So, initialize <code>dp[i][i] = 1</code> for all  i .</li> <li>Fill the Table:</li> <li>Use a nested loop where the outer loop controls the length of the substring and the inner loop sets the start index of the substring.</li> <li>If the characters at the current start and end of the substring (<code>S[i]</code> and <code>S[j]</code>) are the same, update <code>dp[i][j]</code> by adding the counts from <code>dp[i+1][j]</code>, <code>dp[i][j-1]</code>, and 1 (to account for the new palindromic subsequences formed by including <code>S[i]</code> and <code>S[j]</code>).</li> <li>If the characters are different, update <code>dp[i][j]</code> by adding the counts from <code>dp[i+1][j]</code> and <code>dp[i][j-1]</code>, and subtracting <code>dp[i+1][j-1]</code> to remove the double-counted subsequences.</li> <li>Modulo Operation: Use modulo  10^9 + 7  to avoid overflow and ensure the result fits within standard integer limits.</li> <li>Return Result: The result is stored in <code>dp[0][n-1]</code>, which represents the count of palindromic subsequences in the entire string  S .</li> </ol> <p>This solution uses dynamic programming to efficiently count the number of palindromic subsequences in the string.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/","title":"Longest Substring Without Repeating Characters","text":""},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#problem-statement","title":"Problem Statement","text":"<p>Given a string  S , find the length of the longest substring without repeating characters.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing only ASCII characters. The length of  S  will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the length of the longest substring without repeating characters.</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only ASCII characters.</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#example","title":"Example","text":"<p>Input  <pre><code>abcabcbb\n</code></pre></p> <p>Output  <pre><code>3\n</code></pre></p>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#explanation","title":"Explanation","text":"<p>In the input string \"abcabcbb\": - The longest substring without repeating characters is \"abc\", which has a length of 3.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#function-signature","title":"Function Signature","text":"<pre><code>def length_of_longest_substring(S: str) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>bbbbb\n</code></pre></p> <p>Sample Output 1 <pre><code>1\n</code></pre></p> <p>Sample Input 2 <pre><code>pwwkew\n</code></pre></p> <p>Sample Output 2 <pre><code>3\n</code></pre></p>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Longest Substring Without Repeating Characters\" problem:</p> <pre><code>def length_of_longest_substring(S: str) -&gt; int:\n    char_index = {}\n    longest = 0\n    start = 0\n\n    for i, char in enumerate(S):\n        if char in char_index and char_index[char] &gt;= start:\n            start = char_index[char] + 1\n        char_index[char] = i\n        longest = max(longest, i - start + 1)\n\n    return longest\n\n# Test cases\nassert length_of_longest_substring(\"abcabcbb\") == 3\nassert length_of_longest_substring(\"bbbbb\") == 1\nassert length_of_longest_substring(\"pwwkew\") == 3\nassert length_of_longest_substring(\"\") == 0\nassert length_of_longest_substring(\" \") == 1\nassert length_of_longest_substring(\"au\") == 2\nassert length_of_longest_substring(\"dvdf\") == 3\n\nprint(\"All tests passed!\")\n</code></pre>"},{"location":"python/string%20manipulation/Longest%20Substring%20Without%20Repeating%20Characters/#explanation_1","title":"Explanation","text":"<ol> <li>Track Characters: Use a dictionary <code>char_index</code> to keep track of the last seen index of each character.</li> <li>Sliding Window:</li> <li>Use a sliding window approach with a <code>start</code> pointer to indicate the beginning of the current substring.</li> <li>Iterate through the string with an <code>i</code> pointer.</li> <li>If the character at <code>i</code> has been seen before and its last seen index is within the current window, move the <code>start</code> pointer to the right of the last seen index of that character.</li> <li>Update Longest Substring: Calculate the length of the current substring (from <code>start</code> to <code>i</code>) and update the longest length if necessary.</li> <li>Return Result: Return the length of the longest substring without repeating characters.</li> </ol> <p>This solution efficiently finds the length of the longest substring without repeating characters using a sliding window and dictionary for tracking indices, ensuring optimal performance.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/","title":"Longest Substring with At Most K Distinct Characters","text":""},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#problem-statement","title":"Problem Statement","text":"<p>Given a string  S  and an integer  K , find the length of the longest substring that contains at most  K  distinct characters.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing only ASCII characters. The length of  S  will not exceed 1000 characters.</li> <li>An integer  K  (1 \\leq K \\leq 100).</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the length of the longest substring that contains at most  K  distinct characters.</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only ASCII characters.</li> <li> K  will be at least 1 and at most the length of  S .</li> </ul>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#example","title":"Example","text":"<p>Input  <pre><code>S: \"eceba\"\nK: 2\n</code></pre></p> <p>Output  <pre><code>3\n</code></pre></p>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#explanation","title":"Explanation","text":"<p>In the input string \"eceba\" with  K = 2 : - The longest substring with at most 2 distinct characters is \"ece\", which has a length of 3.</p>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#function-signature","title":"Function Signature","text":"<pre><code>def length_of_longest_substring_k_distinct(S: str, K: int) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>S: \"aa\"\nK: 1\n</code></pre></p> <p>Sample Output 1 <pre><code>2\n</code></pre></p> <p>Sample Input 2 <pre><code>S: \"a\"\nK: 1\n</code></pre></p> <p>Sample Output 2 <pre><code>1\n</code></pre></p>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Longest Substring with At Most K Distinct Characters\" problem:</p> <pre><code>from collections import defaultdict\n\ndef length_of_longest_substring_k_distinct(S: str, K: int) -&gt; int:\n    if K == 0 or not S:\n        return 0\n\n    char_count = defaultdict(int)\n    start = 0\n    max_length = 0\n\n    for end in range(len(S)):\n        char_count[S[end]] += 1\n\n        while len(char_count) &gt; K:\n            char_count[S[start]] -= 1\n            if char_count[S[start]] == 0:\n                del char_count[S[start]]\n            start += 1\n\n        max_length = max(max_length, end - start + 1)\n\n    return max_length\n\n# Test cases\nassert length_of_longest_substring_k_distinct(\"eceba\", 2) == 3\nassert length_of_longest_substring_k_distinct(\"aa\", 1) == 2\nassert length_of_longest_substring_k_distinct(\"a\", 1) == 1\nassert length_of_longest_substring_k_distinct(\"abaccc\", 2) == 4\nassert length_of_longest_substring_k_distinct(\"aabbcc\", 1) == 2\nassert length_of_longest_substring_k_distinct(\"aabbcc\", 3) == 6\n\nprint(\"All tests passed!\")\n</code></pre>"},{"location":"python/string%20manipulation/Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/#explanation_1","title":"Explanation","text":"<ol> <li>Character Count: Use a <code>defaultdict</code> to count the frequency of characters in the current window.</li> <li>Sliding Window:</li> <li>Use two pointers (<code>start</code> and <code>end</code>) to represent the sliding window.</li> <li>Expand the window by moving the <code>end</code> pointer and updating <code>char_count</code>.</li> <li>Maintain Window: If the number of distinct characters in the current window exceeds  K , move the <code>start</code> pointer to the right until the window has at most  K  distinct characters, updating <code>char_count</code> accordingly.</li> <li>Update Maximum Length: Track the maximum length of the window that satisfies the condition of having at most  K  distinct characters.</li> <li>Return Result: Return the maximum length found during the process.</li> </ol> <p>This solution efficiently finds the length of the longest substring with at most  K  distinct characters using a sliding window approach and a dictionary for tracking character frequencies.</p>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/","title":"Minimum Window Substring","text":""},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#problem-statement","title":"Problem Statement","text":"<p>Given two strings  S  and  T , find the minimum window in  S  which will contain all the characters in  T  in complexity  O(n) .</p>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#input-format","title":"Input Format","text":"<ul> <li>Two strings  S  and  T  containing only ASCII characters. The length of  S  will not exceed 1000 characters. The length of  T  will not exceed 100 characters.</li> </ul>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#output-format","title":"Output Format","text":"<ul> <li>A single string representing the minimum window in  S  which contains all the characters in  T . If no such window exists, return an empty string.</li> </ul>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#constraints","title":"Constraints","text":"<ul> <li> S  and  T  will contain only ASCII characters.</li> <li>All characters in  T  are guaranteed to be unique.</li> </ul>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#example","title":"Example","text":"<p>Input  <pre><code>S: ADOBECODEBANC\nT: ABC\n</code></pre></p> <p>Output  <pre><code>BANC\n</code></pre></p>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#explanation","title":"Explanation","text":"<p>In the input strings: - The minimum window substring of \"ADOBECODEBANC\" that contains all characters of \"ABC\" is \"BANC\".</p>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#function-signature","title":"Function Signature","text":"<pre><code>def min_window(S: str, T: str) -&gt; str:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>S: A\nT: AA\n</code></pre></p> <p>Sample Output 1 <pre><code>\"\"\n</code></pre></p> <p>Sample Input 2 <pre><code>S: A\nT: A\n</code></pre></p> <p>Sample Output 2 <pre><code>A\n</code></pre></p>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Minimum Window Substring\" problem:</p> <pre><code>from collections import Counter\n\ndef min_window(S: str, T: str) -&gt; str:\n    if not S or not T:\n        return \"\"\n\n    t_count = Counter(T)\n    current_count = Counter()\n\n    start = 0\n    min_length = float('inf')\n    min_window_start = 0\n    have, need = 0, len(t_count)\n\n    for end in range(len(S)):\n        char = S[end]\n        current_count[char] += 1\n\n        if char in t_count and current_count[char] == t_count[char]:\n            have += 1\n\n        while have == need:\n            if (end - start + 1) &lt; min_length:\n                min_length = end - start + 1\n                min_window_start = start\n\n            current_count[S[start]] -= 1\n            if S[start] in t_count and current_count[S[start]] &lt; t_count[S[start]]:\n                have -= 1\n            start += 1\n\n    if min_length == float('inf'):\n        return \"\"\n    else:\n        return S[min_window_start:min_window_start + min_length]\n\n# Test cases\nassert min_window(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"\nassert min_window(\"A\", \"AA\") == \"\"\nassert min_window(\"A\", \"A\") == \"A\"\nassert min_window(\"aa\", \"aa\") == \"aa\"\nassert min_window(\"a\", \"b\") == \"\"\n\nprint(\"All tests passed!\")\n</code></pre>"},{"location":"python/string%20manipulation/Minimum%20Window%20Substring/#explanation_1","title":"Explanation","text":"<ol> <li>Character Count: Use a <code>Counter</code> to count the characters in  T  (<code>t_count</code>).</li> <li>Sliding Window:</li> <li>Use two pointers (<code>start</code> and <code>end</code>) to represent the sliding window.</li> <li>Maintain a <code>current_count</code> counter to track characters in the current window.</li> <li>Expand Window: Expand the window by moving the <code>end</code> pointer and updating <code>current_count</code>.</li> <li>Contract Window: When all characters from  T  are included in the current window (i.e., <code>have == need</code>):</li> <li>Update the minimum window size if the current window is smaller.</li> <li>Move the <code>start</code> pointer to the right to find a smaller valid window.</li> <li>Check Validity: If the current character at <code>start</code> is part of  T  and its count in <code>current_count</code> falls below the required count, decrement <code>have</code>.</li> <li>Return Result: After the loop, if <code>min_length</code> is still infinity, return an empty string. Otherwise, return the minimum window substring.</li> </ol> <p>This solution ensures optimal performance using a sliding window approach and counters for efficient character counting.</p>"},{"location":"python/string%20manipulation/Palindrome%20Index/","title":"Palindrome Index","text":""},{"location":"python/string%20manipulation/Palindrome%20Index/#problem-statement","title":"Problem Statement","text":"<p>Given a string  S  of lowercase English letters, determine the index of the character that should be removed to make  S  a palindrome. If  S  is already a palindrome, return -1. If there is more than one possible solution, return the smallest index.</p>"},{"location":"python/string%20manipulation/Palindrome%20Index/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing only lowercase English letters. The length of  S  will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Palindrome%20Index/#output-format","title":"Output Format","text":"<ul> <li>An integer representing the index of the character to remove to make the string a palindrome, or -1 if the string is already a palindrome.</li> </ul>"},{"location":"python/string%20manipulation/Palindrome%20Index/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only lowercase English letters.</li> </ul>"},{"location":"python/string%20manipulation/Palindrome%20Index/#example","title":"Example","text":"<p>Input  <pre><code>abca\n</code></pre></p> <p>Output  <pre><code>1\n</code></pre></p>"},{"location":"python/string%20manipulation/Palindrome%20Index/#explanation","title":"Explanation","text":"<p>In the input string \"abca\": - Removing the character at index 1 ('b') results in \"aca\", which is a palindrome.</p>"},{"location":"python/string%20manipulation/Palindrome%20Index/#function-signature","title":"Function Signature","text":"<pre><code>def palindrome_index(S: str) -&gt; int:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>racecar\n</code></pre></p> <p>Sample Output 1 <pre><code>-1\n</code></pre></p> <p>Sample Input 2 <pre><code>aaab\n</code></pre></p> <p>Sample Output 2 <pre><code>3\n</code></pre></p>"},{"location":"python/string%20manipulation/Palindrome%20Index/#solution","title":"Solution","text":"<p>Here's a solution in Python for the \"Palindrome Index\" problem:</p> <pre><code>def palindrome_index(S: str) -&gt; int:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if is_palindrome(S):\n        return -1\n\n    for i in range(len(S) // 2):\n        if S[i] != S[-(i + 1)]:\n            if is_palindrome(S[:i] + S[i + 1:]):\n                return i\n            elif is_palindrome(S[:-(i + 1)] + S[-i:]):\n                return len(S) - i - 1\n\n    return -1\n\n# Test cases\nassert palindrome_index(\"abca\") == 1\nassert palindrome_index(\"racecar\") == -1\nassert palindrome_index(\"aaab\") == 3\nassert palindrome_index(\"baa\") == 0\nassert palindrome_index(\"abc\") == 0\n\nprint(\"All tests passed!\")\n</code></pre>"},{"location":"python/string%20manipulation/Palindrome%20Index/#explanation_1","title":"Explanation","text":"<ol> <li>Check Palindrome: Define a helper function <code>is_palindrome</code> to check if a string is a palindrome.</li> <li>Initial Check: If the input string  S  is already a palindrome, return -1.</li> <li>Identify Mismatch:</li> <li>Traverse the string from both ends towards the middle.</li> <li>If a mismatch is found, check if removing either of the mismatched characters results in a palindrome.</li> <li>If removing the character at index  i  makes it a palindrome, return  i .</li> <li>If removing the character at the symmetric position from the end makes it a palindrome, return that position.</li> <li>Return Result: If no valid character is found to remove (which should not happen with the constraints), return -1.</li> </ol> <p>The solution efficiently identifies the index of the character to remove to make the string a palindrome, ensuring minimal computational overhead.</p>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/","title":"Reverse Vowel Swap","text":""},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#problem-statement","title":"Problem Statement","text":"<p>Given a string  S , you need to reverse only the vowels in the string and return the modified string. The vowels are 'a', 'e', 'i', 'o', 'u' (both lowercase and uppercase).</p>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#input-format","title":"Input Format","text":"<ul> <li>A single string  S  containing English letters. The length of  S  will not exceed 1000 characters.</li> </ul>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#output-format","title":"Output Format","text":"<ul> <li>A single string with the vowels reversed.</li> </ul>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#constraints","title":"Constraints","text":"<ul> <li> S  will contain only English letters (both uppercase and lowercase).</li> </ul>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#example","title":"Example","text":"<p>Input  <pre><code>hello world\n</code></pre></p> <p>Output  <pre><code>holle werld\n</code></pre></p>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#explanation","title":"Explanation","text":"<p>In the input string \"hello world\": - The vowels are 'e', 'o', 'o'. - Reversing these vowels results in 'o', 'o', 'e'. - The string after reversing the vowels becomes \"holle werld\".</p>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#function-signature","title":"Function Signature","text":"<pre><code>def reverse_vowels(S: str) -&gt; str:\n    # Your code here\n</code></pre> <p>Sample Input 1 <pre><code>Coding\n</code></pre></p> <p>Sample Output 1 <pre><code>HeckarRonk\n</code></pre></p> <p>Sample Input 2 <pre><code>Programming is fun!\n</code></pre></p> <p>Sample Output 2 <pre><code>Prigrammong os fun!\n</code></pre></p>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#note","title":"Note","text":"<ol> <li>The function should be case-insensitive when identifying vowels.</li> <li>Ensure that the non-vowel characters remain in their original positions.</li> <li>Consider edge cases such as strings with no vowels, strings with all vowels, and mixed-case strings.</li> </ol> <p>Here's a solution in Python for the \"Reverse Vowel Swap\" problem:</p> <pre><code>def reverse_vowels(S: str) -&gt; str:\n    vowels = set(\"aeiouAEIOU\")\n    s_list = list(S)\n    i, j = 0, len(S) - 1\n\n    while i &lt; j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j += 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n\n    return ''.join(s_list)\n\n# Test cases\nprint(reverse_vowels(\"hello world\"))  # Output: \"holle werld\"\nprint(reverse_vowels(\"Coding\"))   # Output: \"Cidong\"\nprint(reverse_vowels(\"Programming is fun!\"))  # Output: \"Prigrammong os fun!\"\n</code></pre>"},{"location":"python/string%20manipulation/Reverse%20Vowel%20Swap/#explanation_1","title":"Explanation","text":"<ol> <li>Identify Vowels: Create a set of vowels for quick lookup.</li> <li>Two-pointer Technique: Use two pointers (<code>i</code> and <code>j</code>) to traverse the string from both ends.</li> <li>Swap Vowels:</li> <li>If the character at <code>i</code> is not a vowel, move <code>i</code> forward.</li> <li>If the character at <code>j</code> is not a vowel, move <code>j</code> backward.</li> <li>If both characters at <code>i</code> and <code>j</code> are vowels, swap them and move both pointers.</li> <li>Convert List to String: Convert the modified list back to a string and return it.</li> </ol> <p>This solution ensures that the vowels are reversed while maintaining the positions of non-vowel characters.</p>"},{"location":"tips/busybox/","title":"Busybox","text":""},{"location":"tips/busybox/#man-page-busybox","title":"Man Page: BusyBox","text":"<p>NAME <pre><code>busybox - The Swiss Army Knife of Embedded Linux\n</code></pre></p> <p>SYNOPSIS <pre><code>busybox [function [arguments]...]\n</code></pre></p> <p>DESCRIPTION BusyBox combines tiny versions of many common UNIX utilities into a single small executable. It provides minimalist replacements for most of the utilities you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox generally have fewer options than their full-featured GNU cousins; however, the options that are included provide the expected functionality and behave much like their GNU counterparts.</p> <p>COMMANDS BusyBox has multiple built-in commands. Below are a few examples:</p> <ul> <li>ash: A shell command interpreter.</li> <li>cat: Concatenate files and print on the standard output.</li> <li>cp: Copy files and directories.</li> <li>grep: Print lines matching a pattern.</li> </ul> <p>OPTIONS Each built-in command supports various options. For instance:</p> <ul> <li>cp:</li> <li><code>-a</code>: Archive mode, equivalent to -dpR.</li> <li><code>-f</code>: Force, overwrite existing files.</li> </ul> <p>EXAMPLES Run the BusyBox shell: <pre><code>busybox ash\n</code></pre></p> <p>Copy a file using BusyBox: <pre><code>busybox cp source_file target_file\n</code></pre></p> <p>Search for a pattern in a file using BusyBox: <pre><code>busybox grep 'pattern' file\n</code></pre></p> <p>SEE ALSO Refer to individual command help for detailed options using: <pre><code>busybox command --help\n</code></pre></p> <p>For more information, visit the official BusyBox website.</p>"},{"location":"tips/hackerrank-python/","title":"HackerRank Python","text":"<p>If you need to access python documentation during your assessment you can use these commands from within the test environment.</p> <p>You can run these commands in your python 'window'. The output will be displayed in the Failed Test section, under <code>Your Output (stdout)</code></p>"},{"location":"tips/hackerrank-python/#get-list-of-keywords","title":"Get list of keywords","text":"<pre><code>help('keywords')\n</code></pre> <pre><code>Here is a list of the Python keywords.  Enter any keyword to get more help.\nFalse               class               from                or\nNone                continue            global              pass\nTrue                def                 if                  raise\nand                 del                 import              return\nas                  elif                in                  try\nassert              else                is                  while\nasync               except              lambda              with\nawait               finally             nonlocal            yield\nbreak               for                 not    \n</code></pre>"},{"location":"tips/hackerrank-python/#get-list-of-symbols","title":"Get list of symbols","text":"<pre><code>help('symbols')\n</code></pre> <pre><code>Here is a list of the punctuation symbols which Python assigns special meaning\nto. Enter any symbol to get more help.\n!=                  +                   &lt;=                  __\n\"                   +=                  &lt;&gt;                  `\n\"\"\"                 ,                   ==                  b\"\n%                   -                   &gt;                   b'\n%=                  -=                  &gt;=                  f\"\n&amp;                   .                   &gt;&gt;                  f'\n&amp;=                  ...                 &gt;&gt;=                 j\n'                   /                   @                   r\"\n'''                 //                  J                   r'\n(                   //=                 [                   u\"\n)                   /=                  \\                   u'\n*                   :                   ]                   |\n**                  &lt;                   ^                   |=\n**=                 &lt;&lt;                  ^=                  ~\n*=                  &lt;&lt;=                 _    \n</code></pre>"},{"location":"tips/hackerrank-python/#get-list-of-topics","title":"Get list of topics","text":"<pre><code>help('topics')\n</code></pre> <pre><code>Here is a list of available topics.  Enter any topic name to get more help.\nASSERTION           DELETION            LOOPING             SHIFTING\nASSIGNMENT          DICTIONARIES        MAPPINGMETHODS      SLICINGS\nATTRIBUTEMETHODS    DICTIONARYLITERALS  MAPPINGS            SPECIALATTRIBUTES\nATTRIBUTES          DYNAMICFEATURES     METHODS             SPECIALIDENTIFIERS\nAUGMENTEDASSIGNMENT ELLIPSIS            MODULES             SPECIALMETHODS\nBASICMETHODS        EXCEPTIONS          NAMESPACES          STRINGMETHODS\nBINARY              EXECUTION           NONE                STRINGS\nBITWISE             EXPRESSIONS         NUMBERMETHODS       SUBSCRIPTS\nBOOLEAN             FLOAT               NUMBERS             TRACEBACKS\nCALLABLEMETHODS     FORMATTING          OBJECTS             TRUTHVALUE\nCALLS               FRAMEOBJECTS        OPERATORS           TUPLELITERALS\nCLASSES             FRAMES              PACKAGES            TUPLES\nCODEOBJECTS         FUNCTIONS           POWER               TYPEOBJECTS\nCOMPARISON          IDENTIFIERS         PRECEDENCE          TYPES\nCOMPLEX             IMPORTING           PRIVATENAMES        UNARY\nCONDITIONAL         INTEGER             RETURNING           UNICODE\nCONTEXTMANAGERS     LISTLITERALS        SCOPING             \nCONVERSIONS         LISTS               SEQUENCEMETHODS     \nDEBUGGING           LITERALS            SEQUENCES   \n</code></pre>"},{"location":"tips/hackerrank-python/#help-on-topic","title":"Help on topic","text":"<pre><code>help('ASSERTION')\n</code></pre> <pre><code>The \"assert\" statement\n**********************\nAssert statements are a convenient way to insert debugging assertions\ninto a program:\n   assert_stmt ::= \"assert\" expression [\",\" expression]\nThe simple form, \"assert expression\", is equivalent to\n</code></pre>"},{"location":"tips/hackerrank-python/#get-list-of-modules","title":"Get list of modules","text":"<pre><code>help('modules')\n</code></pre> <pre><code>Please wait a moment while I gather a list of all available modules...\nCrypto              _testinternalcapi   gc                  runpy\nSolution            _testmultiphase     genericpath         sched\n__future__          _thread             getopt              secrets\n__hello__           _threading_local    getpass             select\n__phello__          _tkinter            gettext             selectors\n...\n</code></pre>"},{"location":"tips/hackerrank-python/#help-on-a-class","title":"Help on a class","text":"<pre><code>help(set)\n</code></pre> <pre><code>Help on class str in module builtins:\nclass str(object)\n |  str(object='') -&gt; str\n |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n    ...\n</code></pre>"},{"location":"tips/hackerrank-python/#get-list-of-functions","title":"Get list of functions","text":"<pre><code>print(dir(str))\n</code></pre> <pre><code>['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n</code></pre>"},{"location":"tips/hackerrank-python/#function-details","title":"Function Details","text":"<pre><code>help(str.replace)\n</code></pre> <pre><code>Help on function replace:\nreplace(self, old, new, count=-1)\n    S.replace(old, new[, count]) -&gt; unicode\n\n    Return a copy of S with all occurrences of substring\n    old replaced by new.  If the optional argument count is\n    given, only the first count occurrences are replaced.\n</code></pre> <p>Certainly! Here are some additional useful Python commands and techniques that can be helpful in various scenarios:</p>"},{"location":"tips/hackerrank-python/#get-list-of-built-in-functions","title":"Get list of built-in functions","text":"<pre><code>help('builtins')\n</code></pre> <pre><code>Help on built-in module builtins:\n\nNAME\n    builtins\n\nDESCRIPTION\n    Built-in functions, exceptions, and other objects.\n\nBUILT-IN FUNCTIONS\n    abs(...)\n    all(...)\n    any(...)\n    ascii(...)\n    bin(...)\n    bool(...)\n    ...\n</code></pre>"},{"location":"tips/hackerrank-python/#documentation-for-a-specific-built-in-function","title":"Documentation for a specific built-in function","text":"<pre><code>help(print)\n</code></pre> <pre><code>Help on built-in function print in module builtins:\n\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file: a file-like object (stream); defaults to the current sys.stdout.\n    sep:  string inserted between values, default a space.\n    end:  string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n</code></pre>"},{"location":"tips/hackerrank-python/#get-list-of-methods-of-an-object","title":"Get list of methods of an object","text":"<pre><code>dir([])\n</code></pre> <pre><code>['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n</code></pre>"},{"location":"tips/hackerrank-python/#documentation-for-a-specific-method-of-a-class","title":"Documentation for a specific method of a class","text":"<pre><code>help([].append)\n</code></pre> <pre><code>Help on built-in function append:\n\nappend(self, object, /)\n    Append object to the end of the list.\n</code></pre>"},{"location":"tips/hackerrank-python/#check-python-version","title":"Check Python version","text":"<pre><code>import sys\nprint(sys.version)\n</code></pre> <pre><code>3.8.5 (default, Aug  5 2020, 08:36:46) \n[GCC 7.3.0]\n</code></pre>"},{"location":"tips/hackerrank-python/#list-all-attributes-and-methods-of-a-module","title":"List all attributes and methods of a module","text":"<pre><code>import math\nprint(dir(math))\n</code></pre> <pre><code>['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']\n</code></pre>"},{"location":"tips/hackerrank-python/#documentation-for-a-specific-module","title":"Documentation for a specific module","text":"<pre><code>help(math)\n</code></pre> <pre><code>Help on built-in module math:\n\nNAME\n    math\n\nMODULE REFERENCE\n    https://docs.python.org/3.8/library/math.html\n\n    The following documentation is automatically generated from the Python\n    source files. It may be incomplete, incorrect or include features that\n    are considered implementation detail and may vary between Python\n    implementations. When in doubt, consult the module reference at the\n    location listed above.\n\nDESCRIPTION\n    This module provides access to the mathematical functions\n    defined by the C standard.\n</code></pre>"},{"location":"tips/hackerrank-python/#search-for-a-specific-term-in-documentation","title":"Search for a specific term in documentation","text":"<pre><code>help('string methods')\n</code></pre> <pre><code>Help on topic string methods:\n\nSTRINGS\n\nThe str class is used to hold Unicode strings, and provides a variety of methods for working with and manipulating strings.\n\nThe methods on str are:\n\n    str.capitalize\n    str.casefold\n    str.center\n    str.count\n    str.encode\n    str.endswith\n    str.expandtabs\n    str.find\n    str.format\n    str.format_map\n    str.index\n    str.isalnum\n    str.isalpha\n    str.isdecimal\n    str.isdigit\n    str.isidentifier\n    str.islower\n    str.isnumeric\n    str.isprintable\n    str.isspace\n    str.istitle\n    str.isupper\n    str.join\n    str.ljust\n    str.lower\n    str.lstrip\n    str.maketrans\n    str.partition\n    str.replace\n    str.rfind\n    str.rindex\n    str.rjust\n    str.rpartition\n    str.rsplit\n    str.rstrip\n    str.split\n    str.splitlines\n    str.startswith\n    str.strip\n    str.swapcase\n    str.title\n    str.translate\n    str.upper\n    str.zfill\n</code></pre>"},{"location":"tips/hackerrank-python/#use-of-pydoc-module","title":"Use of <code>pydoc</code> module","text":"<pre><code>import pydoc\npydoc.render_doc('str')\n</code></pre> <pre><code>Help on class str in module builtins:\n\nclass str(object)\n |  str(object='') -&gt; str\n |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n |  \n |  Create a new string object from the given object. If encoding or\n |  errors is specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n    ...\n</code></pre> <p>These additional commands and techniques will provide comprehensive assistance and documentation within a Python environment, helping with everything from checking available modules and keywords to getting detailed help on functions and classes.</p>"},{"location":"tips/hackerrank-shell/","title":"HackerRank Shell","text":""},{"location":"tips/hackerrank-shell/#bash","title":"Bash","text":"<pre><code>ls /bin/\n</code></pre> <pre><code>arch\nash\nbase64\nbbconfig\nbusybox\ncat\nchattr\nchgrp\nchmod\nchown\ncp\ndate\ndd\ndf\ndmesg\ndnsdomainname\ndumpkmap\necho\ned\negrep\nfalse\nfatattr\nfdflush\nfgrep\nfsync\ngetopt\ngrep\ngunzip\ngzip\nhostname\nionice\niostat\nipcalc\nkbd_mode\nkill\nlink\nlinux32\nlinux64\nln\nlogin\nls\nlsattr\nlzop\nmakemime\nmkdir\nmknod\nmktemp\nmore\nmount\nmountpoint\nmpstat\nmv\nnetstat\nnice\npidof\nping\nping6\npipe_progress\nprintenv\nps\npwd\nreformime\nrev\nrm\nrmdir\nrun-parts\nsed\nsetpriv\nsetserial\nsh\nsleep\nstat\nstty\nsu\nsync\ntar\ntouch\ntrue\numount\nuname\nusleep\nwatch\nzcat\n</code></pre>"},{"location":"tips/hackerrank-shell/#usrbin","title":"/usr/bin","text":"<pre><code>[\n[[\nawk\nbasename\nbc\nbeep\nblkdiscard\nbunzip2\nbzcat\nbzip2\ncal\nchvt\ncksum\nclear\ncmp\ncomm\ncpio\ncrontab\ncryptpw\ncut\ndc\ndeallocvt\ndiff\ndirname\ndos2unix\ndu\neject\nenv\nexpand\nexpr\nfactor\nfallocate\nfind\nflock\nfold\nfree\nfuser\ngetconf\ngetent\ngroups\nhd\nhead\nhexdump\nhostid\niconv\nid\ninstall\nipcrm\nipcs\nkillall\nlast\nldd\nless\nlogger\nlsof\nlsusb\nlzcat\nlzma\nlzopcat\nmd5sum\nmesg\nmicrocom\nmkfifo\nmkpasswd\nnc\nnl\nnmeter\nnohup\nnproc\nnsenter\nnslookup\nod\nopenvt\npasswd\npaste\npgrep\npinentry\npkill\npmap\nprintf\npscan\npstree\npwdx\nreadlink\nrealpath\nrenice\nreset\nresize\nscanelf\nseq\nsetkeycodes\nsetsid\nsha1sum\nsha256sum\nsha3sum\nsha512sum\nshowkey\nshred\nshuf\nsort\nsplit\nssl_client\nstrings\nsum\ntac\ntail\ntee\ntest\ntime\ntimeout\ntop\ntr\ntraceroute\ntraceroute6\ntree\ntruncate\ntty\nttysize\nudhcpc6\nunexpand\nuniq\nunix2dos\nunlink\nunlzma\nunlzop\nunshare\nunxz\nunzip\nuptime\nuudecode\nuuencode\nvi\nvlock\nvolname\nwc\nwget\nwhich\nwho\nwhoami\nwhois\nxargs\nxxd\nxzcat\nyes\n</code></pre>"}]}